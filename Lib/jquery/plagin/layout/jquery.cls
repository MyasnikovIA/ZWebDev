/// 
/// ///<br>Скрипт(JS):
/// ///<br> &lt;script src='%ZWebDev.Lib.jquery.plagin.layout.jquery.cls'&gt;&lt;/script&gt; 
/// ///<br> <!--  <script src='%ZWebDev.Lib.jquery.plagin.layout.jquery.cls'></script>   -->
Class %ZWebDev.Lib.jquery.plagin.layout.jquery Extends %CSP.Page [ ProcedureBlock ]
{

/// Метод разбики исходного текста на Cache` код и HTML текст
ClassMethod ExecFrag(SrcCode = "", Beg = "", End = "")
{
     q:SrcCode=""   q:Beg=""    q:End=""    for ExecFragInd=1:1:$l(SrcCode,End){  s tmp=$p(SrcCode,End,ExecFragInd)   s Html=$p(tmp,Beg,1)     s Code=$p(tmp,Beg,2)   w Html   TRY {     x Code    } CATCH ErrorHandle {    zw ErrorHandle  }    }
}

/// 07/04/2019  15:19:08
ClassMethod OnPage() As %Library.Status [ Language = cache ]
{
   w $system.Encryption.Base64Decode(..#Frag1)
   w $system.Encryption.Base64Decode(..#Frag2)
   w $system.Encryption.Base64Decode(..#Frag3)
   w $system.Encryption.Base64Decode(..#Frag4)
     Quit $$$OK
}

ClassMethod OnPreHTTP() As %Library.Boolean
{
    Do %response.SetHeader("Content-Type","application/x-javascript") 
    if $d(%request.Data("download",1))
    {
       Do %response.SetHeader("Content-Disposition: attachment; filename=","C:\Users\Luda\Downloads\jquery.layout.all-1.2.0\jquery.js") 
    }
    q 1
}

Parameter DstName = "%ZWebDev.Lib.jquery.plagin.layout.jquery.cls";

Parameter FileName = "C:\Users\Luda\Downloads\jquery.layout.all-1.2.0\jquery.js";

Parameter Frag1 = "KGZ1bmN0aW9uKCl7Ci8qCiAqIGpRdWVyeSAxLjIuNiAtIE5ldyBXYXZlIEphdmFzY3JpcHQKICoK
ICogQ29weXJpZ2h0IChjKSAyMDA4IEpvaG4gUmVzaWcgKGpxdWVyeS5jb20pCiAqIER1YWwgbGlj
ZW5zZWQgdW5kZXIgdGhlIE1JVCAoTUlULUxJQ0VOU0UudHh0KQogKiBhbmQgR1BMIChHUEwtTElD
RU5TRS50eHQpIGxpY2Vuc2VzLgogKgogKiAkRGF0ZTogMjAwOC0wNS0yNCAxNDoyMjoxNyAtMDQw
MCAoU2F0LCAyNCBNYXkgMjAwOCkgJAogKiAkUmV2OiA1Njg1ICQKICovCgovLyBNYXAgb3ZlciBq
UXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGUKdmFyIF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LAov
LyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZQoJXyQgPSB3aW5kb3cuJDsKCnZh
ciBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBmdW5jdGlvbiggc2VsZWN0b3Is
IGNvbnRleHQgKSB7CgkvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBp
bml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCcKCXJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNl
bGVjdG9yLCBjb250ZXh0ICk7Cn07CgovLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwg
c3RyaW5ncyBvciBJRCBzdHJpbmdzCi8vIChib3RoIG9mIHdoaWNoIHdlIG9wdGltaXplIGZvcikK
dmFyIHF1aWNrRXhwciA9IC9eW148XSooPCgufFxzKSs+KVtePl0qJHxeIyhcdyspJC8sCgovLyBJ
cyBpdCBhIHNpbXBsZSBzZWxlY3RvcgoJaXNTaW1wbGUgPSAvXi5bXjojXFtcLl0qJC8sCgovLyBX
aWxsIHNwZWVkIHVwIHJlZmVyZW5jZXMgdG8gdW5kZWZpbmVkLCBhbmQgYWxsb3dzIG11bmdpbmcg
aXRzIG5hbWUuCgl1bmRlZmluZWQ7CgpqUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0gewoJ
aW5pdDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkgewoJCS8vIE1ha2Ugc3VyZSB0aGF0
IGEgc2VsZWN0aW9uIHdhcyBwcm92aWRlZAoJCXNlbGVjdG9yID0gc2VsZWN0b3IgfHwgZG9jdW1l
bnQ7CgoJCS8vIEhhbmRsZSAkKERPTUVsZW1lbnQpCgkJaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSAp
IHsKCQkJdGhpc1swXSA9IHNlbGVjdG9yOwoJCQl0aGlzLmxlbmd0aCA9IDE7CgkJCXJldHVybiB0
aGlzOwoJCX0KCQkvLyBIYW5kbGUgSFRNTCBzdHJpbmdzCgkJaWYgKCB0eXBlb2Ygc2VsZWN0b3Ig
PT0gInN0cmluZyIgKSB7CgkJCS8vIEFyZSB3ZSBkZWFsaW5nIHdpdGggSFRNTCBzdHJpbmcgb3Ig
YW4gSUQ/CgkJCXZhciBtYXRjaCA9IHF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApOwoKCQkJLy8g
VmVyaWZ5IGEgbWF0Y2gsIGFuZCB0aGF0IG5vIGNvbnRleHQgd2FzIHNwZWNpZmllZCBmb3IgI2lk
CgkJCWlmICggbWF0Y2ggJiYgKG1hdGNoWzFdIHx8ICFjb250ZXh0KSApIHsKCgkJCQkvLyBIQU5E
TEU6ICQoaHRtbCkgLT4gJChhcnJheSkKCQkJCWlmICggbWF0Y2hbMV0gKQoJCQkJCXNlbGVjdG9y
ID0galF1ZXJ5LmNsZWFuKCBbIG1hdGNoWzFdIF0sIGNvbnRleHQgKTsKCgkJCQkvLyBIQU5ETEU6
ICQoIiNpZCIpCgkJCQllbHNlIHsKCQkJCQl2YXIgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRC
eUlkKCBtYXRjaFszXSApOwoKCQkJCQkvLyBNYWtlIHN1cmUgYW4gZWxlbWVudCB3YXMgbG9jYXRl
ZAoJCQkJCWlmICggZWxlbSApewoJCQkJCQkvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgSUUgYW5k
IE9wZXJhIHJldHVybiBpdGVtcwoJCQkJCQkvLyBieSBuYW1lIGluc3RlYWQgb2YgSUQKCQkJCQkJ
aWYgKCBlbGVtLmlkICE9IG1hdGNoWzNdICkKCQkJCQkJCXJldHVybiBqUXVlcnkoKS5maW5kKCBz
ZWxlY3RvciApOwoKCQkJCQkJLy8gT3RoZXJ3aXNlLCB3ZSBpbmplY3QgdGhlIGVsZW1lbnQgZGly
ZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdAoJCQkJCQlyZXR1cm4galF1ZXJ5KCBlbGVtICk7
CgkJCQkJfQoJCQkJCXNlbGVjdG9yID0gW107CgkJCQl9CgoJCQkvLyBIQU5ETEU6ICQoZXhwciwg
W2NvbnRleHRdKQoJCQkvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRlbnQp
LmZpbmQoZXhwcikKCQkJfSBlbHNlCgkJCQlyZXR1cm4galF1ZXJ5KCBjb250ZXh0ICkuZmluZCgg
c2VsZWN0b3IgKTsKCgkJLy8gSEFORExFOiAkKGZ1bmN0aW9uKQoJCS8vIFNob3J0Y3V0IGZvciBk
b2N1bWVudCByZWFkeQoJCX0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciAp
ICkKCQkJcmV0dXJuIGpRdWVyeSggZG9jdW1lbnQgKVsgalF1ZXJ5LmZuLnJlYWR5ID8gInJlYWR5
IiA6ICJsb2FkIiBdKCBzZWxlY3RvciApOwoKCQlyZXR1cm4gdGhpcy5zZXRBcnJheShqUXVlcnku
bWFrZUFycmF5KHNlbGVjdG9yKSk7Cgl9LAoKCS8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1
ZXJ5IGJlaW5nIHVzZWQKCWpxdWVyeTogIjEuMi42IiwKCgkvLyBUaGUgbnVtYmVyIG9mIGVsZW1l
bnRzIGNvbnRhaW5lZCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldAoJc2l6ZTogZnVuY3Rpb24o
KSB7CgkJcmV0dXJuIHRoaXMubGVuZ3RoOwoJfSwKCgkvLyBUaGUgbnVtYmVyIG9mIGVsZW1lbnRz
IGNvbnRhaW5lZCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldAoJbGVuZ3RoOiAwLAoKCS8vIEdl
dCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1IKCS8vIEdldCB0
aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5CglnZXQ6IGZ1bmN0
aW9uKCBudW0gKSB7CgkJcmV0dXJuIG51bSA9PSB1bmRlZmluZWQgPwoKCQkJLy8gUmV0dXJuIGEg
J2NsZWFuJyBhcnJheQoJCQlqUXVlcnkubWFrZUFycmF5KCB0aGlzICkgOgoKCQkJLy8gUmV0dXJu
IGp1c3QgdGhlIG9iamVjdAoJCQl0aGlzWyBudW0gXTsKCX0sCgoJLy8gVGFrZSBhbiBhcnJheSBv
ZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFjawoJLy8gKHJldHVybmluZyB0aGUg
bmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpCglwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHsK
CQkvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldAoJCXZhciByZXQgPSBq
UXVlcnkoIGVsZW1zICk7CgoJCS8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAo
YXMgYSByZWZlcmVuY2UpCgkJcmV0LnByZXZPYmplY3QgPSB0aGlzOwoKCQkvLyBSZXR1cm4gdGhl
IG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldAoJCXJldHVybiByZXQ7Cgl9LAoKCS8vIEZvcmNlIHRo
ZSBjdXJyZW50IG1hdGNoZWQgc2V0IG9mIGVsZW1lbnRzIHRvIGJlY29tZQoJLy8gdGhlIHNwZWNp
ZmllZCBhcnJheSBvZiBlbGVtZW50cyAoZGVzdHJveWluZyB0aGUgc3RhY2sgaW4gdGhlIHByb2Nl
c3MpCgkvLyBZb3Ugc2hvdWxkIHVzZSBwdXNoU3RhY2soKSBpbiBvcmRlciB0byBkbyB0aGlzLCBi
dXQgbWFpbnRhaW4gdGhlIHN0YWNrCglzZXRBcnJheTogZnVuY3Rpb24oIGVsZW1zICkgewoJCS8v
IFJlc2V0dGluZyB0aGUgbGVuZ3RoIHRvIDAsIHRoZW4gdXNpbmcgdGhlIG5hdGl2ZSBBcnJheSBw
dXNoCgkJLy8gaXMgYSBzdXBlci1mYXN0IHdheSB0byBwb3B1bGF0ZSBhbiBvYmplY3Qgd2l0aCBh
cnJheS1saWtlIHByb3BlcnRpZXMKCQl0aGlzLmxlbmd0aCA9IDA7CgkJQXJyYXkucHJvdG90eXBl
LnB1c2guYXBwbHkoIHRoaXMsIGVsZW1zICk7CgoJCXJldHVybiB0aGlzOwoJfSwKCgkvLyBFeGVj
dXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LgoJLy8g
KFlvdSBjYW4gc2VlZCB0aGUgYXJndW1lbnRzIHdpdGggYW4gYXJyYXkgb2YgYXJncywgYnV0IHRo
aXMgaXMKCS8vIG9ubHkgdXNlZCBpbnRlcm5hbGx5LikKCWVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFj
aywgYXJncyApIHsKCQlyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrLCBhcmdzICk7
Cgl9LAoKCS8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4KCS8v
IHRoZSBtYXRjaGVkIHNldCBvZiBlbGVtZW50cwoJaW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkgewoJ
CXZhciByZXQgPSAtMTsKCgkJLy8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBl
bGVtZW50CgkJcmV0dXJuIGpRdWVyeS5pbkFycmF5KAoJCQkvLyBJZiBpdCByZWNlaXZlcyBhIGpR
dWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWQKCQkJZWxlbSAmJiBlbGVtLmpx
dWVyeSA/IGVsZW1bMF0gOiBlbGVtCgkJLCB0aGlzICk7Cgl9LAoKCWF0dHI6IGZ1bmN0aW9uKCBu
YW1lLCB2YWx1ZSwgdHlwZSApIHsKCQl2YXIgb3B0aW9ucyA9IG5hbWU7CgoJCS8vIExvb2sgZm9y
IHRoZSBjYXNlIHdoZXJlIHdlJ3JlIGFjY2Vzc2luZyBhIHN0eWxlIHZhbHVlCgkJaWYgKCBuYW1l
LmNvbnN0cnVjdG9yID09IFN0cmluZyApCgkJCWlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApCgkJ
CQlyZXR1cm4gdGhpc1swXSAmJiBqUXVlcnlbIHR5cGUgfHwgImF0dHIiIF0oIHRoaXNbMF0sIG5h
bWUgKTsKCgkJCWVsc2UgewoJCQkJb3B0aW9ucyA9IHt9OwoJCQkJb3B0aW9uc1sgbmFtZSBdID0g
dmFsdWU7CgkJCX0KCgkJLy8gQ2hlY2sgdG8gc2VlIGlmIHdlJ3JlIHNldHRpbmcgc3R5bGUgdmFs
dWVzCgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKXsKCQkJLy8gU2V0IGFsbCB0aGUgc3R5
bGVzCgkJCWZvciAoIG5hbWUgaW4gb3B0aW9ucyApCgkJCQlqUXVlcnkuYXR0cigKCQkJCQl0eXBl
ID8KCQkJCQkJdGhpcy5zdHlsZSA6CgkJCQkJCXRoaXMsCgkJCQkJbmFtZSwgalF1ZXJ5LnByb3Ao
IHRoaXMsIG9wdGlvbnNbIG5hbWUgXSwgdHlwZSwgaSwgbmFtZSApCgkJCQkpOwoJCX0pOwoJfSwK
Cgljc3M6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCS8vIGlnbm9yZSBuZWdhdGl2ZSB3aWR0
aCBhbmQgaGVpZ2h0IHZhbHVlcwoJCWlmICggKGtleSA9PSAnd2lkdGgnIHx8IGtleSA9PSAnaGVp
Z2h0JykgJiYgcGFyc2VGbG9hdCh2YWx1ZSkgPCAwICkKCQkJdmFsdWUgPSB1bmRlZmluZWQ7CgkJ
cmV0dXJuIHRoaXMuYXR0cigga2V5LCB2YWx1ZSwgImN1ckNTUyIgKTsKCX0sCgoJdGV4dDogZnVu
Y3Rpb24oIHRleHQgKSB7CgkJaWYgKCB0eXBlb2YgdGV4dCAhPSAib2JqZWN0IiAmJiB0ZXh0ICE9
IG51bGwgKQoJCQlyZXR1cm4gdGhpcy5lbXB0eSgpLmFwcGVuZCggKHRoaXNbMF0gJiYgdGhpc1sw
XS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZSggdGV4dCApICk7CgoJ
CXZhciByZXQgPSAiIjsKCgkJalF1ZXJ5LmVhY2goIHRleHQgfHwgdGhpcywgZnVuY3Rpb24oKXsK
CQkJalF1ZXJ5LmVhY2goIHRoaXMuY2hpbGROb2RlcywgZnVuY3Rpb24oKXsKCQkJCWlmICggdGhp
cy5ub2RlVHlwZSAhPSA4ICkKCQkJCQlyZXQgKz0gdGhpcy5ub2RlVHlwZSAhPSAxID8KCQkJCQkJ
dGhpcy5ub2RlVmFsdWUgOgoJCQkJCQlqUXVlcnkuZm4udGV4dCggWyB0aGlzIF0gKTsKCQkJfSk7
CgkJfSk7CgoJCXJldHVybiByZXQ7Cgl9LAoKCXdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkgewoJ
CWlmICggdGhpc1swXSApCgkJCS8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJv
dW5kCgkJCWpRdWVyeSggaHRtbCwgdGhpc1swXS5vd25lckRvY3VtZW50ICkKCQkJCS5jbG9uZSgp
CgkJCQkuaW5zZXJ0QmVmb3JlKCB0aGlzWzBdICkKCQkJCS5tYXAoZnVuY3Rpb24oKXsKCQkJCQl2
YXIgZWxlbSA9IHRoaXM7CgoJCQkJCXdoaWxlICggZWxlbS5maXJzdENoaWxkICkKCQkJCQkJZWxl
bSA9IGVsZW0uZmlyc3RDaGlsZDsKCgkJCQkJcmV0dXJuIGVsZW07CgkJCQl9KQoJCQkJLmFwcGVu
ZCh0aGlzKTsKCgkJcmV0dXJuIHRoaXM7Cgl9LAoKCXdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwg
KSB7CgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpewoJCQlqUXVlcnkoIHRoaXMgKS5jb250
ZW50cygpLndyYXBBbGwoIGh0bWwgKTsKCQl9KTsKCX0sCgoJd3JhcDogZnVuY3Rpb24oIGh0bWwg
KSB7CgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpewoJCQlqUXVlcnkoIHRoaXMgKS53cmFw
QWxsKCBodG1sICk7CgkJfSk7Cgl9LAoKCWFwcGVuZDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRo
aXMuZG9tTWFuaXAoYXJndW1lbnRzLCB0cnVlLCBmYWxzZSwgZnVuY3Rpb24oZWxlbSl7CgkJCWlm
ICh0aGlzLm5vZGVUeXBlID09IDEpCgkJCQl0aGlzLmFwcGVuZENoaWxkKCBlbGVtICk7CgkJfSk7
Cgl9LAoKCXByZXBlbmQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3Vt
ZW50cywgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZWxlbSl7CgkJCWlmICh0aGlzLm5vZGVUeXBlID09
IDEpCgkJCQl0aGlzLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5maXJzdENoaWxkICk7CgkJfSk7
Cgl9LAoKCWJlZm9yZTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1l
bnRzLCBmYWxzZSwgZmFsc2UsIGZ1bmN0aW9uKGVsZW0pewoJCQl0aGlzLnBhcmVudE5vZGUuaW5z
ZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7CgkJfSk7Cgl9LAoKCWFmdGVyOiBmdW5jdGlvbigpIHsK
CQlyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsIGZhbHNlLCB0cnVlLCBmdW5jdGlvbihl
bGVtKXsKCQkJdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2li
bGluZyApOwoJCX0pOwoJfSwKCgllbmQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLnByZXZP
YmplY3QgfHwgalF1ZXJ5KCBbXSApOwoJfSwKCglmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7
CgkJdmFyIGVsZW1zID0galF1ZXJ5Lm1hcCh0aGlzLCBmdW5jdGlvbihlbGVtKXsKCQkJcmV0dXJu
IGpRdWVyeS5maW5kKCBzZWxlY3RvciwgZWxlbSApOwoJCX0pOwoKCQlyZXR1cm4gdGhpcy5wdXNo
U3RhY2soIC9bXis+XSBbXis+XS8udGVzdCggc2VsZWN0b3IgKSB8fCBzZWxlY3Rvci5pbmRleE9m
KCIuLiIpID4gLTEgPwoJCQlqUXVlcnkudW5pcXVlKCBlbGVtcyApIDoKCQkJZWxlbXMgKTsKCX0s
CgoJY2xvbmU6IGZ1bmN0aW9uKCBldmVudHMgKSB7CgkJLy8gRG8gdGhlIGNsb25lCgkJdmFyIHJl
dCA9IHRoaXMubWFwKGZ1bmN0aW9uKCl7CgkJCWlmICggalF1ZXJ5LmJyb3dzZXIubXNpZSAmJiAh
alF1ZXJ5LmlzWE1MRG9jKHRoaXMpICkgewoJCQkJLy8gSUUgY29waWVzIGV2ZW50cyBib3VuZCB2
aWEgYXR0YWNoRXZlbnQgd2hlbgoJCQkJLy8gdXNpbmcgY2xvbmVOb2RlLiBDYWxsaW5nIGRldGFj
aEV2ZW50IG9uIHRoZQoJCQkJLy8gY2xvbmUgd2lsbCBhbHNvIHJlbW92ZSB0aGUgZXZlbnRzIGZy
b20gdGhlIG9yaWduYWwKCQkJCS8vIEluIG9yZGVyIHRvIGdldCBhcm91bmQgdGhpcywgd2UgdXNl
IGlubmVySFRNTC4KCQkJCS8vIFVuZm9ydHVuYXRlbHksIHRoaXMgbWVhbnMgc29tZSBtb2RpZmlj
YXRpb25zIHRvCgkJCQkvLyBhdHRyaWJ1dGVzIGluIElFIHRoYXQgYXJlIGFjdHVhbGx5IG9ubHkg
c3RvcmVkCgkJCQkvLyBhcyBwcm9wZXJ0aWVzIHdpbGwgbm90IGJlIGNvcGllZCAoc3VjaCBhcyB0
aGUKCQkJCS8vIHRoZSBuYW1lIGF0dHJpYnV0ZSBvbiBhbiBpbnB1dCkuCgkJCQl2YXIgY2xvbmUg
PSB0aGlzLmNsb25lTm9kZSh0cnVlKSwKCQkJCQljb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVF
bGVtZW50KCJkaXYiKTsKCQkJCWNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9uZSk7CgkJCQlyZXR1
cm4galF1ZXJ5LmNsZWFuKFtjb250YWluZXIuaW5uZXJIVE1MXSlbMF07CgkJCX0gZWxzZQoJCQkJ
cmV0dXJuIHRoaXMuY2xvbmVOb2RlKHRydWUpOwoJCX0pOwoKCQkvLyBOZWVkIHRvIHNldCB0aGUg
ZXhwYW5kbyB0byBudWxsIG9uIHRoZSBjbG9uZWQgc2V0IGlmIGl0IGV4aXN0cwoJCS8vIHJlbW92
ZURhdGEgZG9lc24ndCB3b3JrIGhlcmUsIElFIHJlbW92ZXMgaXQgZnJvbSB0aGUgb3JpZ2luYWwg
YXMgd2VsbAoJCS8vIHRoaXMgaXMgcHJpbWFyaWx5IGZvciBJRSBidXQgdGhlIGRhdGEgZXhwYW5k
byBzaG91bGRuJ3QgYmUgY29waWVkIG92ZXIgaW4gYW55IGJyb3dzZXIKCQl2YXIgY2xvbmUgPSBy
ZXQuZmluZCgiKiIpLmFuZFNlbGYoKS5lYWNoKGZ1bmN0aW9uKCl7CgkJCWlmICggdGhpc1sgZXhw
YW5kbyBdICE9IHVuZGVmaW5lZCApCgkJCQl0aGlzWyBleHBhbmRvIF0gPSBudWxsOwoJCX0pOwoK
CQkvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lCgkJaWYg
KCBldmVudHMgPT09IHRydWUgKQoJCQl0aGlzLmZpbmQoIioiKS5hbmRTZWxmKCkuZWFjaChmdW5j
dGlvbihpKXsKCQkJCWlmICh0aGlzLm5vZGVUeXBlID09IDMpCgkJCQkJcmV0dXJuOwoJCQkJdmFy
IGV2ZW50cyA9IGpRdWVyeS5kYXRhKCB0aGlzLCAiZXZlbnRzIiApOwoKCQkJCWZvciAoIHZhciB0
eXBlIGluIGV2ZW50cyApCgkJCQkJZm9yICggdmFyIGhhbmRsZXIgaW4gZXZlbnRzWyB0eXBlIF0g
KQoJCQkJCQlqUXVlcnkuZXZlbnQuYWRkKCBjbG9uZVsgaSBdLCB0eXBlLCBldmVudHNbIHR5cGUg
XVsgaGFuZGxlciBdLCBldmVudHNbIHR5cGUgXVsgaGFuZGxlciBdLmRhdGEgKTsKCQkJfSk7CgoJ
CS8vIFJldHVybiB0aGUgY2xvbmVkIHNldAoJCXJldHVybiByZXQ7Cgl9LAoKCWZpbHRlcjogZnVu
Y3Rpb24oIHNlbGVjdG9yICkgewoJCXJldHVybiB0aGlzLnB1c2hTdGFjaygKCQkJalF1ZXJ5Lmlz
RnVuY3Rpb24oIHNlbGVjdG9yICkgJiYKCQkJalF1ZXJ5LmdyZXAodGhpcywgZnVuY3Rpb24oZWxl
bSwgaSl7CgkJCQlyZXR1cm4gc2VsZWN0b3IuY2FsbCggZWxlbSwgaSApOwoJCQl9KSB8fAoKCQkJ
alF1ZXJ5Lm11bHRpRmlsdGVyKCBzZWxlY3RvciwgdGhpcyApICk7Cgl9LAoKCW5vdDogZnVuY3Rp
b24oIHNlbGVjdG9yICkgewoJCWlmICggc2VsZWN0b3IuY29uc3RydWN0b3IgPT0gU3RyaW5nICkK
CQkJLy8gdGVzdCBzcGVjaWFsIGNhc2Ugd2hlcmUganVzdCBvbmUgc2VsZWN0b3IgaXMgcGFzc2Vk
IGluCgkJCWlmICggaXNTaW1wbGUudGVzdCggc2VsZWN0b3IgKSApCgkJCQlyZXR1cm4gdGhpcy5w
dXNoU3RhY2soIGpRdWVyeS5tdWx0aUZpbHRlciggc2VsZWN0b3IsIHRoaXMsIHRydWUgKSApOwoJ
CQllbHNlCgkJCQlzZWxlY3RvciA9IGpRdWVyeS5tdWx0aUZpbHRlciggc2VsZWN0b3IsIHRoaXMg
KTsKCgkJdmFyIGlzQXJyYXlMaWtlID0gc2VsZWN0b3IubGVuZ3RoICYmIHNlbGVjdG9yW3NlbGVj
dG9yLmxlbmd0aCAtIDFdICE9PSB1bmRlZmluZWQgJiYgIXNlbGVjdG9yLm5vZGVUeXBlOwoJCXJl
dHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpIHsKCQkJcmV0dXJuIGlzQXJyYXlMaWtlID8galF1
ZXJ5LmluQXJyYXkoIHRoaXMsIHNlbGVjdG9yICkgPCAwIDogdGhpcyAhPSBzZWxlY3RvcjsKCQl9
KTsKCX0sCgoJYWRkOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CgkJcmV0dXJuIHRoaXMucHVzaFN0
YWNrKCBqUXVlcnkudW5pcXVlKCBqUXVlcnkubWVyZ2UoCgkJCXRoaXMuZ2V0KCksCgkJCXR5cGVv
ZiBzZWxlY3RvciA9PSAnc3RyaW5nJyA/CgkJCQlqUXVlcnkoIHNlbGVjdG9yICkgOgoJCQkJalF1
ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IgKQoJCSkpKTsKCX0sCgoJaXM6IGZ1bmN0aW9uKCBzZWxl
Y3RvciApIHsKCQlyZXR1cm4gISFzZWxlY3RvciAmJiBqUXVlcnkubXVsdGlGaWx0ZXIoIHNlbGVj
dG9yLCB0aGlzICkubGVuZ3RoID4gMDsKCX0sCgoJaGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3Rv
ciApIHsKCQlyZXR1cm4gdGhpcy5pcyggIi4iICsgc2VsZWN0b3IgKTsKCX0sCgoJdmFsOiBmdW5j
dGlvbiggdmFsdWUgKSB7CgkJaWYgKCB2YWx1ZSA9PSB1bmRlZmluZWQgKSB7CgoJCQlpZiAoIHRo
aXMubGVuZ3RoICkgewoJCQkJdmFyIGVsZW0gPSB0aGlzWzBdOwoKCQkJCS8vIFdlIG5lZWQgdG8g
aGFuZGxlIHNlbGVjdCBib3hlcyBzcGVjaWFsCgkJCQlpZiAoIGpRdWVyeS5ub2RlTmFtZSggZWxl
bSwgInNlbGVjdCIgKSApIHsKCQkJCQl2YXIgaW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsCgkJ
CQkJCXZhbHVlcyA9IFtdLAoJCQkJCQlvcHRpb25zID0gZWxlbS5vcHRpb25zLAoJCQkJCQlvbmUg
PSBlbGVtLnR5cGUgPT0gInNlbGVjdC1vbmUiOwoKCQkJCQkvLyBOb3RoaW5nIHdhcyBzZWxlY3Rl
ZAoJCQkJCWlmICggaW5kZXggPCAwICkKCQkJCQkJcmV0dXJuIG51bGw7CgoJCQkJCS8vIExvb3Ag
dGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnMKCQkJCQlmb3IgKCB2YXIgaSA9IG9uZSA/
IGluZGV4IDogMCwgbWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7IGkgPCBt
YXg7IGkrKyApIHsKCQkJCQkJdmFyIG9wdGlvbiA9IG9wdGlvbnNbIGkgXTsKCgkJCQkJCWlmICgg
b3B0aW9uLnNlbGVjdGVkICkgewoJCQkJCQkJLy8gR2V0IHRoZSBzcGVjaWZjIHZhbHVlIGZvciB0
aGUgb3B0aW9uCgkJCQkJCQl2YWx1ZSA9IGpRdWVyeS5icm93c2VyLm1zaWUgJiYgIW9wdGlvbi5h
dHRyaWJ1dGVzLnZhbHVlLnNwZWNpZmllZCA/IG9wdGlvbi50ZXh0IDogb3B0aW9uLnZhbHVlOwoK
CQkJCQkJCS8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzCgkJCQkJCQlp
ZiAoIG9uZSApCgkJCQkJCQkJcmV0dXJuIHZhbHVlOwoKCQkJCQkJCS8vIE11bHRpLVNlbGVjdHMg
cmV0dXJuIGFuIGFycmF5CgkJCQkJCQl2YWx1ZXMucHVzaCggdmFsdWUgKTsKCQkJCQkJfQoJCQkJ
CX0KCgkJCQkJcmV0dXJuIHZhbHVlczsKCgkJCQkvLyBFdmVyeXRoaW5nIGVsc2UsIHdlIGp1c3Qg
Z3JhYiB0aGUgdmFsdWUKCQkJCX0gZWxzZQoJCQkJCXJldHVybiAodGhpc1swXS52YWx1ZSB8fCAi
IikucmVwbGFjZSgvXHIvZywgIiIpOwoKCQkJfQoKCQkJcmV0dXJuIHVuZGVmaW5lZDsKCQl9CgoJ
CWlmKCB2YWx1ZS5jb25zdHJ1Y3RvciA9PSBOdW1iZXIgKQoJCQl2YWx1ZSArPSAnJzsKCgkJcmV0
dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpewoJCQlpZiAoIHRoaXMubm9kZVR5cGUgIT0gMSApCgkJ
CQlyZXR1cm47CgoJCQlpZiAoIHZhbHVlLmNvbnN0cnVjdG9yID09IEFycmF5ICYmIC9yYWRpb3xj
aGVja2JveC8udGVzdCggdGhpcy50eXBlICkgKQoJCQkJdGhpcy5jaGVja2VkID0gKGpRdWVyeS5p
bkFycmF5KHRoaXMudmFsdWUsIHZhbHVlKSA+PSAwIHx8CgkJCQkJalF1ZXJ5LmluQXJyYXkodGhp
cy5uYW1lLCB2YWx1ZSkgPj0gMCk7CgoJCQllbHNlIGlmICggalF1ZXJ5Lm5vZGVOYW1lKCB0aGlz
LCAic2VsZWN0IiApICkgewoJCQkJdmFyIHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkodmFsdWUp
OwoKCQkJCWpRdWVyeSggIm9wdGlvbiIsIHRoaXMgKS5lYWNoKGZ1bmN0aW9uKCl7CgkJCQkJdGhp
cy5zZWxlY3RlZCA9IChqUXVlcnkuaW5BcnJheSggdGhpcy52YWx1ZSwgdmFsdWVzICkgPj0gMCB8
fAoJCQkJCQlqUXVlcnkuaW5BcnJheSggdGhpcy50ZXh0LCB2YWx1ZXMgKSA+PSAwKTsKCQkJCX0p
OwoKCQkJCWlmICggIXZhbHVlcy5sZW5ndGggKQoJCQkJCXRoaXMuc2VsZWN0ZWRJbmRleCA9IC0x
OwoKCQkJfSBlbHNlCgkJCQl0aGlzLnZhbHVlID0gdmFsdWU7CgkJfSk7Cgl9LAoKCWh0bWw6IGZ1
bmN0aW9uKCB2YWx1ZSApIHsKCQlyZXR1cm4gdmFsdWUgPT0gdW5kZWZpbmVkID8KCQkJKHRoaXNb
MF0gPwoJCQkJdGhpc1swXS5pbm5lckhUTUwgOgoJCQkJbnVsbCkgOgoJCQl0aGlzLmVtcHR5KCku
YXBwZW5kKCB2YWx1ZSApOwoJfSwKCglyZXBsYWNlV2l0aDogZnVuY3Rpb24oIHZhbHVlICkgewoJ
CXJldHVybiB0aGlzLmFmdGVyKCB2YWx1ZSApLnJlbW92ZSgpOwoJfSwKCgllcTogZnVuY3Rpb24o
IGkgKSB7CgkJcmV0dXJuIHRoaXMuc2xpY2UoIGksIGkgKyAxICk7Cgl9LAoKCXNsaWNlOiBmdW5j
dGlvbigpIHsKCQlyZXR1cm4gdGhpcy5wdXNoU3RhY2soIEFycmF5LnByb3RvdHlwZS5zbGljZS5h
cHBseSggdGhpcywgYXJndW1lbnRzICkgKTsKCX0sCgoJbWFwOiBmdW5jdGlvbiggY2FsbGJhY2sg
KSB7CgkJcmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKHRoaXMsIGZ1bmN0aW9uKGVs
ZW0sIGkpewoJCQlyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApOwoJCX0pKTsK
CX0sCgoJYW5kU2VsZjogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuYWRkKCB0aGlzLnByZXZP
YmplY3QgKTsKCX0sCgoJZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKXsKCQl2YXIgcGFydHMg
PSBrZXkuc3BsaXQoIi4iKTsKCQlwYXJ0c1sxXSA9IHBhcnRzWzFdID8gIi4iICsgcGFydHNbMV0g
OiAiIjsKCgkJaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewoJCQl2YXIgZGF0YSA9IHRoaXMu
dHJpZ2dlckhhbmRsZXIoImdldERhdGEiICsgcGFydHNbMV0gKyAiISIsIFtwYXJ0c1swXV0pOwoK
CQkJaWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgdGhpcy5sZW5ndGggKQoJCQkJZGF0YSA9IGpR
dWVyeS5kYXRhKCB0aGlzWzBdLCBrZXkgKTsKCgkJCXJldHVybiBkYXRhID09PSB1bmRlZmluZWQg
JiYgcGFydHNbMV0gPwoJCQkJdGhpcy5kYXRhKCBwYXJ0c1swXSApIDoKCQkJCWRhdGE7CgkJfSBl
bHNlCgkJCXJldHVybiB0aGlzLnRyaWdnZXIoInNldERhdGEiICsgcGFydHNbMV0gKyAiISIsIFtw
YXJ0c1swXSwgdmFsdWVdKS5lYWNoKGZ1bmN0aW9uKCl7CgkJCQlqUXVlcnkuZGF0YSggdGhpcywg
a2V5LCB2YWx1ZSApOwoJCQl9KTsKCX0sCgoJcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApewoJ
CXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsKCQkJalF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMs
IGtleSApOwoJCX0pOwoJfSwKCglkb21NYW5pcDogZnVuY3Rpb24oIGFyZ3MsIHRhYmxlLCByZXZl
cnNlLCBjYWxsYmFjayApIHsKCQl2YXIgY2xvbmUgPSB0aGlzLmxlbmd0aCA+IDEsIGVsZW1zOwoK
CQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7CgkJCWlmICggIWVsZW1zICkgewoJCQkJZWxl
bXMgPSBqUXVlcnkuY2xlYW4oIGFyZ3MsIHRoaXMub3duZXJEb2N1bWVudCApOwoKCQkJCWlmICgg
cmV2ZXJzZSApCgkJCQkJZWxlbXMucmV2ZXJzZSgpOwoJCQl9CgoJCQl2YXIgb2JqID0gdGhpczsK
CgkJCWlmICggdGFibGUgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCAidGFibGUiICkgJiYgalF1
ZXJ5Lm5vZGVOYW1lKCBlbGVtc1swXSwgInRyIiApICkKCQkJCW9iaiA9IHRoaXMuZ2V0RWxlbWVu
dHNCeVRhZ05hbWUoInRib2R5IilbMF0gfHwgdGhpcy5hcHBlbmRDaGlsZCggdGhpcy5vd25lckRv
Y3VtZW50LmNyZWF0ZUVsZW1lbnQoInRib2R5IikgKTsKCgkJCXZhciBzY3JpcHRzID0galF1ZXJ5
KCBbXSApOwoKCQkJalF1ZXJ5LmVhY2goZWxlbXMsIGZ1bmN0aW9uKCl7CgkJCQl2YXIgZWxlbSA9
IGNsb25lID8KCQkJCQlqUXVlcnkoIHRoaXMgKS5jbG9uZSggdHJ1ZSApWzBdIDoKCQkJCQl0aGlz
OwoKCQkJCS8vIGV4ZWN1dGUgYWxsIHNjcmlwdHMgYWZ0ZXIgdGhlIGVsZW1lbnRzIGhhdmUgYmVl
biBpbmplY3RlZAoJCQkJaWYgKCBqUXVlcnkubm9kZU5hbWUoIGVsZW0sICJzY3JpcHQiICkgKQoJ
CQkJCXNjcmlwdHMgPSBzY3JpcHRzLmFkZCggZWxlbSApOwoJCQkJZWxzZSB7CgkJCQkJLy8gUmVt
b3ZlIGFueSBpbm5lciBzY3JpcHRzIGZvciBsYXRlciBldmFsdWF0aW9uCgkJCQkJaWYgKCBlbGVt
Lm5vZGVUeXBlID09IDEgKQoJCQkJCQlzY3JpcHRzID0gc2NyaXB0cy5hZGQoIGpRdWVyeSggInNj
cmlwdCIsIGVsZW0gKS5yZW1vdmUoKSApOwoKCQkJCQkvLyBJbmplY3QgdGhlIGVsZW1lbnRzIGlu
dG8gdGhlIGRvY3VtZW50CgkJCQkJY2FsbGJhY2suY2FsbCggb2JqLCBlbGVtICk7CgkJCQl9CgkJ
CX0pOwoKCQkJc2NyaXB0cy5lYWNoKCBldmFsU2NyaXB0ICk7CgkJfSk7Cgl9Cn07CgovLyBHaXZl
IHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50
aWF0aW9uCmpRdWVyeS5mbi5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjsKCmZ1bmN0aW9uIGV2
YWxTY3JpcHQoIGksIGVsZW0gKSB7CglpZiAoIGVsZW0uc3JjICkKCQlqUXVlcnkuYWpheCh7CgkJ
CXVybDogZWxlbS5zcmMsCgkJCWFzeW5jOiBmYWxzZSwKCQkJZGF0YVR5cGU6ICJzY3JpcHQiCgkJ
fSk7CgoJZWxzZQoJCWpRdWVyeS5nbG9iYWxFdmFsKCBlbGVtLnRleHQgfHwgZWxlbS50ZXh0Q29u
dGVudCB8fCBlbGVtLmlubmVySFRNTCB8fCAiIiApOwoKCWlmICggZWxlbS5wYXJlbnROb2RlICkK
CQllbGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsZW0gKTsKfQoKZnVuY3Rpb24gbm93KCl7
CglyZXR1cm4gK25ldyBEYXRlOwp9CgpqUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9
IGZ1bmN0aW9uKCkgewoJLy8gY29weSByZWZlcmVuY2UgdG8gdGFyZ2V0IG9iamVjdAoJdmFyIHRh
cmdldCA9IGFyZ3VtZW50c1swXSB8fCB7fSwgaSA9IDEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5n
dGgsIGRlZXAgPSBmYWxzZSwgb3B0aW9uczsKCgkvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0
aW9uCglpZiAoIHRhcmdldC5jb25zdHJ1Y3RvciA9PSBCb29sZWFuICkgewoJCWRlZXAgPSB0YXJn
ZXQ7CgkJdGFyZ2V0ID0gYXJndW1lbnRzWzFdIHx8IHt9OwoJCS8vIHNraXAgdGhlIGJvb2xlYW4g
YW5kIHRoZSB0YXJnZXQKCQlpID0gMjsKCX0KCgkvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBp
cyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSkKCWlmICggdHlw
ZW9mIHRhcmdldCAhPSAib2JqZWN0IiAmJiB0eXBlb2YgdGFyZ2V0ICE9ICJmdW5jdGlvbiIgKQoJ
CXRhcmdldCA9IHt9OwoKCS8vIGV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3Vt
ZW50IGlzIHBhc3NlZAoJaWYgKCBsZW5ndGggPT0gaSApIHsKCQl0YXJnZXQgPSB0aGlzOwoJCS0t
aTsKCX0KCglmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApCgkJLy8gT25seSBkZWFsIHdpdGggbm9u
LW51bGwvdW5kZWZpbmVkIHZhbHVlcwoJCWlmICggKG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSkg
IT0gbnVsbCApCgkJCS8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3QKCQkJZm9yICggdmFyIG5hbWUg
aW4gb3B0aW9ucyApIHsKCQkJCXZhciBzcmMgPSB0YXJnZXRbIG5hbWUgXSwgY29weSA9IG9wdGlv
bnNbIG5hbWUgXTsKCgkJCQkvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wCgkJCQlpZiAoIHRh
cmdldCA9PT0gY29weSApCgkJCQkJY29udGludWU7CgoJCQkJLy8gUmVjdXJzZSBpZiB3ZSdyZSBt
ZXJnaW5nIG9iamVjdCB2YWx1ZXMKCQkJCWlmICggZGVlcCAmJiBjb3B5ICYmIHR5cGVvZiBjb3B5
ID09ICJvYmplY3QiICYmICFjb3B5Lm5vZGVUeXBlICkKCQkJCQl0YXJnZXRbIG5hbWUgXSA9IGpR
dWVyeS5leHRlbmQoIGRlZXAsIAoJCQkJCQkvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMs
IGNsb25lIHRoZW0KCQkJCQkJc3JjIHx8ICggY29weS5sZW5ndGggIT0gbnVsbCA/IFsgXSA6IHsg
fSApCgkJCQkJLCBjb3B5ICk7CgoJCQkJLy8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVl
cwoJCQkJZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApCgkJCQkJdGFyZ2V0WyBuYW1lIF0g
PSBjb3B5OwoKCQkJfQoKCS8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0CglyZXR1cm4gdGFy
Z2V0Owp9OwoKdmFyIGV4cGFuZG8gPSAialF1ZXJ5IiArIG5vdygpLCB1dWlkID0gMCwgd2luZG93
RGF0YSA9IHt9LAoJLy8gZXhjbHVkZSB0aGUgZm9sbG93aW5nIGNzcyBwcm9wZXJ0aWVzIHRvIGFk
ZCBweAoJZXhjbHVkZSA9IC96LT9pbmRleHxmb250LT93ZWlnaHR8b3BhY2l0eXx6b29tfGxpbmUt
P2hlaWdodC9pLAoJLy8gY2FjaGUgZGVmYXVsdFZpZXcKCWRlZmF1bHRWaWV3ID0gZG9jdW1lbnQu
ZGVmYXVsdFZpZXcgfHwge307CgpqUXVlcnkuZXh0ZW5kKHsKCW5vQ29uZmxpY3Q6IGZ1bmN0aW9u
KCBkZWVwICkgewoJCXdpbmRvdy4kID0gXyQ7CgoJCWlmICggZGVlcCApCgkJCXdpbmRvdy5qUXVl
cnkgPSBfalF1ZXJ5OwoKCQlyZXR1cm4galF1ZXJ5OwoJfSwKCgkvLyBTZWUgdGVzdC91bml0L2Nv
cmUuanMgZm9yIGRldGFpbHMgY29uY2VybmluZyB0aGlzIGZ1bmN0aW9uLgoJaXNGdW5jdGlvbjog
ZnVuY3Rpb24oIGZuICkgewoJCXJldHVybiAhIWZuICYmIHR5cGVvZiBmbiAhPSAic3RyaW5nIiAm
JiAhZm4ubm9kZU5hbWUgJiYKCQkJZm4uY29uc3RydWN0b3IgIT0gQXJyYXkgJiYgL15bXHNbXT9m
dW5jdGlvbi8udGVzdCggZm4gKyAiIiApOwoJfSwKCgkvLyBjaGVjayBpZiBhbiBlbGVtZW50IGlz
IGluIGEgKG9yIGlzIGFuKSBYTUwgZG9jdW1lbnQKCWlzWE1MRG9jOiBmdW5jdGlvbiggZWxlbSAp
IHsKCQlyZXR1cm4gZWxlbS5kb2N1bWVudEVsZW1lbnQgJiYgIWVsZW0uYm9keSB8fAoJCQllbGVt
LnRhZ05hbWUgJiYgZWxlbS5vd25lckRvY3VtZW50ICYmICFlbGVtLm93bmVyRG9jdW1lbnQuYm9k
eTsKCX0sCgoJLy8gRXZhbHVsYXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0CglnbG9i
YWxFdmFsOiBmdW5jdGlvbiggZGF0YSApIHsKCQlkYXRhID0galF1ZXJ5LnRyaW0oIGRhdGEgKTsK
CgkJaWYgKCBkYXRhICkgewoJCQkvLyBJbnNwaXJlZCBieSBjb2RlIGJ5IEFuZHJlYSBHaWFtbWFy
Y2hpCgkJCS8vIGh0dHA6Ly93ZWJyZWZsZWN0aW9uLmJsb2dzcG90LmNvbS8yMDA3LzA4L2dsb2Jh
bC1zY29wZS1ldmFsdWF0aW9uLWFuZC1kb20uaHRtbAoJCQl2YXIgaGVhZCA9IGRvY3VtZW50Lmdl
dEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50
LAoJCQkJc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CgoJCQlzY3Jp
cHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwoJCQlpZiAoIGpRdWVyeS5icm93c2VyLm1zaWUg
KQoJCQkJc2NyaXB0LnRleHQgPSBkYXRhOwoJCQllbHNlCgkJCQlzY3JpcHQuYXBwZW5kQ2hpbGQo
IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCBkYXRhICkgKTsKCgkJCS8vIFVzZSBpbnNlcnRCZWZv
cmUgaW5zdGVhZCBvZiBhcHBlbmRDaGlsZCAgdG8gY2lyY3VtdmVudCBhbiBJRTYgYnVnLgoJCQkv
LyBUaGlzIGFyaXNlcyB3aGVuIGEgYmFzZSBub2RlIGlzIHVzZWQgKCMyNzA5KS4KCQkJaGVhZC5p
bnNlcnRCZWZvcmUoIHNjcmlwdCwgaGVhZC5maXJzdENoaWxkICk7CgkJCWhlYWQucmVtb3ZlQ2hp
bGQoIHNjcmlwdCApOwoJCX0KCX0sCgoJbm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkg
ewoJCXJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9
PSBuYW1lLnRvVXBwZXJDYXNlKCk7Cgl9LAoKCWNhY2hlOiB7fSwKCglkYXRhOiBmdW5jdGlvbigg
ZWxlbSwgbmFtZSwgZGF0YSApIHsKCQllbGVtID0gZWxlbSA9PSB3aW5kb3cgPwoJCQl3aW5kb3dE
YXRhIDoKCQkJZWxlbTsKCgkJdmFyIGlkID0gZWxlbVsgZXhwYW5kbyBdOwoKCQkvLyBDb21wdXRl
IGEgdW5pcXVlIElEIGZvciB0aGUgZWxlbWVudAoJCWlmICggIWlkICkKCQkJaWQgPSBlbGVtWyBl
eHBhbmRvIF0gPSArK3V1aWQ7CgoJCS8vIE9ubHkgZ2VuZXJhdGUgdGhlIGRhdGEgY2FjaGUgaWYg
d2UncmUKCQkvLyB0cnlpbmcgdG8gYWNjZXNzIG9yIG1hbmlwdWxhdGUgaXQKCQlpZiAoIG5hbWUg
JiYgIWpRdWVyeS5jYWNoZVsgaWQgXSApCgkJCWpRdWVyeS5jYWNoZVsgaWQgXSA9IHt9OwoKCQkv
LyBQcmV2ZW50IG92ZXJyaWRpbmcgdGhlIG5hbWVkIGNhY2hlIHdpdGggdW5kZWZpbmVkIHZhbHVl
cwoJCWlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkKCQkJalF1ZXJ5LmNhY2hlWyBpZCBdWyBuYW1l
IF0gPSBkYXRhOwoKCQkvLyBSZXR1cm4gdGhlIG5hbWVkIGNhY2hlIGRhdGEsIG9yIHRoZSBJRCBm
b3IgdGhlIGVsZW1lbnQKCQlyZXR1cm4gbmFtZSA/CgkJCWpRdWVyeS5jYWNoZVsgaWQgXVsgbmFt
ZSBdIDoKCQkJaWQ7Cgl9LAoKCXJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkgewoJ
CWVsZW0gPSBlbGVtID09IHdpbmRvdyA/CgkJCXdpbmRvd0RhdGEgOgoJCQllbGVtOwoKCQl2YXIg
aWQgPSBlbGVtWyBleHBhbmRvIF07CgoJCS8vIElmIHdlIHdhbnQgdG8gcmVtb3ZlIGEgc3BlY2lm
aWMgc2VjdGlvbiBvZiB0aGUgZWxlbWVudCdzIGRhdGEKCQlpZiAoIG5hbWUgKSB7CgkJCWlmICgg
alF1ZXJ5LmNhY2hlWyBpZCBdICkgewoJCQkJLy8gUmVtb3ZlIHRoZSBzZWN0aW9uIG9mIGNhY2hl
IGRhdGEKCQkJCWRlbGV0ZSBqUXVlcnkuY2FjaGVbIGlkIF1bIG5hbWUgXTsKCgkJCQkvLyBJZiB3
ZSd2ZSByZW1vdmVkIGFsbCB0aGUgZGF0YSwgcmVtb3ZlIHRoZSBlbGVtZW50J3MgY2FjaGUKCQkJ
CW5hbWUgPSAiIjsKCgkJCQlmb3IgKCBuYW1lIGluIGpRdWVyeS5jYWNoZVsgaWQgXSApCgkJCQkJ
YnJlYWs7CgoJCQkJaWYgKCAhbmFtZSApCgkJCQkJalF1ZXJ5LnJlbW92ZURhdGEoIGVsZW0gKTsK
CQkJfQoKCQkvLyBPdGhlcndpc2UsIHdlIHdhbnQgdG8gcmVtb3ZlIGFsbCBvZiB0aGUgZWxlbWVu
dCdzIGRhdGEKCQl9IGVsc2UgewoJCQkvLyBDbGVhbiB1cCB0aGUgZWxlbWVudCBleHBhbmRvCgkJ
CXRyeSB7CgkJCQlkZWxldGUgZWxlbVsgZXhwYW5kbyBdOwoJCQl9IGNhdGNoKGUpewoJCQkJLy8g
SUUgaGFzIHRyb3VibGUgZGlyZWN0bHkgcmVtb3ZpbmcgdGhlIGV4cGFuZG8KCQkJCS8vIGJ1dCBp
dCdzIG9rIHdpdGggdXNpbmcgcmVtb3ZlQXR0cmlidXRlCgkJCQlpZiAoIGVsZW0ucmVtb3ZlQXR0
cmlidXRlICkKCQkJCQllbGVtLnJlbW92ZUF0dHJpYnV0ZSggZXhwYW5kbyApOwoJCQl9CgoJCQkv
LyBDb21wbGV0ZWx5IHJlbW92ZSB0aGUgZGF0YSBjYWNoZQoJCQlkZWxldGUgalF1ZXJ5LmNhY2hl
WyBpZCBdOwoJCX0KCX0sCgoJLy8gYXJncyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seQoJZWFj
aDogZnVuY3Rpb24oIG9iamVjdCwgY2FsbGJhY2ssIGFyZ3MgKSB7CgkJdmFyIG5hbWUsIGkgPSAw
LCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOwoKCQlpZiAoIGFyZ3MgKSB7CgkJCWlmICggbGVuZ3Ro
ID09IHVuZGVmaW5lZCApIHsKCQkJCWZvciAoIG5hbWUgaW4gb2JqZWN0ICkKCQkJCQlpZiAoIGNh
bGxiYWNrLmFwcGx5KCBvYmplY3RbIG5hbWUgXSwgYXJncyApID09PSBmYWxzZSApCgkJCQkJCWJy
ZWFrOwoJCQl9IGVsc2UKCQkJCWZvciAoIDsgaSA8IGxlbmd0aDsgKQoJCQkJCWlmICggY2FsbGJh
Y2suYXBwbHkoIG9iamVjdFsgaSsrIF0sIGFyZ3MgKSA9PT0gZmFsc2UgKQoJCQkJCQlicmVhazsK
CgkJLy8gQSBzcGVjaWFsLCBmYXN0LCBjYXNlIGZvciB0aGUgbW9zdCBjb21tb24gdXNlIG9mIGVh
Y2gKCQl9IGVsc2UgewoJCQlpZiAoIGxlbmd0aCA9PSB1bmRlZmluZWQgKSB7CgkJCQlmb3IgKCBu
YW1lIGluIG9iamVjdCApCgkJCQkJaWYgKCBjYWxsYmFjay5jYWxsKCBvYmplY3RbIG5hbWUgXSwg
bmFtZSwgb2JqZWN0WyBuYW1lIF0gKSA9PT0gZmFsc2UgKQoJCQkJCQlicmVhazsKCQkJfSBlbHNl
CgkJCQlmb3IgKCB2YXIgdmFsdWUgPSBvYmplY3RbMF07CgkJCQkJaSA8IGxlbmd0aCAmJiBjYWxs
YmFjay5jYWxsKCB2YWx1ZSwgaSwgdmFsdWUgKSAhPT0gZmFsc2U7IHZhbHVlID0gb2JqZWN0Wysr
aV0gKXt9CgkJfQoKCQlyZXR1cm4gb2JqZWN0OwoJfSwKCglwcm9wOiBmdW5jdGlvbiggZWxlbSwg
dmFsdWUsIHR5cGUsIGksIG5hbWUgKSB7CgkJLy8gSGFuZGxlIGV4ZWN1dGFibGUgZnVuY3Rpb25z
CgkJaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApCgkJCXZhbHVlID0gdmFsdWUuY2Fs
bCggZWxlbSwgaSApOwoKCQkvLyBIYW5kbGUgcGFzc2luZyBpbiBhIG51bWJlciB0byBhIENTUyBw
cm9wZXJ0eQoJCXJldHVybiB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PSBOdW1iZXIgJiYg
dHlwZSA9PSAiY3VyQ1NTIiAmJiAhZXhjbHVkZS50ZXN0KCBuYW1lICkgPwoJCQl2YWx1ZSArICJw
eCIgOgoJCQl2YWx1ZTsKCX0sCgoJY2xhc3NOYW1lOiB7CgkJLy8gaW50ZXJuYWwgb25seSwgdXNl
IGFkZENsYXNzKCJjbGFzcyIpCgkJYWRkOiBmdW5jdGlvbiggZWxlbSwgY2xhc3NOYW1lcyApIHsK
CQkJalF1ZXJ5LmVhY2goKGNsYXNzTmFtZXMgfHwgIiIpLnNwbGl0KC9ccysvKSwgZnVuY3Rpb24o
aSwgY2xhc3NOYW1lKXsKCQkJCWlmICggZWxlbS5ub2RlVHlwZSA9PSAxICYmICFqUXVlcnkuY2xh
c3NOYW1lLmhhcyggZWxlbS5jbGFzc05hbWUsIGNsYXNzTmFtZSApICkKCQkJCQllbGVtLmNsYXNz
TmFtZSArPSAoZWxlbS5jbGFzc05hbWUgPyAiICIgOiAiIikgKyBjbGFzc05hbWU7CgkJCX0pOwoJ
CX0sCgoJCS8vIGludGVybmFsIG9ubHksIHVzZSByZW1vdmVDbGFzcygiY2xhc3MiKQoJCXJlbW92
ZTogZnVuY3Rpb24oIGVsZW0sIGNsYXNzTmFtZXMgKSB7CgkJCWlmIChlbGVtLm5vZGVUeXBlID09
IDEpCgkJCQllbGVtLmNsYXNzTmFtZSA9IGNsYXNzTmFtZXMgIT0gdW5kZWZpbmVkID8KCQkJCQlq
UXVlcnkuZ3JlcChlbGVtLmNsYXNzTmFtZS5zcGxpdCgvXHMrLyksIGZ1bmN0aW9uKGNsYXNzTmFt
ZSl7CgkJCQkJCXJldHVybiAhalF1ZXJ5LmNsYXNzTmFtZS5oYXMoIGNsYXNzTmFtZXMsIGNsYXNz
TmFtZSApOwoJCQkJCX0pLmpvaW4oIiAiKSA6CgkJCQkJIiI7CgkJfSwKCgkJLy8gaW50ZXJuYWwg
b25seSwgdXNlIGhhc0NsYXNzKCJjbGFzcyIpCgkJaGFzOiBmdW5jdGlvbiggZWxlbSwgY2xhc3NO
YW1lICkgewoJCQlyZXR1cm4galF1ZXJ5LmluQXJyYXkoIGNsYXNzTmFtZSwgKGVsZW0uY2xhc3NO
YW1lIHx8IGVsZW0pLnRvU3RyaW5nKCkuc3BsaXQoL1xzKy8pICkgPiAtMTsKCQl9Cgl9LAoKCS8v
IEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBn
ZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMKCXN3YXA6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBj
YWxsYmFjayApIHsKCQl2YXIgb2xkID0ge307CgkJLy8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMs
IGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzCgkJZm9yICggdmFyIG5hbWUgaW4gb3B0aW9ucyApIHsK
CQkJb2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07CgkJCWVsZW0uc3R5bGVbIG5hbWUg
XSA9IG9wdGlvbnNbIG5hbWUgXTsKCQl9CgoJCWNhbGxiYWNrLmNhbGwoIGVsZW0gKTsKCgkJLy8g
UmV2ZXJ0IHRoZSBvbGQgdmFsdWVzCgkJZm9yICggdmFyIG5hbWUgaW4gb3B0aW9ucyApCgkJCWVs
ZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdOwoJfSwKCgljc3M6IGZ1bmN0aW9uKCBlbGVt
LCBuYW1lLCBmb3JjZSApIHsKCQlpZiAoIG5hbWUgPT0gIndpZHRoIiB8fCBuYW1lID09ICJoZWln
aHQiICkgewoJCQl2YXIgdmFsLCBwcm9wcyA9IHsgcG9zaXRpb246ICJhYnNvbHV0ZSIsIHZpc2li
aWxpdHk6ICJoaWRkZW4iLCBkaXNwbGF5OiJibG9jayIgfSwgd2hpY2ggPSBuYW1lID09ICJ3aWR0
aCIgPyBbICJMZWZ0IiwgIlJpZ2h0IiBdIDogWyAiVG9wIiwgIkJvdHRvbSIgXTsKCgkJCWZ1bmN0
aW9uIGdldFdIKCkgewoJCQkJdmFsID0gbmFtZSA9PSAid2lkdGgiID8gZWxlbS5vZmZzZXRXaWR0
aCA6IGVsZW0ub2Zmc2V0SGVpZ2h0OwoJCQkJdmFyIHBhZGRpbmcgPSAwLCBib3JkZXIgPSAwOwoJ
CQkJalF1ZXJ5LmVhY2goIHdoaWNoLCBmdW5jdGlvbigpIHsKCQkJCQlwYWRkaW5nICs9IHBhcnNl
RmxvYXQoalF1ZXJ5LmN1ckNTUyggZWxlbSwgInBhZGRpbmciICsgdGhpcywgdHJ1ZSkpIHx8IDA7
CgkJCQkJYm9yZGVyICs9IHBhcnNlRmxvYXQoalF1ZXJ5LmN1ckNTUyggZWxlbSwgImJvcmRlciIg
KyB0aGlzICsgIldpZHRoIiwgdHJ1ZSkpIHx8IDA7CgkJCQl9KTsKCQkJCXZhbCAtPSBNYXRoLnJv
dW5kKHBhZGRpbmcgKyBib3JkZXIpOwoJCQl9CgoJCQlpZiAoIGpRdWVyeShlbGVtKS5pcygiOnZp
c2libGUiKSApCgkJCQlnZXRXSCgpOwoJCQllbHNlCgkJCQlqUXVlcnkuc3dhcCggZWxlbSwgcHJv
cHMsIGdldFdIICk7CgoJCQlyZXR1cm4gTWF0aC5tYXgoMCwgdmFsKTsKCQl9CgoJCXJldHVybiBq
UXVlcnkuY3VyQ1NTKCBlbGVtLCBuYW1lLCBmb3JjZSApOwoJfSwKCgljdXJDU1M6IGZ1bmN0aW9u
KCBlbGVtLCBuYW1lLCBmb3JjZSApIHsKCQl2YXIgcmV0LCBzdHlsZSA9IGVsZW0uc3R5bGU7CgoJ
CS8vIEEgaGVscGVyIG1ldGhvZCBmb3IgZGV0ZXJtaW5pbmcgaWYgYW4gZWxlbWVudCdzIHZhbHVl
cyBhcmUgYnJva2VuCgkJZnVuY3Rpb24gY29sb3IoIGVsZW0gKSB7CgkJCWlmICggIWpRdWVyeS5i
cm93c2VyLnNhZmFyaSApCgkJCQlyZXR1cm4gZmFsc2U7CgoJCQkvLyBkZWZhdWx0VmlldyBpcyBj
YWNoZWQKCQkJdmFyIHJldCA9IGRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51
bGwgKTsKCQkJcmV0dXJuICFyZXQgfHwgcmV0LmdldFByb3BlcnR5VmFsdWUoImNvbG9yIikgPT0g
IiI7CgkJfQoKCQkvLyBXZSBuZWVkIHRvIGhhbmRsZSBvcGFjaXR5IHNwZWNpYWwgaW4gSUUKCQlp
ZiAoIG5hbWUgPT0gIm9wYWNpdHkiICYmIGpRdWVyeS5icm93c2VyLm1zaWUgKSB7CgkJCXJldCA9
IGpRdWVyeS5hdHRyKCBzdHlsZSwgIm9wYWNpdHkiICk7CgoJCQlyZXR1cm4gcmV0ID09ICIiID8K
CQkJCSIxIiA6CgkJCQlyZXQ7CgkJfQoJCS8vIE9wZXJhIHNvbWV0aW1lcyB3aWxsIGdpdmUgdGhl
IHdyb25nIGRpc3BsYXkgYW5zd2VyLCB0aGlzIGZpeGVzIGl0LCBzZWUgIzIwMzcKCQlpZiAoIGpR
dWVyeS5icm93c2VyLm9wZXJhICYmIG5hbWUgPT0gImRpc3BsYXkiICkgewoJCQl2YXIgc2F2ZSA9
IHN0eWxlLm91dGxpbmU7CgkJCXN0eWxlLm91dGxpbmUgPSAiMCBzb2xpZCBibGFjayI7CgkJCXN0
eWxlLm91dGxpbmUgPSBzYXZlOwoJCX0KCgkJLy8gTWFrZSBzdXJlIHdlJ3JlIHVzaW5nIHRoZSBy
aWdodCBuYW1lIGZvciBnZXR0aW5nIHRoZSBmbG9hdCB2YWx1ZQoJCWlmICggbmFtZS5tYXRjaCgg
L2Zsb2F0L2kgKSApCgkJCW5hbWUgPSBzdHlsZUZsb2F0OwoKCQlpZiAoICFmb3JjZSAmJiBzdHls
ZSAmJiBzdHlsZVsgbmFtZSBdICkKCQkJcmV0ID0gc3R5bGVbIG5hbWUgXTsKCgkJZWxzZSBpZiAo
IGRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUgKSB7CgoJCQkvLyBPbmx5ICJmbG9hdCIgaXMg
bmVlZGVkIGhlcmUKCQkJaWYgKCBuYW1lLm1hdGNoKCAvZmxvYXQvaSApICkKCQkJCW5hbWUgPSAi
ZmxvYXQiOwoKCQkJbmFtZSA9IG5hbWUucmVwbGFjZSggLyhbQS1aXSkvZywgIi0kMSIgKS50b0xv
d2VyQ2FzZSgpOwoKCQkJdmFyIGNvbXB1dGVkU3R5bGUgPSBkZWZhdWx0Vmlldy5nZXRDb21wdXRl
ZFN0eWxlKCBlbGVtLCBudWxsICk7CgoJCQlpZiAoIGNvbXB1dGVkU3R5bGUgJiYgIWNvbG9yKCBl
bGVtICkgKQoJCQkJcmV0ID0gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICk7
CgoJCQkvLyBJZiB0aGUgZWxlbWVudCBpc24ndCByZXBvcnRpbmcgaXRzIHZhbHVlcyBwcm9wZXJs
eSBpbiBTYWZhcmkKCQkJLy8gdGhlbiBzb21lIGRpc3BsYXk6IG5vbmUgZWxlbWVudHMgYXJlIGlu
dm9sdmVkCgkJCWVsc2UgewoJCQkJdmFyIHN3YXAgPSBbXSwgc3RhY2sgPSBbXSwgYSA9IGVsZW0s
IGkgPSAwOwoKCQkJCS8vIExvY2F0ZSBhbGwgb2YgdGhlIHBhcmVudCBkaXNwbGF5OiBub25lIGVs
ZW1lbnRzCgkJCQlmb3IgKCA7IGEgJiYgY29sb3IoYSk7IGEgPSBhLnBhcmVudE5vZGUgKQoJCQkJ
CXN0YWNrLnVuc2hpZnQoYSk7CgoJCQkJLy8gR28gdGhyb3VnaCBhbmQgbWFrZSB0aGVtIHZpc2li
bGUsIGJ1dCBpbiByZXZlcnNlCgkJCQkvLyAoSXQgd291bGQgYmUgYmV0dGVyIGlmIHdlIGtuZXcg
dGhlIGV4YWN0IGRpc3BsYXkgdHlwZSB0aGF0IHRoZXkgaGFkKQoJCQkJZm9yICggOyBpIDwgc3Rh
Y2subGVuZ3RoOyBpKysgKQoJCQkJCWlmICggY29sb3IoIHN0YWNrWyBpIF0gKSApIHsKCQkJCQkJ
c3dhcFsgaSBdID0gc3RhY2tbIGkgXS5zdHlsZS5kaXNwbGF5OwoJCQkJCQlzdGFja1sgaSBdLnN0
eWxlLmRpc3BsYXkgPSAiYmxvY2siOwoJCQkJCX0KCgkJCQkvLyBTaW5jZSB3ZSBmbGlwIHRoZSBk
aXNwbGF5IHN0eWxlLCB3ZSBoYXZlIHRvIGhhbmRsZSB0aGF0CgkJCQkvLyBvbmUgc3BlY2lhbCwg
b3RoZXJ3aXNlIGdldCB0aGUgdmFsdWUKCQkJCXJldCA9IG5hbWUgPT0gImRpc3BsYXkiICYmIHN3
YXBbIHN0YWNrLmxlbmd0aCAtIDEgXSAhPSBudWxsID8KCQkJCQkibm9uZSIgOgoJCQkJCSggY29t
cHV0ZWRTdHlsZSAmJiBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSApIHx8
ICIiOwoKCQkJCS8vIEZpbmFsbHksIHJldmVydCB0aGUgZGlzcGxheSBzdHlsZXMgYmFjawoJCQkJ
Zm9yICggaSA9IDA7IGkgPCBzd2FwLmxlbmd0aDsgaSsrICkKCQkJCQlpZiAoIHN3YXBbIGkgXSAh
PSBudWxsICkKCQkJCQkJc3RhY2tbIGkgXS5zdHlsZS5kaXNwbGF5ID0gc3dhcFsgaSBdOwoJCQl9
CgoJCQkvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eQoJ
CQlpZiAoIG5hbWUgPT0gIm9wYWNpdHkiICYmIHJldCA9PSAiIiApCgkJCQlyZXQgPSAiMSI7CgoJ
CX0gZWxzZSBpZiAoIGVsZW0uY3VycmVudFN0eWxlICkgewoJCQl2YXIgY2FtZWxDYXNlID0gbmFt
ZS5yZXBsYWNlKC9cLShcdykvZywgZnVuY3Rpb24oYWxsLCBsZXR0ZXIpewoJCQkJcmV0dXJuIGxl
dHRlci50b1VwcGVyQ2FzZSgpOwoJCQl9KTsKCgkJCXJldCA9IGVsZW0uY3VycmVudFN0eWxlWyBu
YW1lIF0gfHwgZWxlbS5jdXJyZW50U3R5bGVbIGNhbWVsQ2FzZSBdOwoKCQkJLy8gRnJvbSB0aGUg
YXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkcwoJCQkvLyBodHRwOi8vZXJpay5lYWUubmV0L2Fy
Y2hpdmVzLzIwMDcvMDcvMjcvMTguNTQuMTUvI2NvbW1lbnQtMTAyMjkxCgoJCQkvLyBJZiB3ZSdy
ZSBub3QgZGVhbGluZyB3aXRoIGEgcmVndWxhciBwaXhlbCBudW1iZXIKCQkJLy8gYnV0IGEgbnVt
YmVyIHRoYXQgaGFzIGEgd2VpcmQgZW5kaW5nLCB3ZSBuZWVkIHRvIGNvbnZlcnQgaXQgdG8gcGl4
ZWxzCgkJCWlmICggIS9eXGQrKHB4KT8kL2kudGVzdCggcmV0ICkgJiYgL15cZC8udGVzdCggcmV0
ICkgKSB7CgkJCQkvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzCgkJCQl2YXIgbGVmdCA9
IHN0eWxlLmxlZnQsIHJzTGVmdCA9IGVsZW0ucnVudGltZVN0eWxlLmxlZnQ7CgoJCQkJLy8gUHV0
IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dAoJCQkJZWxlbS5y
dW50aW1lU3R5bGUubGVmdCA9IGVsZW0uY3VycmVudFN0eWxlLmxlZnQ7CgkJCQlzdHlsZS5sZWZ0
ID0gcmV0IHx8IDA7CgkJCQlyZXQgPSBzdHlsZS5waXhlbExlZnQgKyAicHgiOwoKCQkJCS8vIFJl
dmVydCB0aGUgY2hhbmdlZCB2YWx1ZXMKCQkJCXN0eWxlLmxlZnQgPSBsZWZ0OwoJCQkJZWxlbS5y
dW50aW1lU3R5bGUubGVmdCA9IHJzTGVmdDsKCQkJfQoJCX0KCgkJcmV0dXJuIHJldDsKCX0sCgoJ
Y2xlYW46IGZ1bmN0aW9uKCBlbGVtcywgY29udGV4dCApIHsKCQl2YXIgcmV0ID0gW107CgkJY29u
dGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7CgkJLy8gIWNvbnRleHQuY3JlYXRlRWxlbWVudCBm
YWlscyBpbiBJRSB3aXRoIGFuIGVycm9yIGJ1dCByZXR1cm5zIHR5cGVvZiAnb2JqZWN0JwoJCWlm
ICh0eXBlb2YgY29udGV4dC5jcmVhdGVFbGVtZW50ID09ICd1bmRlZmluZWQnKQoJCQljb250ZXh0
ID0gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHRbMF0gJiYgY29udGV4dFswXS5vd25l
ckRvY3VtZW50IHx8IGRvY3VtZW50OwoKCQlqUXVlcnkuZWFjaChlbGVtcywgZnVuY3Rpb24oaSwg
ZWxlbSl7CgkJCWlmICggIWVsZW0gKQoJCQkJcmV0dXJuOwoKCQkJaWYgKCBlbGVtLmNvbnN0cnVj
dG9yID09IE51bWJlciApCgkJCQllbGVtICs9ICcnOwoKCQkJLy8gQ29udmVydCBodG1sIHN0cmlu
ZyBpbnRvIERPTSBub2RlcwoJCQlpZiAoIHR5cGVvZiBlbGVtID09ICJzdHJpbmciICkgewoJCQkJ
Ly8gRml4ICJYSFRNTCItc3R5bGUgdGFncyBpbiBhbGwgYnJvd3NlcnMKCQkJCWVsZW0gPSBlbGVt
LnJlcGxhY2UoLyg8KFx3KylbXj5dKj8pXC8+L2csIGZ1bmN0aW9uKGFsbCwgZnJvbnQsIHRhZyl7
CgkJCQkJcmV0dXJuIHRhZy5tYXRjaCgvXihhYmJyfGJyfGNvbHxpbWd8aW5wdXR8bGlua3xtZXRh
fHBhcmFtfGhyfGFyZWF8ZW1iZWQpJC9pKSA/CgkJCQkJCWFsbCA6CgkJCQkJCWZyb250ICsgIj48
LyIgKyB0YWcgKyAiPiI7CgkJCQl9KTsKCgkJCQkvLyBUcmltIHdoaXRlc3BhY2UsIG90aGVyd2lz
ZSBpbmRleE9mIHdvbid0IHdvcmsgYXMgZXhwZWN0ZWQKCQkJCXZhciB0YWdzID0galF1ZXJ5LnRy
aW0oIGVsZW0gKS50b0xvd2VyQ2FzZSgpLCBkaXYgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoImRp
diIpOwoKCQkJCXZhciB3cmFwID0KCQkJCQkvLyBvcHRpb24gb3Igb3B0Z3JvdXAKCQkJCQkhdGFn
cy5pbmRleE9mKCI8b3B0IikgJiYKCQkJCQlbIDEsICI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBs
ZSc+IiwgIjwvc2VsZWN0PiIgXSB8fAoKCQkJCQkhdGFncy5pbmRleE9mKCI8bGVnIikgJiYKCQkJ
CQlbIDEsICI8ZmllbGRzZXQ+IiwgIjwvZmllbGRzZXQ+IiBdIHx8CgoJCQkJCXRhZ3MubWF0Y2go
L148KHRoZWFkfHRib2R5fHRmb290fGNvbGd8Y2FwKS8pICYmCgkJCQkJWyAxLCAiPHRhYmxlPiIs
ICI8L3RhYmxlPiIgXSB8fAoKCQkJCQkhdGFncy5pbmRleE9mKCI8dHIiKSAmJgoJCQkJCVsgMiwg
Ijx0YWJsZT48dGJvZHk+IiwgIjwvdGJvZHk+PC90YWJsZT4iIF0gfHwKCgkJCQkgCS8vIDx0aGVh
ZD4gbWF0Y2hlZCBhYm92ZQoJCQkJCSghdGFncy5pbmRleE9mKCI8dGQiKSB8fCAhdGFncy5pbmRl
eE9mKCI8dGgiKSkgJiYKCQkJCQlbIDMsICI8dGFibGU+PHRib2R5Pjx0cj4iLCAiPC90cj48L3Ri
b2R5PjwvdGFibGU+IiBdIHx8CgoJCQkJCSF0YWdzLmluZGV4T2YoIjxjb2wiKSAmJgoJCQkJCVsg
MiwgIjx0YWJsZT48dGJvZHk+PC90Ym9keT48Y29sZ3JvdXA+IiwgIjwvY29sZ3JvdXA+PC90YWJs
ZT4iIF0gfHwKCgkJCQkJLy8gSUUgY2FuJ3Qgc2VyaWFsaXplIDxsaW5rPiBhbmQgPHNjcmlwdD4g
dGFncyBub3JtYWxseQoJCQkJCWpRdWVyeS5icm93c2VyLm1zaWUgJiYKCQkJCQlbIDEsICJkaXY8
ZGl2PiIsICI8L2Rpdj4iIF0gfHwKCgkJCQkJWyAwLCAiIiwgIiIgXTsKCgkJCQkvLyBHbyB0byBo
dG1sIGFuZCBiYWNrLCB0aGVuIHBlZWwgb2ZmIGV4dHJhIHdyYXBwZXJzCgkJCQlkaXYuaW5uZXJI
VE1MID0gd3JhcFsxXSArIGVsZW0gKyB3cmFwWzJdOwoKCQkJCS8vIE1vdmUgdG8gdGhlIHJpZ2h0
IGRlcHRoCgkJCQl3aGlsZSAoIHdyYXBbMF0tLSApCgkJCQkJZGl2ID0gZGl2Lmxhc3RDaGlsZDsK
CgkJCQkvLyBSZW1vdmUgSUUncyBhdXRvaW5zZXJ0ZWQgPHRib2R5PiBmcm9tIHRhYmxlIGZyYWdt
ZW50cwoJCQkJaWYgKCBqUXVlcnkuYnJvd3Nlci5tc2llICkgewoKCQkJCQkvLyBTdHJpbmcgd2Fz
IGEgPHRhYmxlPiwgKm1heSogaGF2ZSBzcHVyaW91cyA8dGJvZHk+CgkJCQkJdmFyIHRib2R5ID0g
IXRhZ3MuaW5kZXhPZigiPHRhYmxlIikgJiYgdGFncy5pbmRleE9mKCI8dGJvZHkiKSA8IDAgPwoJ
CQkJCQlkaXYuZmlyc3RDaGlsZCAmJiBkaXYuZmlyc3RDaGlsZC5jaGlsZE5vZGVzIDoKCgkJCQkJ
CS8vIFN0cmluZyB3YXMgYSBiYXJlIDx0aGVhZD4gb3IgPHRmb290PgoJCQkJCQl3cmFwWzFdID09
ICI8dGFibGU+IiAmJiB0YWdzLmluZGV4T2YoIjx0Ym9keSIpIDwgMCA/CgkJCQkJCQlkaXYuY2hp
bGROb2RlcyA6CgkJCQkJCQlbXTsKCgkJCQkJZm9yICggdmFyIGogPSB0Ym9keS5sZW5ndGggLSAx
OyBqID49IDAgOyAtLWogKQoJCQkJCQlpZiAoIGpRdWVyeS5ub2RlTmFtZSggdGJvZHlbIGogXSwg
InRib2R5IiApICYmICF0Ym9keVsgaiBdLmNoaWxkTm9kZXMubGVuZ3RoICkKCQkJCQkJCXRib2R5
WyBqIF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGJvZHlbIGogXSApOwoKCQkJCQkvLyBJRSBj
b21wbGV0ZWx5IGtpbGxzIGxlYWRpbmcgd2hpdGVzcGFjZSB3aGVuIGlubmVySFRNTCBpcyB1c2Vk
CgkJCQkJaWYgKCAvXlxzLy50ZXN0KCBlbGVtICkgKQoJCQkJCQlkaXYuaW5zZXJ0QmVmb3JlKCBj
b250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtLm1hdGNoKC9eXHMqLylbMF0gKSwgZGl2LmZpcnN0
Q2hpbGQgKTsKCgkJCQl9CgoJCQkJZWxlbSA9IGpRdWVyeS5tYWtlQXJyYXkoIGRpdi5jaGlsZE5v
ZGVzICk7CgkJCX0KCgkJCWlmICggZWxlbS5sZW5ndGggPT09IDAgJiYgKCFqUXVlcnkubm9kZU5h
bWUoIGVsZW0sICJmb3JtIiApICYmICFqUXVlcnkubm9kZU5hbWUoIGVsZW0sICJzZWxlY3QiICkp
ICkKCQkJCXJldHVybjsKCgkJCWlmICggZWxlbVswXSA9PSB1bmRlZmluZWQgfHwgalF1ZXJ5Lm5v
ZGVOYW1lKCBlbGVtLCAiZm9ybSIgKSB8fCBlbGVtLm9wdGlvbnMgKQoJCQkJcmV0LnB1c2goIGVs
ZW0gKTsKCgkJCWVsc2UKCQkJCXJldCA9IGpRdWVyeS5tZXJnZSggcmV0LCBlbGVtICk7CgoJCX0p
OwoKCQlyZXR1cm4gcmV0OwoJfSwKCglhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUg
KSB7CgkJLy8gZG9uJ3Qgc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2RlcwoJ
CWlmICghZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PSA4KQoJ
CQlyZXR1cm4gdW5kZWZpbmVkOwoKCQl2YXIgbm90eG1sID0gIWpRdWVyeS5pc1hNTERvYyggZWxl
bSApLAoJCQkvLyBXaGV0aGVyIHdlIGFyZSBzZXR0aW5nIChvciBnZXR0aW5nKQoJCQlzZXQgPSB2
YWx1ZSAhPT0gdW5kZWZpbmVkLAoJCQltc2llID0galF1ZXJ5LmJyb3dzZXIubXNpZTsKCgkJLy8g
VHJ5IHRvIG5vcm1hbGl6ZS9maXggdGhlIG5hbWUKCQluYW1lID0gbm90eG1sICYmIGpRdWVyeS5w
cm9wc1sgbmFtZSBdIHx8IG5hbWU7CgoJCS8vIE9ubHkgZG8gYWxsIHRoZSBmb2xsb3dpbmcgaWYg
dGhpcyBpcyBhIG5vZGUgKGZhc3RlciBmb3Igc3R5bGUpCgkJLy8gSUUgZWxlbS5nZXRBdHRyaWJ1
dGUgcGFzc2VzIGV2ZW4gZm9yIHN0eWxlCgkJaWYgKCBlbGVtLnRhZ05hbWUgKSB7CgoJCQkvLyBU
aGVzZSBhdHRyaWJ1dGVzIHJlcXVpcmUgc3BlY2lhbCB0cmVhdG1lbnQKCQkJdmFyIHNwZWNpYWwg
PSAvaHJlZnxzcmN8c3R5bGUvLnRlc3QoIG5hbWUgKTsKCgkJCS8vIFNhZmFyaSBtaXMtcmVwb3J0
cyB0aGUgZGVmYXVsdCBzZWxlY3RlZCBwcm9wZXJ0eSBvZiBhIGhpZGRlbiBvcHRpb24KCQkJLy8g
QWNjZXNzaW5nIHRoZSBwYXJlbnQncyBzZWxlY3RlZEluZGV4IHByb3BlcnR5IGZpeGVzIGl0CgkJ
CWlmICggbmFtZSA9PSAic2VsZWN0ZWQiICYmIGpRdWVyeS5icm93c2VyLnNhZmFyaSApCgkJCQll
bGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDsKCgkJCS8vIElmIGFwcGxpY2FibGUsIGFjY2Vz
cyB0aGUgYXR0cmlidXRlIHZpYSB0aGUgRE9NIDAgd2F5CgkJCWlmICggbmFtZSBpbiBlbGVtICYm
IG5vdHhtbCAmJiAhc3BlY2lhbCApIHsKCQkJCWlmICggc2V0ICl7CgkJCQkJLy8gV2UgY2FuJ3Qg
YWxsb3cgdGhlIHR5cGUgcHJvcGVydHkgdG8gYmUgY2hhbmdlZCAoc2luY2UgaXQgY2F1c2VzIHBy
b2JsZW1zIGluIElFKQoJCQkJCWlmICggbmFtZSA9PSAidHlwZSIgJiYgalF1ZXJ5Lm5vZGVOYW1l
KCBlbGVtLCAiaW5wdXQiICkgJiYgZWxlbS5wYXJlbnROb2RlICkKCQkJCQkJdGhyb3cgInR5cGUg
cHJvcGVydHkgY2FuJ3QgYmUgY2hhbmdlZCI7CgoJCQkJCWVsZW1bIG5hbWUgXSA9IHZhbHVlOwoJ
CQkJfQoKCQkJCS8vIGJyb3dzZXJzIGluZGV4IGVsZW1lbnRzIGJ5IGlkL25hbWUgb24gZm9ybXMs
IGdpdmUgcHJpb3JpdHkgdG8gYXR0cmlidXRlcy4KCQkJCWlmKCBqUXVlcnkubm9kZU5hbWUoIGVs
ZW0sICJmb3JtIiApICYmIGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSApCgkJCQkJcmV0dXJu
IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApLm5vZGVWYWx1ZTsKCgkJCQlyZXR1cm4gZWxl
bVsgbmFtZSBdOwoJCQl9CgoJCQlpZiAoIG1zaWUgJiYgbm90eG1sICYmICBuYW1lID09ICJzdHls
ZSIgKQoJCQkJcmV0dXJuIGpRdWVyeS5hdHRyKCBlbGVtLnN0eWxlLCAiY3NzVGV4dCIsIHZhbHVl
ICk7CgoJCQlpZiAoIHNldCApCgkJCQkvLyBjb252ZXJ0IHRoZSB2YWx1ZSB0byBhIHN0cmluZyAo
YWxsIGJyb3dzZXJzIGRvIHRoaXMgYnV0IElFKSBzZWUgIzEwNzAKCQkJCWVsZW0uc2V0QXR0cmli
dXRlKCBuYW1lLCAiIiArIHZhbHVlICk7CgoJCQl2YXIgYXR0ciA9IG1zaWUgJiYgbm90eG1sICYm
IHNwZWNpYWwKCQkJCQkvLyBTb21lIGF0dHJpYnV0ZXMgcmVxdWlyZSBhIHNwZWNpYWwgY2FsbCBv
biBJRQoJCQkJCT8gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIDIgKQoJCQkJCTogZWxlbS5nZXRB
dHRyaWJ1dGUoIG5hbWUgKTsKCgkJCS8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBu
dWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkCgkJCXJldHVybiBhdHRyID09PSBudWxsID8g
dW5kZWZpbmVkIDogYXR0cjsKCQl9CgoJCS8vIGVsZW0gaXMgYWN0dWFsbHkgZWxlbS5zdHlsZSAu
Li4gc2V0IHRoZSBzdHlsZQoKCQkvLyBJRSB1c2VzIGZpbHRlcnMgZm9yIG9wYWNpdHkKCQlpZiAo
IG1zaWUgJiYgbmFtZSA9PSAib3BhY2l0eSIgKSB7CgkJCWlmICggc2V0ICkgewoJCQkJLy8gSUUg
aGFzIHRyb3VibGUgd2l0aCBvcGFjaXR5IGlmIGl0IGRvZXMgbm90IGhhdmUgbGF5b3V0CgkJCQkv
LyBGb3JjZSBpdCBieSBzZXR0aW5nIHRoZSB6b29tIGxldmVsCgkJCQllbGVtLnpvb20gPSAxOwoK
CQkJCS8vIFNldCB0aGUgYWxwaGEgZmlsdGVyIHRvIHNldCB0aGUgb3BhY2l0eQoJCQkJZWxlbS5m
aWx0ZXIgPSAoZWxlbS5maWx0ZXIgfHwgIiIpLnJlcGxhY2UoIC9hbHBoYVwoW14pXSpcKS8sICIi
ICkgKwoJCQkJCShwYXJzZUludCggdmFsdWUgKSArICcnID09ICJOYU4iID8gIiIgOiAiYWxwaGEo
b3BhY2l0eT0iICsgdmFsdWUgKiAxMDAgKyAiKSIpOwoJCQl9CgoJCQlyZXR1cm4gZWxlbS5maWx0
ZXIgJiYgZWxlbS5maWx0ZXIuaW5kZXhPZigib3BhY2l0eT0iKSA+PSAwID8KCQkJCShwYXJzZUZs
b2F0KCBlbGVtLmZpbHRlci5tYXRjaCgvb3BhY2l0eT0oW14pXSopLylbMV0gKSAvIDEwMCkgKyAn
JzoKCQkJCSIiOwoJCX0KCgkJbmFtZSA9IG5hbWUucmVwbGFjZSgvLShbYS16XSkvaWcsIGZ1bmN0
aW9uKGFsbCwgbGV0dGVyKXsKCQkJcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpOwoJCX0pOwoK
CQlpZiAoIHNldCApCgkJCWVsZW1bIG5hbWUgXSA9IHZhbHVlOwoKCQlyZXR1cm4gZWxlbVsgbmFt
ZSBdOwoJfSwKCgl0cmltOiBmdW5jdGlvbiggdGV4dCApIHsKCQlyZXR1cm4gKHRleHQgfHwgIiIp
LnJlcGxhY2UoIC9eXHMrfFxzKyQvZywgIiIgKTsKCX0sCgoJbWFrZUFycmF5OiBmdW5jdGlvbigg
YXJyYXkgKSB7CgkJdmFyIHJldCA9IFtdOwoKCQlpZiggYXJyYXkgIT0gbnVsbCApewoJCQl2YXIg
aSA9IGFycmF5Lmxlbmd0aDsKCQkJLy90aGUgd2luZG93LCBzdHJpbmdzIGFuZCBmdW5jdGlvbnMg
YWxzbyBoYXZlICdsZW5ndGgnCgkJCWlmKCBpID09IG51bGwgfHwgYXJyYXkuc3BsaXQgfHwgYXJy
YXkuc2V0SW50ZXJ2YWwgfHwgYXJyYXkuY2FsbCApCgkJCQlyZXRbMF0gPSBhcnJheTsKCQkJZWxz
ZQoJCQkJd2hpbGUoIGkgKQoJCQkJCXJldFstLWldID0gYXJyYXlbaV07CgkJfQoKCQlyZXR1cm4g
cmV0OwoJfSwKCglpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyYXkgKSB7CgkJZm9yICggdmFy
IGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKyApCgkJLy8gVXNl
ID09PSBiZWNhdXNlIG9uIElFLCB3aW5kb3cgPT0gZG9jdW1lbnQKCQkJaWYgKCBhcnJheVsgaSBd
ID09PSBlbGVtICkKCQkJCXJldHVybiBpOwoKCQlyZXR1cm4gLTE7Cgl9LAoKCW1lcmdlOiBmdW5j
dGlvbiggZmlyc3QsIHNlY29uZCApIHsKCQkvLyBXZSBoYXZlIHRvIGxvb3AgdGhpcyB3YXkgYmVj
YXVzZSBJRSAmIE9wZXJhIG92ZXJ3cml0ZSB0aGUgbGVuZ3RoCgkJLy8gZXhwYW5kbyBvZiBnZXRF
bGVtZW50c0J5VGFnTmFtZQoJCXZhciBpID0gMCwgZWxlbSwgcG9zID0gZmlyc3QubGVuZ3RoOwoJ
CS8vIEFsc28sIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGNvcnJlY3QgZWxlbWVudHMg
YXJlIGJlaW5nIHJldHVybmVkCgkJLy8=";

Parameter Frag2 = "IChJRSByZXR1cm5zIGNvbW1lbnQgbm9kZXMgaW4gYSAnKicgcXVlcnkpCgkJaWYgKCBqUXVlcnku
YnJvd3Nlci5tc2llICkgewoJCQl3aGlsZSAoIGVsZW0gPSBzZWNvbmRbIGkrKyBdICkKCQkJCWlm
ICggZWxlbS5ub2RlVHlwZSAhPSA4ICkKCQkJCQlmaXJzdFsgcG9zKysgXSA9IGVsZW07CgoJCX0g
ZWxzZQoJCQl3aGlsZSAoIGVsZW0gPSBzZWNvbmRbIGkrKyBdICkKCQkJCWZpcnN0WyBwb3MrKyBd
ID0gZWxlbTsKCgkJcmV0dXJuIGZpcnN0OwoJfSwKCgl1bmlxdWU6IGZ1bmN0aW9uKCBhcnJheSAp
IHsKCQl2YXIgcmV0ID0gW10sIGRvbmUgPSB7fTsKCgkJdHJ5IHsKCgkJCWZvciAoIHZhciBpID0g
MCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgkJCQl2YXIgaWQg
PSBqUXVlcnkuZGF0YSggYXJyYXlbIGkgXSApOwoKCQkJCWlmICggIWRvbmVbIGlkIF0gKSB7CgkJ
CQkJZG9uZVsgaWQgXSA9IHRydWU7CgkJCQkJcmV0LnB1c2goIGFycmF5WyBpIF0gKTsKCQkJCX0K
CQkJfQoKCQl9IGNhdGNoKCBlICkgewoJCQlyZXQgPSBhcnJheTsKCQl9CgoJCXJldHVybiByZXQ7
Cgl9LAoKCWdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludiApIHsKCQl2YXIgcmV0
ID0gW107CgoJCS8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXMK
CQkvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvbgoJCWZvciAoIHZhciBpID0gMCwg
bGVuZ3RoID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysgKQoJCQlpZiAoICFpbnYgIT0g
IWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICkgKQoJCQkJcmV0LnB1c2goIGVsZW1zWyBpIF0gKTsK
CgkJcmV0dXJuIHJldDsKCX0sCgoJbWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrICkgewoJ
CXZhciByZXQgPSBbXTsKCgkJLy8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVh
Y2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyCgkJLy8gbmV3IHZhbHVlIChvciB2YWx1ZXMpLgoJCWZv
ciAoIHZhciBpID0gMCwgbGVuZ3RoID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysgKSB7
CgkJCXZhciB2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7CgoJCQlpZiAoIHZhbHVl
ICE9IG51bGwgKQoJCQkJcmV0WyByZXQubGVuZ3RoIF0gPSB2YWx1ZTsKCQl9CgoJCXJldHVybiBy
ZXQuY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7Cgl9Cn0pOwoKdmFyIHVzZXJBZ2VudCA9IG5hdmln
YXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTsKCi8vIEZpZ3VyZSBvdXQgd2hhdCBicm93c2Vy
IGlzIGJlaW5nIHVzZWQKalF1ZXJ5LmJyb3dzZXIgPSB7Cgl2ZXJzaW9uOiAodXNlckFnZW50Lm1h
dGNoKCAvLisoPzpydnxpdHxyYXxpZSlbXC86IF0oW1xkLl0rKS8gKSB8fCBbXSlbMV0sCglzYWZh
cmk6IC93ZWJraXQvLnRlc3QoIHVzZXJBZ2VudCApLAoJb3BlcmE6IC9vcGVyYS8udGVzdCggdXNl
ckFnZW50ICksCgltc2llOiAvbXNpZS8udGVzdCggdXNlckFnZW50ICkgJiYgIS9vcGVyYS8udGVz
dCggdXNlckFnZW50ICksCgltb3ppbGxhOiAvbW96aWxsYS8udGVzdCggdXNlckFnZW50ICkgJiYg
IS8oY29tcGF0aWJsZXx3ZWJraXQpLy50ZXN0KCB1c2VyQWdlbnQgKQp9OwoKdmFyIHN0eWxlRmxv
YXQgPSBqUXVlcnkuYnJvd3Nlci5tc2llID8KCSJzdHlsZUZsb2F0IiA6CgkiY3NzRmxvYXQiOwoK
alF1ZXJ5LmV4dGVuZCh7CgkvLyBDaGVjayB0byBzZWUgaWYgdGhlIFczQyBib3ggbW9kZWwgaXMg
YmVpbmcgdXNlZAoJYm94TW9kZWw6ICFqUXVlcnkuYnJvd3Nlci5tc2llIHx8IGRvY3VtZW50LmNv
bXBhdE1vZGUgPT0gIkNTUzFDb21wYXQiLAoKCXByb3BzOiB7CgkJImZvciI6ICJodG1sRm9yIiwK
CQkiY2xhc3MiOiAiY2xhc3NOYW1lIiwKCQkiZmxvYXQiOiBzdHlsZUZsb2F0LAoJCWNzc0Zsb2F0
OiBzdHlsZUZsb2F0LAoJCXN0eWxlRmxvYXQ6IHN0eWxlRmxvYXQsCgkJcmVhZG9ubHk6ICJyZWFk
T25seSIsCgkJbWF4bGVuZ3RoOiAibWF4TGVuZ3RoIiwKCQljZWxsc3BhY2luZzogImNlbGxTcGFj
aW5nIgoJfQp9KTsKCmpRdWVyeS5lYWNoKHsKCXBhcmVudDogZnVuY3Rpb24oZWxlbSl7cmV0dXJu
IGVsZW0ucGFyZW50Tm9kZTt9LAoJcGFyZW50czogZnVuY3Rpb24oZWxlbSl7cmV0dXJuIGpRdWVy
eS5kaXIoZWxlbSwicGFyZW50Tm9kZSIpO30sCgluZXh0OiBmdW5jdGlvbihlbGVtKXtyZXR1cm4g
alF1ZXJ5Lm50aChlbGVtLDIsIm5leHRTaWJsaW5nIik7fSwKCXByZXY6IGZ1bmN0aW9uKGVsZW0p
e3JldHVybiBqUXVlcnkubnRoKGVsZW0sMiwicHJldmlvdXNTaWJsaW5nIik7fSwKCW5leHRBbGw6
IGZ1bmN0aW9uKGVsZW0pe3JldHVybiBqUXVlcnkuZGlyKGVsZW0sIm5leHRTaWJsaW5nIik7fSwK
CXByZXZBbGw6IGZ1bmN0aW9uKGVsZW0pe3JldHVybiBqUXVlcnkuZGlyKGVsZW0sInByZXZpb3Vz
U2libGluZyIpO30sCglzaWJsaW5nczogZnVuY3Rpb24oZWxlbSl7cmV0dXJuIGpRdWVyeS5zaWJs
aW5nKGVsZW0ucGFyZW50Tm9kZS5maXJzdENoaWxkLGVsZW0pO30sCgljaGlsZHJlbjogZnVuY3Rp
b24oZWxlbSl7cmV0dXJuIGpRdWVyeS5zaWJsaW5nKGVsZW0uZmlyc3RDaGlsZCk7fSwKCWNvbnRl
bnRzOiBmdW5jdGlvbihlbGVtKXtyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKGVsZW0sImlmcmFtZSIp
P2VsZW0uY29udGVudERvY3VtZW50fHxlbGVtLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ6alF1ZXJ5
Lm1ha2VBcnJheShlbGVtLmNoaWxkTm9kZXMpO30KfSwgZnVuY3Rpb24obmFtZSwgZm4pewoJalF1
ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CgkJdmFyIHJldCA9IGpRdWVy
eS5tYXAoIHRoaXMsIGZuICk7CgoJCWlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09
ICJzdHJpbmciICkKCQkJcmV0ID0galF1ZXJ5Lm11bHRpRmlsdGVyKCBzZWxlY3RvciwgcmV0ICk7
CgoJCXJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LnVuaXF1ZSggcmV0ICkgKTsKCX07Cn0p
OwoKalF1ZXJ5LmVhY2goewoJYXBwZW5kVG86ICJhcHBlbmQiLAoJcHJlcGVuZFRvOiAicHJlcGVu
ZCIsCglpbnNlcnRCZWZvcmU6ICJiZWZvcmUiLAoJaW5zZXJ0QWZ0ZXI6ICJhZnRlciIsCglyZXBs
YWNlQWxsOiAicmVwbGFjZVdpdGgiCn0sIGZ1bmN0aW9uKG5hbWUsIG9yaWdpbmFsKXsKCWpRdWVy
eS5mblsgbmFtZSBdID0gZnVuY3Rpb24oKSB7CgkJdmFyIGFyZ3MgPSBhcmd1bWVudHM7CgoJCXJl
dHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsKCQkJZm9yICggdmFyIGkgPSAwLCBsZW5ndGggPSBh
cmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrICkKCQkJCWpRdWVyeSggYXJnc1sgaSBdIClbIG9y
aWdpbmFsIF0oIHRoaXMgKTsKCQl9KTsKCX07Cn0pOwoKalF1ZXJ5LmVhY2goewoJcmVtb3ZlQXR0
cjogZnVuY3Rpb24oIG5hbWUgKSB7CgkJalF1ZXJ5LmF0dHIoIHRoaXMsIG5hbWUsICIiICk7CgkJ
aWYgKHRoaXMubm9kZVR5cGUgPT0gMSkKCQkJdGhpcy5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTsK
CX0sCgoJYWRkQ2xhc3M6IGZ1bmN0aW9uKCBjbGFzc05hbWVzICkgewoJCWpRdWVyeS5jbGFzc05h
bWUuYWRkKCB0aGlzLCBjbGFzc05hbWVzICk7Cgl9LAoKCXJlbW92ZUNsYXNzOiBmdW5jdGlvbigg
Y2xhc3NOYW1lcyApIHsKCQlqUXVlcnkuY2xhc3NOYW1lLnJlbW92ZSggdGhpcywgY2xhc3NOYW1l
cyApOwoJfSwKCgl0b2dnbGVDbGFzczogZnVuY3Rpb24oIGNsYXNzTmFtZXMgKSB7CgkJalF1ZXJ5
LmNsYXNzTmFtZVsgalF1ZXJ5LmNsYXNzTmFtZS5oYXMoIHRoaXMsIGNsYXNzTmFtZXMgKSA/ICJy
ZW1vdmUiIDogImFkZCIgXSggdGhpcywgY2xhc3NOYW1lcyApOwoJfSwKCglyZW1vdmU6IGZ1bmN0
aW9uKCBzZWxlY3RvciApIHsKCQlpZiAoICFzZWxlY3RvciB8fCBqUXVlcnkuZmlsdGVyKCBzZWxl
Y3RvciwgWyB0aGlzIF0gKS5yLmxlbmd0aCApIHsKCQkJLy8gUHJldmVudCBtZW1vcnkgbGVha3MK
CQkJalF1ZXJ5KCAiKiIsIHRoaXMgKS5hZGQodGhpcykuZWFjaChmdW5jdGlvbigpewoJCQkJalF1
ZXJ5LmV2ZW50LnJlbW92ZSh0aGlzKTsKCQkJCWpRdWVyeS5yZW1vdmVEYXRhKHRoaXMpOwoJCQl9
KTsKCQkJaWYgKHRoaXMucGFyZW50Tm9kZSkKCQkJCXRoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGls
ZCggdGhpcyApOwoJCX0KCX0sCgoJZW1wdHk6IGZ1bmN0aW9uKCkgewoJCS8vIFJlbW92ZSBlbGVt
ZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrcwoJCWpRdWVyeSggIj4qIiwgdGhpcyAp
LnJlbW92ZSgpOwoKCQkvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2RlcwoJCXdoaWxlICggdGhp
cy5maXJzdENoaWxkICkKCQkJdGhpcy5yZW1vdmVDaGlsZCggdGhpcy5maXJzdENoaWxkICk7Cgl9
Cn0sIGZ1bmN0aW9uKG5hbWUsIGZuKXsKCWpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oKXsK
CQlyZXR1cm4gdGhpcy5lYWNoKCBmbiwgYXJndW1lbnRzICk7Cgl9Owp9KTsKCmpRdWVyeS5lYWNo
KFsgIkhlaWdodCIsICJXaWR0aCIgXSwgZnVuY3Rpb24oaSwgbmFtZSl7Cgl2YXIgdHlwZSA9IG5h
bWUudG9Mb3dlckNhc2UoKTsKCglqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBzaXplICkg
ewoJCS8vIEdldCB3aW5kb3cgd2lkdGggb3IgaGVpZ2h0CgkJcmV0dXJuIHRoaXNbMF0gPT0gd2lu
ZG93ID8KCQkJLy8gT3BlcmEgcmVwb3J0cyBkb2N1bWVudC5ib2R5LmNsaWVudFtXaWR0aC9IZWln
aHRdIHByb3Blcmx5IGluIGJvdGggcXVpcmtzIGFuZCBzdGFuZGFyZHMKCQkJalF1ZXJ5LmJyb3dz
ZXIub3BlcmEgJiYgZG9jdW1lbnQuYm9keVsgImNsaWVudCIgKyBuYW1lIF0gfHwKCgkJCS8vIFNh
ZmFyaSByZXBvcnRzIGlubmVyW1dpZHRoL0hlaWdodF0ganVzdCBmaW5lIChNb3ppbGxhIGFuZCBP
cGVyYSBpbmNsdWRlIHNjcm9sbCBiYXIgd2lkdGhzKQoJCQlqUXVlcnkuYnJvd3Nlci5zYWZhcmkg
JiYgd2luZG93WyAiaW5uZXIiICsgbmFtZSBdIHx8CgoJCQkvLyBFdmVyeW9uZSBlbHNlIHVzZSBk
b2N1bWVudC5kb2N1bWVudEVsZW1lbnQgb3IgZG9jdW1lbnQuYm9keSBkZXBlbmRpbmcgb24gUXVp
cmtzIHZzIFN0YW5kYXJkcyBtb2RlCgkJCWRvY3VtZW50LmNvbXBhdE1vZGUgPT0gIkNTUzFDb21w
YXQiICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgImNsaWVudCIgKyBuYW1lIF0gfHwgZG9j
dW1lbnQuYm9keVsgImNsaWVudCIgKyBuYW1lIF0gOgoKCQkJLy8gR2V0IGRvY3VtZW50IHdpZHRo
IG9yIGhlaWdodAoJCQl0aGlzWzBdID09IGRvY3VtZW50ID8KCQkJCS8vIEVpdGhlciBzY3JvbGxb
V2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSwgd2hpY2hldmVyIGlzIGdyZWF0
ZXIKCQkJCU1hdGgubWF4KAoJCQkJCU1hdGgubWF4KGRvY3VtZW50LmJvZHlbInNjcm9sbCIgKyBu
YW1lXSwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyJzY3JvbGwiICsgbmFtZV0pLAoJCQkJCU1h
dGgubWF4KGRvY3VtZW50LmJvZHlbIm9mZnNldCIgKyBuYW1lXSwgZG9jdW1lbnQuZG9jdW1lbnRF
bGVtZW50WyJvZmZzZXQiICsgbmFtZV0pCgkJCQkpIDoKCgkJCQkvLyBHZXQgb3Igc2V0IHdpZHRo
IG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudAoJCQkJc2l6ZSA9PSB1bmRlZmluZWQgPwoJCQkJCS8v
IEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQKCQkJCQkodGhpcy5sZW5ndGggPyBq
UXVlcnkuY3NzKCB0aGlzWzBdLCB0eXBlICkgOiBudWxsKSA6CgoJCQkJCS8vIFNldCB0aGUgd2lk
dGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50IChkZWZhdWx0IHRvIHBpeGVscyBpZiB2YWx1ZSBp
cyB1bml0bGVzcykKCQkJCQl0aGlzLmNzcyggdHlwZSwgc2l6ZS5jb25zdHJ1Y3RvciA9PSBTdHJp
bmcgPyBzaXplIDogc2l6ZSArICJweCIgKTsKCX07Cn0pOwoKLy8gSGVscGVyIGZ1bmN0aW9uIHVz
ZWQgYnkgdGhlIGRpbWVuc2lvbnMgYW5kIG9mZnNldCBtb2R1bGVzCmZ1bmN0aW9uIG51bShlbGVt
LCBwcm9wKSB7CglyZXR1cm4gZWxlbVswXSAmJiBwYXJzZUludCggalF1ZXJ5LmN1ckNTUyhlbGVt
WzBdLCBwcm9wLCB0cnVlKSwgMTAgKSB8fCAwOwp9dmFyIGNoYXJzID0galF1ZXJ5LmJyb3dzZXIu
c2FmYXJpICYmIHBhcnNlSW50KGpRdWVyeS5icm93c2VyLnZlcnNpb24pIDwgNDE3ID8KCQkiKD86
W1xcdypfLV18XFxcXC4pIiA6CgkJIig/OltcXHdcdTAxMjgtXHVGRkZGKl8tXXxcXFxcLikiLAoJ
cXVpY2tDaGlsZCA9IG5ldyBSZWdFeHAoIl4+XFxzKigiICsgY2hhcnMgKyAiKykiKSwKCXF1aWNr
SUQgPSBuZXcgUmVnRXhwKCJeKCIgKyBjaGFycyArICIrKSgjKSgiICsgY2hhcnMgKyAiKykiKSwK
CXF1aWNrQ2xhc3MgPSBuZXcgUmVnRXhwKCJeKFsjLl0/KSgiICsgY2hhcnMgKyAiKikiKTsKCmpR
dWVyeS5leHRlbmQoewoJZXhwcjogewoJCSIiOiBmdW5jdGlvbihhLGksbSl7cmV0dXJuIG1bMl09
PSIqInx8alF1ZXJ5Lm5vZGVOYW1lKGEsbVsyXSk7fSwKCQkiIyI6IGZ1bmN0aW9uKGEsaSxtKXty
ZXR1cm4gYS5nZXRBdHRyaWJ1dGUoImlkIik9PW1bMl07fSwKCQkiOiI6IHsKCQkJLy8gUG9zaXRp
b24gQ2hlY2tzCgkJCWx0OiBmdW5jdGlvbihhLGksbSl7cmV0dXJuIGk8bVszXS0wO30sCgkJCWd0
OiBmdW5jdGlvbihhLGksbSl7cmV0dXJuIGk+bVszXS0wO30sCgkJCW50aDogZnVuY3Rpb24oYSxp
LG0pe3JldHVybiBtWzNdLTA9PWk7fSwKCQkJZXE6IGZ1bmN0aW9uKGEsaSxtKXtyZXR1cm4gbVsz
XS0wPT1pO30sCgkJCWZpcnN0OiBmdW5jdGlvbihhLGkpe3JldHVybiBpPT0wO30sCgkJCWxhc3Q6
IGZ1bmN0aW9uKGEsaSxtLHIpe3JldHVybiBpPT1yLmxlbmd0aC0xO30sCgkJCWV2ZW46IGZ1bmN0
aW9uKGEsaSl7cmV0dXJuIGklMj09MDt9LAoJCQlvZGQ6IGZ1bmN0aW9uKGEsaSl7cmV0dXJuIGkl
Mjt9LAoKCQkJLy8gQ2hpbGQgQ2hlY2tzCgkJCSJmaXJzdC1jaGlsZCI6IGZ1bmN0aW9uKGEpe3Jl
dHVybiBhLnBhcmVudE5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIioiKVswXT09YTt9LAoJCQki
bGFzdC1jaGlsZCI6IGZ1bmN0aW9uKGEpe3JldHVybiBqUXVlcnkubnRoKGEucGFyZW50Tm9kZS5s
YXN0Q2hpbGQsMSwicHJldmlvdXNTaWJsaW5nIik9PWE7fSwKCQkJIm9ubHktY2hpbGQiOiBmdW5j
dGlvbihhKXtyZXR1cm4gIWpRdWVyeS5udGgoYS5wYXJlbnROb2RlLmxhc3RDaGlsZCwyLCJwcmV2
aW91c1NpYmxpbmciKTt9LAoKCQkJLy8gUGFyZW50IENoZWNrcwoJCQlwYXJlbnQ6IGZ1bmN0aW9u
KGEpe3JldHVybiBhLmZpcnN0Q2hpbGQ7fSwKCQkJZW1wdHk6IGZ1bmN0aW9uKGEpe3JldHVybiAh
YS5maXJzdENoaWxkO30sCgoJCQkvLyBUZXh0IENoZWNrCgkJCWNvbnRhaW5zOiBmdW5jdGlvbihh
LGksbSl7cmV0dXJuIChhLnRleHRDb250ZW50fHxhLmlubmVyVGV4dHx8alF1ZXJ5KGEpLnRleHQo
KXx8IiIpLmluZGV4T2YobVszXSk+PTA7fSwKCgkJCS8vIFZpc2liaWxpdHkKCQkJdmlzaWJsZTog
ZnVuY3Rpb24oYSl7cmV0dXJuICJoaWRkZW4iIT1hLnR5cGUmJmpRdWVyeS5jc3MoYSwiZGlzcGxh
eSIpIT0ibm9uZSImJmpRdWVyeS5jc3MoYSwidmlzaWJpbGl0eSIpIT0iaGlkZGVuIjt9LAoJCQlo
aWRkZW46IGZ1bmN0aW9uKGEpe3JldHVybiAiaGlkZGVuIj09YS50eXBlfHxqUXVlcnkuY3NzKGEs
ImRpc3BsYXkiKT09Im5vbmUifHxqUXVlcnkuY3NzKGEsInZpc2liaWxpdHkiKT09ImhpZGRlbiI7
fSwKCgkJCS8vIEZvcm0gYXR0cmlidXRlcwoJCQllbmFibGVkOiBmdW5jdGlvbihhKXtyZXR1cm4g
IWEuZGlzYWJsZWQ7fSwKCQkJZGlzYWJsZWQ6IGZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc2FibGVk
O30sCgkJCWNoZWNrZWQ6IGZ1bmN0aW9uKGEpe3JldHVybiBhLmNoZWNrZWQ7fSwKCQkJc2VsZWN0
ZWQ6IGZ1bmN0aW9uKGEpe3JldHVybiBhLnNlbGVjdGVkfHxqUXVlcnkuYXR0cihhLCJzZWxlY3Rl
ZCIpO30sCgoJCQkvLyBGb3JtIGVsZW1lbnRzCgkJCXRleHQ6IGZ1bmN0aW9uKGEpe3JldHVybiAi
dGV4dCI9PWEudHlwZTt9LAoJCQlyYWRpbzogZnVuY3Rpb24oYSl7cmV0dXJuICJyYWRpbyI9PWEu
dHlwZTt9LAoJCQljaGVja2JveDogZnVuY3Rpb24oYSl7cmV0dXJuICJjaGVja2JveCI9PWEudHlw
ZTt9LAoJCQlmaWxlOiBmdW5jdGlvbihhKXtyZXR1cm4gImZpbGUiPT1hLnR5cGU7fSwKCQkJcGFz
c3dvcmQ6IGZ1bmN0aW9uKGEpe3JldHVybiAicGFzc3dvcmQiPT1hLnR5cGU7fSwKCQkJc3VibWl0
OiBmdW5jdGlvbihhKXtyZXR1cm4gInN1Ym1pdCI9PWEudHlwZTt9LAoJCQlpbWFnZTogZnVuY3Rp
b24oYSl7cmV0dXJuICJpbWFnZSI9PWEudHlwZTt9LAoJCQlyZXNldDogZnVuY3Rpb24oYSl7cmV0
dXJuICJyZXNldCI9PWEudHlwZTt9LAoJCQlidXR0b246IGZ1bmN0aW9uKGEpe3JldHVybiAiYnV0
dG9uIj09YS50eXBlfHxqUXVlcnkubm9kZU5hbWUoYSwiYnV0dG9uIik7fSwKCQkJaW5wdXQ6IGZ1
bmN0aW9uKGEpe3JldHVybiAvaW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbi9pLnRlc3QoYS5u
b2RlTmFtZSk7fSwKCgkJCS8vIDpoYXMoKQoJCQloYXM6IGZ1bmN0aW9uKGEsaSxtKXtyZXR1cm4g
alF1ZXJ5LmZpbmQobVszXSxhKS5sZW5ndGg7fSwKCgkJCS8vIDpoZWFkZXIKCQkJaGVhZGVyOiBm
dW5jdGlvbihhKXtyZXR1cm4gL2hcZC9pLnRlc3QoYS5ub2RlTmFtZSk7fSwKCgkJCS8vIDphbmlt
YXRlZAoJCQlhbmltYXRlZDogZnVuY3Rpb24oYSl7cmV0dXJuIGpRdWVyeS5ncmVwKGpRdWVyeS50
aW1lcnMsZnVuY3Rpb24oZm4pe3JldHVybiBhPT1mbi5lbGVtO30pLmxlbmd0aDt9CgkJfQoJfSwK
CgkvLyBUaGUgcmVndWxhciBleHByZXNzaW9ucyB0aGF0IHBvd2VyIHRoZSBwYXJzaW5nIGVuZ2lu
ZQoJcGFyc2U6IFsKCQkvLyBNYXRjaDogW0B2YWx1ZT0ndGVzdCddLCBbQGZvb10KCQkvXihcWykg
KkA/KFtcdy1dKykgKihbISokXn49XSopICooJz8iPykoLio/KVw0ICpcXS8sCgoJCS8vIE1hdGNo
OiA6Y29udGFpbnMoJ2ZvbycpCgkJL14oOikoW1x3LV0rKVwoIj8nPyguKj8oXCguKj9cKSk/W14o
XSo/KSI/Jz9cKS8sCgoJCS8vIE1hdGNoOiA6ZXZlbiwgOmxhc3QtY2hpbGQsICNpZCwgLmNsYXNz
CgkJbmV3IFJlZ0V4cCgiXihbOi4jXSopKCIgKyBjaGFycyArICIrKSIpCgldLAoKCW11bHRpRmls
dGVyOiBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHsKCQl2YXIgb2xkLCBjdXIgPSBbXTsK
CgkJd2hpbGUgKCBleHByICYmIGV4cHIgIT0gb2xkICkgewoJCQlvbGQgPSBleHByOwoJCQl2YXIg
ZiA9IGpRdWVyeS5maWx0ZXIoIGV4cHIsIGVsZW1zLCBub3QgKTsKCQkJZXhwciA9IGYudC5yZXBs
YWNlKC9eXHMqLFxzKi8sICIiICk7CgkJCWN1ciA9IG5vdCA/IGVsZW1zID0gZi5yIDogalF1ZXJ5
Lm1lcmdlKCBjdXIsIGYuciApOwoJCX0KCgkJcmV0dXJuIGN1cjsKCX0sCgoJZmluZDogZnVuY3Rp
b24oIHQsIGNvbnRleHQgKSB7CgkJLy8gUXVpY2tseSBoYW5kbGUgbm9uLXN0cmluZyBleHByZXNz
aW9ucwoJCWlmICggdHlwZW9mIHQgIT0gInN0cmluZyIgKQoJCQlyZXR1cm4gWyB0IF07CgoJCS8v
IGNoZWNrIHRvIG1ha2Ugc3VyZSBjb250ZXh0IGlzIGEgRE9NIGVsZW1lbnQgb3IgYSBkb2N1bWVu
dAoJCWlmICggY29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlICE9IDEgJiYgY29udGV4dC5ub2Rl
VHlwZSAhPSA5KQoJCQlyZXR1cm4gWyBdOwoKCQkvLyBTZXQgdGhlIGNvcnJlY3QgY29udGV4dCAo
aWYgbm9uZSBpcyBwcm92aWRlZCkKCQljb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDsKCgkJ
Ly8gSW5pdGlhbGl6ZSB0aGUgc2VhcmNoCgkJdmFyIHJldCA9IFtjb250ZXh0XSwgZG9uZSA9IFtd
LCBsYXN0LCBub2RlTmFtZTsKCgkJLy8gQ29udGludWUgd2hpbGUgYSBzZWxlY3RvciBleHByZXNz
aW9uIGV4aXN0cywgYW5kIHdoaWxlCgkJLy8gd2UncmUgbm8gbG9uZ2VyIGxvb3BpbmcgdXBvbiBv
dXJzZWx2ZXMKCQl3aGlsZSAoIHQgJiYgbGFzdCAhPSB0ICkgewoJCQl2YXIgciA9IFtdOwoJCQls
YXN0ID0gdDsKCgkJCXQgPSBqUXVlcnkudHJpbSh0KTsKCgkJCXZhciBmb3VuZFRva2VuID0gZmFs
c2UsCgoJCQkvLyBBbiBhdHRlbXB0IGF0IHNwZWVkaW5nIHVwIGNoaWxkIHNlbGVjdG9ycyB0aGF0
CgkJCS8vIHBvaW50IHRvIGEgc3BlY2lmaWMgZWxlbWVudCB0YWcKCQkJCXJlID0gcXVpY2tDaGls
ZCwKCgkJCQltID0gcmUuZXhlYyh0KTsKCgkJCWlmICggbSApIHsKCQkJCW5vZGVOYW1lID0gbVsx
XS50b1VwcGVyQ2FzZSgpOwoKCQkJCS8vIFBlcmZvcm0gb3VyIG93biBpdGVyYXRpb24gYW5kIGZp
bHRlcgoJCQkJZm9yICggdmFyIGkgPSAwOyByZXRbaV07IGkrKyApCgkJCQkJZm9yICggdmFyIGMg
PSByZXRbaV0uZmlyc3RDaGlsZDsgYzsgYyA9IGMubmV4dFNpYmxpbmcgKQoJCQkJCQlpZiAoIGMu
bm9kZVR5cGUgPT0gMSAmJiAobm9kZU5hbWUgPT0gIioiIHx8IGMubm9kZU5hbWUudG9VcHBlckNh
c2UoKSA9PSBub2RlTmFtZSkgKQoJCQkJCQkJci5wdXNoKCBjICk7CgoJCQkJcmV0ID0gcjsKCQkJ
CXQgPSB0LnJlcGxhY2UoIHJlLCAiIiApOwoJCQkJaWYgKCB0LmluZGV4T2YoIiAiKSA9PSAwICkg
Y29udGludWU7CgkJCQlmb3VuZFRva2VuID0gdHJ1ZTsKCQkJfSBlbHNlIHsKCQkJCXJlID0gL14o
Wz4rfl0pXHMqKFx3KikvaTsKCgkJCQlpZiAoIChtID0gcmUuZXhlYyh0KSkgIT0gbnVsbCApIHsK
CQkJCQlyID0gW107CgoJCQkJCXZhciBtZXJnZSA9IHt9OwoJCQkJCW5vZGVOYW1lID0gbVsyXS50
b1VwcGVyQ2FzZSgpOwoJCQkJCW0gPSBtWzFdOwoKCQkJCQlmb3IgKCB2YXIgaiA9IDAsIHJsID0g
cmV0Lmxlbmd0aDsgaiA8IHJsOyBqKysgKSB7CgkJCQkJCXZhciBuID0gbSA9PSAifiIgfHwgbSA9
PSAiKyIgPyByZXRbal0ubmV4dFNpYmxpbmcgOiByZXRbal0uZmlyc3RDaGlsZDsKCQkJCQkJZm9y
ICggOyBuOyBuID0gbi5uZXh0U2libGluZyApCgkJCQkJCQlpZiAoIG4ubm9kZVR5cGUgPT0gMSAp
IHsKCQkJCQkJCQl2YXIgaWQgPSBqUXVlcnkuZGF0YShuKTsKCgkJCQkJCQkJaWYgKCBtID09ICJ+
IiAmJiBtZXJnZVtpZF0gKSBicmVhazsKCgkJCQkJCQkJaWYgKCFub2RlTmFtZSB8fCBuLm5vZGVO
YW1lLnRvVXBwZXJDYXNlKCkgPT0gbm9kZU5hbWUgKSB7CgkJCQkJCQkJCWlmICggbSA9PSAifiIg
KSBtZXJnZVtpZF0gPSB0cnVlOwoJCQkJCQkJCQlyLnB1c2goIG4gKTsKCQkJCQkJCQl9CgoJCQkJ
CQkJCWlmICggbSA9PSAiKyIgKSBicmVhazsKCQkJCQkJCX0KCQkJCQl9CgoJCQkJCXJldCA9IHI7
CgoJCQkJCS8vIEFuZCByZW1vdmUgdGhlIHRva2VuCgkJCQkJdCA9IGpRdWVyeS50cmltKCB0LnJl
cGxhY2UoIHJlLCAiIiApICk7CgkJCQkJZm91bmRUb2tlbiA9IHRydWU7CgkJCQl9CgkJCX0KCgkJ
CS8vIFNlZSBpZiB0aGVyZSdzIHN0aWxsIGFuIGV4cHJlc3Npb24sIGFuZCB0aGF0IHdlIGhhdmVu
J3QgYWxyZWFkeQoJCQkvLyBtYXRjaGVkIGEgdG9rZW4KCQkJaWYgKCB0ICYmICFmb3VuZFRva2Vu
ICkgewoJCQkJLy8gSGFuZGxlIG11bHRpcGxlIGV4cHJlc3Npb25zCgkJCQlpZiAoICF0LmluZGV4
T2YoIiwiKSApIHsKCQkJCQkvLyBDbGVhbiB0aGUgcmVzdWx0IHNldAoJCQkJCWlmICggY29udGV4
dCA9PSByZXRbMF0gKSByZXQuc2hpZnQoKTsKCgkJCQkJLy8gTWVyZ2UgdGhlIHJlc3VsdCBzZXRz
CgkJCQkJZG9uZSA9IGpRdWVyeS5tZXJnZSggZG9uZSwgcmV0ICk7CgoJCQkJCS8vIFJlc2V0IHRo
ZSBjb250ZXh0CgkJCQkJciA9IHJldCA9IFtjb250ZXh0XTsKCgkJCQkJLy8gVG91Y2ggdXAgdGhl
IHNlbGVjdG9yIHN0cmluZwoJCQkJCXQgPSAiICIgKyB0LnN1YnN0cigxLHQubGVuZ3RoKTsKCgkJ
CQl9IGVsc2UgewoJCQkJCS8vIE9wdGltaXplIGZvciB0aGUgY2FzZSBub2RlTmFtZSNpZE5hbWUK
CQkJCQl2YXIgcmUyID0gcXVpY2tJRDsKCQkJCQl2YXIgbSA9IHJlMi5leGVjKHQpOwoKCQkJCQkv
LyBSZS1vcmdhbml6ZSB0aGUgcmVzdWx0cywgc28gdGhhdCB0aGV5J3JlIGNvbnNpc3RlbnQKCQkJ
CQlpZiAoIG0gKSB7CgkJCQkJCW0gPSBbIDAsIG1bMl0sIG1bM10sIG1bMV0gXTsKCgkJCQkJfSBl
bHNlIHsKCQkJCQkJLy8gT3RoZXJ3aXNlLCBkbyBhIHRyYWRpdGlvbmFsIGZpbHRlciBjaGVjayBm
b3IKCQkJCQkJLy8gSUQsIGNsYXNzLCBhbmQgZWxlbWVudCBzZWxlY3RvcnMKCQkJCQkJcmUyID0g
cXVpY2tDbGFzczsKCQkJCQkJbSA9IHJlMi5leGVjKHQpOwoJCQkJCX0KCgkJCQkJbVsyXSA9IG1b
Ml0ucmVwbGFjZSgvXFwvZywgIiIpOwoKCQkJCQl2YXIgZWxlbSA9IHJldFtyZXQubGVuZ3RoLTFd
OwoKCQkJCQkvLyBUcnkgdG8gZG8gYSBnbG9iYWwgc2VhcmNoIGJ5IElELCB3aGVyZSB3ZSBjYW4K
CQkJCQlpZiAoIG1bMV0gPT0gIiMiICYmIGVsZW0gJiYgZWxlbS5nZXRFbGVtZW50QnlJZCAmJiAh
alF1ZXJ5LmlzWE1MRG9jKGVsZW0pICkgewoJCQkJCQkvLyBPcHRpbWl6YXRpb24gZm9yIEhUTUwg
ZG9jdW1lbnQgY2FzZQoJCQkJCQl2YXIgb2lkID0gZWxlbS5nZXRFbGVtZW50QnlJZChtWzJdKTsK
CgkJCQkJCS8vIERvIGEgcXVpY2sgY2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgdGhlIGFjdHVh
bCBJRCBhdHRyaWJ1dGUKCQkJCQkJLy8gdG8gYXZvaWQgc2VsZWN0aW5nIGJ5IHRoZSBuYW1lIGF0
dHJpYnV0ZSBpbiBJRQoJCQkJCQkvLyBhbHNvIGNoZWNrIHRvIGluc3VyZSBpZCBpcyBhIHN0cmlu
ZyB0byBhdm9pZCBzZWxlY3RpbmcgYW4gZWxlbWVudCB3aXRoIHRoZSBuYW1lIG9mICdpZCcgaW5z
aWRlIGEgZm9ybQoJCQkJCQlpZiAoIChqUXVlcnkuYnJvd3Nlci5tc2llfHxqUXVlcnkuYnJvd3Nl
ci5vcGVyYSkgJiYgb2lkICYmIHR5cGVvZiBvaWQuaWQgPT0gInN0cmluZyIgJiYgb2lkLmlkICE9
IG1bMl0gKQoJCQkJCQkJb2lkID0galF1ZXJ5KCdbQGlkPSInK21bMl0rJyJdJywgZWxlbSlbMF07
CgoJCQkJCQkvLyBEbyBhIHF1aWNrIGNoZWNrIGZvciBub2RlIG5hbWUgKHdoZXJlIGFwcGxpY2Fi
bGUpIHNvCgkJCQkJCS8vIHRoYXQgZGl2I2ZvbyBzZWFyY2hlcyB3aWxsIGJlIHJlYWxseSBmYXN0
CgkJCQkJCXJldCA9IHIgPSBvaWQgJiYgKCFtWzNdIHx8IGpRdWVyeS5ub2RlTmFtZShvaWQsIG1b
M10pKSA/IFtvaWRdIDogW107CgkJCQkJfSBlbHNlIHsKCQkJCQkJLy8gV2UgbmVlZCB0byBmaW5k
IGFsbCBkZXNjZW5kYW50IGVsZW1lbnRzCgkJCQkJCWZvciAoIHZhciBpID0gMDsgcmV0W2ldOyBp
KysgKSB7CgkJCQkJCQkvLyBHcmFiIHRoZSB0YWcgbmFtZSBiZWluZyBzZWFyY2hlZCBmb3IKCQkJ
CQkJCXZhciB0YWcgPSBtWzFdID09ICIjIiAmJiBtWzNdID8gbVszXSA6IG1bMV0gIT0gIiIgfHwg
bVswXSA9PSAiIiA/ICIqIiA6IG1bMl07CgoJCQkJCQkJLy8gSGFuZGxlIElFNyBiZWluZyByZWFs
bHkgZHVtYiBhYm91dCA8b2JqZWN0PnMKCQkJCQkJCWlmICggdGFnID09ICIqIiAmJiByZXRbaV0u
bm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSAib2JqZWN0IiApCgkJCQkJCQkJdGFnID0gInBhcmFt
IjsKCgkJCQkJCQlyID0galF1ZXJ5Lm1lcmdlKCByLCByZXRbaV0uZ2V0RWxlbWVudHNCeVRhZ05h
bWUoIHRhZyApKTsKCQkJCQkJfQoKCQkJCQkJLy8gSXQncyBmYXN0ZXIgdG8gZmlsdGVyIGJ5IGNs
YXNzIGFuZCBiZSBkb25lIHdpdGggaXQKCQkJCQkJaWYgKCBtWzFdID09ICIuIiApCgkJCQkJCQly
ID0galF1ZXJ5LmNsYXNzRmlsdGVyKCByLCBtWzJdICk7CgoJCQkJCQkvLyBTYW1lIHdpdGggSUQg
ZmlsdGVyaW5nCgkJCQkJCWlmICggbVsxXSA9PSAiIyIgKSB7CgkJCQkJCQl2YXIgdG1wID0gW107
CgoJCQkJCQkJLy8gVHJ5IHRvIGZpbmQgdGhlIGVsZW1lbnQgd2l0aCB0aGUgSUQKCQkJCQkJCWZv
ciAoIHZhciBpID0gMDsgcltpXTsgaSsrICkKCQkJCQkJCQlpZiAoIHJbaV0uZ2V0QXR0cmlidXRl
KCJpZCIpID09IG1bMl0gKSB7CgkJCQkJCQkJCXRtcCA9IFsgcltpXSBdOwoJCQkJCQkJCQlicmVh
azsKCQkJCQkJCQl9CgoJCQkJCQkJciA9IHRtcDsKCQkJCQkJfQoKCQkJCQkJcmV0ID0gcjsKCQkJ
CQl9CgoJCQkJCXQgPSB0LnJlcGxhY2UoIHJlMiwgIiIgKTsKCQkJCX0KCgkJCX0KCgkJCS8vIElm
IGEgc2VsZWN0b3Igc3RyaW5nIHN0aWxsIGV4aXN0cwoJCQlpZiAoIHQgKSB7CgkJCQkvLyBBdHRl
bXB0IHRvIGZpbHRlciBpdAoJCQkJdmFyIHZhbCA9IGpRdWVyeS5maWx0ZXIodCxyKTsKCQkJCXJl
dCA9IHIgPSB2YWwucjsKCQkJCXQgPSBqUXVlcnkudHJpbSh2YWwudCk7CgkJCX0KCQl9CgoJCS8v
IEFuIGVycm9yIG9jY3VycmVkIHdpdGggdGhlIHNlbGVjdG9yOwoJCS8vIGp1c3QgcmV0dXJuIGFu
IGVtcHR5IHNldCBpbnN0ZWFkCgkJaWYgKCB0ICkKCQkJcmV0ID0gW107CgoJCS8vIFJlbW92ZSB0
aGUgcm9vdCBjb250ZXh0CgkJaWYgKCByZXQgJiYgY29udGV4dCA9PSByZXRbMF0gKQoJCQlyZXQu
c2hpZnQoKTsKCgkJLy8gQW5kIGNvbWJpbmUgdGhlIHJlc3VsdHMKCQlkb25lID0galF1ZXJ5Lm1l
cmdlKCBkb25lLCByZXQgKTsKCgkJcmV0dXJuIGRvbmU7Cgl9LAoKCWNsYXNzRmlsdGVyOiBmdW5j
dGlvbihyLG0sbm90KXsKCQltID0gIiAiICsgbSArICIgIjsKCQl2YXIgdG1wID0gW107CgkJZm9y
ICggdmFyIGkgPSAwOyByW2ldOyBpKysgKSB7CgkJCXZhciBwYXNzID0gKCIgIiArIHJbaV0uY2xh
c3NOYW1lICsgIiAiKS5pbmRleE9mKCBtICkgPj0gMDsKCQkJaWYgKCAhbm90ICYmIHBhc3MgfHwg
bm90ICYmICFwYXNzICkKCQkJCXRtcC5wdXNoKCByW2ldICk7CgkJfQoJCXJldHVybiB0bXA7Cgl9
LAoKCWZpbHRlcjogZnVuY3Rpb24odCxyLG5vdCkgewoJCXZhciBsYXN0OwoKCQkvLyBMb29rIGZv
ciBjb21tb24gZmlsdGVyIGV4cHJlc3Npb25zCgkJd2hpbGUgKCB0ICYmIHQgIT0gbGFzdCApIHsK
CQkJbGFzdCA9IHQ7CgoJCQl2YXIgcCA9IGpRdWVyeS5wYXJzZSwgbTsKCgkJCWZvciAoIHZhciBp
ID0gMDsgcFtpXTsgaSsrICkgewoJCQkJbSA9IHBbaV0uZXhlYyggdCApOwoKCQkJCWlmICggbSAp
IHsKCQkJCQkvLyBSZW1vdmUgd2hhdCB3ZSBqdXN0IG1hdGNoZWQKCQkJCQl0ID0gdC5zdWJzdHJp
bmcoIG1bMF0ubGVuZ3RoICk7CgoJCQkJCW1bMl0gPSBtWzJdLnJlcGxhY2UoL1xcL2csICIiKTsK
CQkJCQlicmVhazsKCQkJCX0KCQkJfQoKCQkJaWYgKCAhbSApCgkJCQlicmVhazsKCgkJCS8vIDpu
b3QoKSBpcyBhIHNwZWNpYWwgY2FzZSB0aGF0IGNhbiBiZSBvcHRpbWl6ZWQgYnkKCQkJLy8ga2Vl
cGluZyBpdCBvdXQgb2YgdGhlIGV4cHJlc3Npb24gbGlzdAoJCQlpZiAoIG1bMV0gPT0gIjoiICYm
IG1bMl0gPT0gIm5vdCIgKQoJCQkJLy8gb3B0aW1pemUgaWYgb25seSBvbmUgc2VsZWN0b3IgZm91
bmQgKG1vc3QgY29tbW9uIGNhc2UpCgkJCQlyID0gaXNTaW1wbGUudGVzdCggbVszXSApID8KCQkJ
CQlqUXVlcnkuZmlsdGVyKG1bM10sIHIsIHRydWUpLnIgOgoJCQkJCWpRdWVyeSggciApLm5vdCgg
bVszXSApOwoKCQkJLy8gV2UgY2FuIGdldCBhIGJpZyBzcGVlZCBib29zdCBieSBmaWx0ZXJpbmcg
YnkgY2xhc3MgaGVyZQoJCQllbHNlIGlmICggbVsxXSA9PSAiLiIgKQoJCQkJciA9IGpRdWVyeS5j
bGFzc0ZpbHRlcihyLCBtWzJdLCBub3QpOwoKCQkJZWxzZSBpZiAoIG1bMV0gPT0gIlsiICkgewoJ
CQkJdmFyIHRtcCA9IFtdLCB0eXBlID0gbVszXTsKCgkJCQlmb3IgKCB2YXIgaSA9IDAsIHJsID0g
ci5sZW5ndGg7IGkgPCBybDsgaSsrICkgewoJCQkJCXZhciBhID0gcltpXSwgeiA9IGFbIGpRdWVy
eS5wcm9wc1ttWzJdXSB8fCBtWzJdIF07CgoJCQkJCWlmICggeiA9PSBudWxsIHx8IC9ocmVmfHNy
Y3xzZWxlY3RlZC8udGVzdChtWzJdKSApCgkJCQkJCXogPSBqUXVlcnkuYXR0cihhLG1bMl0pIHx8
ICcnOwoKCQkJCQlpZiAoICh0eXBlID09ICIiICYmICEheiB8fAoJCQkJCQkgdHlwZSA9PSAiPSIg
JiYgeiA9PSBtWzVdIHx8CgkJCQkJCSB0eXBlID09ICIhPSIgJiYgeiAhPSBtWzVdIHx8CgkJCQkJ
CSB0eXBlID09ICJePSIgJiYgeiAmJiAhei5pbmRleE9mKG1bNV0pIHx8CgkJCQkJCSB0eXBlID09
ICIkPSIgJiYgei5zdWJzdHIoei5sZW5ndGggLSBtWzVdLmxlbmd0aCkgPT0gbVs1XSB8fAoJCQkJ
CQkgKHR5cGUgPT0gIio9IiB8fCB0eXBlID09ICJ+PSIpICYmIHouaW5kZXhPZihtWzVdKSA+PSAw
KSBeIG5vdCApCgkJCQkJCQl0bXAucHVzaCggYSApOwoJCQkJfQoKCQkJCXIgPSB0bXA7CgoJCQkv
LyBXZSBjYW4gZ2V0IGEgc3BlZWQgYm9vc3QgYnkgaGFuZGxpbmcgbnRoLWNoaWxkIGhlcmUKCQkJ
fSBlbHNlIGlmICggbVsxXSA9PSAiOiIgJiYgbVsyXSA9PSAibnRoLWNoaWxkIiApIHsKCQkJCXZh
ciBtZXJnZSA9IHt9LCB0bXAgPSBbXSwKCQkJCQkvLyBwYXJzZSBlcXVhdGlvbnMgbGlrZSAnZXZl
bicsICdvZGQnLCAnNScsICcybicsICczbisyJywgJzRuLTEnLCAnLW4rNicKCQkJCQl0ZXN0ID0g
LygtPykoXGQqKW4oKD86XCt8LSk/XGQqKS8uZXhlYygKCQkJCQkJbVszXSA9PSAiZXZlbiIgJiYg
IjJuIiB8fCBtWzNdID09ICJvZGQiICYmICIybisxIiB8fAoJCQkJCQkhL1xELy50ZXN0KG1bM10p
ICYmICIwbisiICsgbVszXSB8fCBtWzNdKSwKCQkJCQkvLyBjYWxjdWxhdGUgdGhlIG51bWJlcnMg
KGZpcnN0KW4rKGxhc3QpIGluY2x1ZGluZyBpZiB0aGV5IGFyZSBuZWdhdGl2ZQoJCQkJCWZpcnN0
ID0gKHRlc3RbMV0gKyAodGVzdFsyXSB8fCAxKSkgLSAwLCBsYXN0ID0gdGVzdFszXSAtIDA7CgoJ
CQkJLy8gbG9vcCB0aHJvdWdoIGFsbCB0aGUgZWxlbWVudHMgbGVmdCBpbiB0aGUgalF1ZXJ5IG9i
amVjdAoJCQkJZm9yICggdmFyIGkgPSAwLCBybCA9IHIubGVuZ3RoOyBpIDwgcmw7IGkrKyApIHsK
CQkJCQl2YXIgbm9kZSA9IHJbaV0sIHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGUsIGlkID0g
alF1ZXJ5LmRhdGEocGFyZW50Tm9kZSk7CgoJCQkJCWlmICggIW1lcmdlW2lkXSApIHsKCQkJCQkJ
dmFyIGMgPSAxOwoKCQkJCQkJZm9yICggdmFyIG4gPSBwYXJlbnROb2RlLmZpcnN0Q2hpbGQ7IG47
IG4gPSBuLm5leHRTaWJsaW5nICkKCQkJCQkJCWlmICggbi5ub2RlVHlwZSA9PSAxICkKCQkJCQkJ
CQluLm5vZGVJbmRleCA9IGMrKzsKCgkJCQkJCW1lcmdlW2lkXSA9IHRydWU7CgkJCQkJfQoKCQkJ
CQl2YXIgYWRkID0gZmFsc2U7CgoJCQkJCWlmICggZmlyc3QgPT0gMCApIHsKCQkJCQkJaWYgKCBu
b2RlLm5vZGVJbmRleCA9PSBsYXN0ICkKCQkJCQkJCWFkZCA9IHRydWU7CgkJCQkJfSBlbHNlIGlm
ICggKG5vZGUubm9kZUluZGV4IC0gbGFzdCkgJSBmaXJzdCA9PSAwICYmIChub2RlLm5vZGVJbmRl
eCAtIGxhc3QpIC8gZmlyc3QgPj0gMCApCgkJCQkJCWFkZCA9IHRydWU7CgoJCQkJCWlmICggYWRk
IF4gbm90ICkKCQkJCQkJdG1wLnB1c2goIG5vZGUgKTsKCQkJCX0KCgkJCQlyID0gdG1wOwoKCQkJ
Ly8gT3RoZXJ3aXNlLCBmaW5kIHRoZSBleHByZXNzaW9uIHRvIGV4ZWN1dGUKCQkJfSBlbHNlIHsK
CQkJCXZhciBmbiA9IGpRdWVyeS5leHByWyBtWzFdIF07CgkJCQlpZiAoIHR5cGVvZiBmbiA9PSAi
b2JqZWN0IiApCgkJCQkJZm4gPSBmblsgbVsyXSBdOwoKCQkJCWlmICggdHlwZW9mIGZuID09ICJz
dHJpbmciICkKCQkJCQlmbiA9IGV2YWwoImZhbHNlfHxmdW5jdGlvbihhLGkpe3JldHVybiAiICsg
Zm4gKyAiO30iKTsKCgkJCQkvLyBFeGVjdXRlIGl0IGFnYWluc3QgdGhlIGN1cnJlbnQgZmlsdGVy
CgkJCQlyID0galF1ZXJ5LmdyZXAoIHIsIGZ1bmN0aW9uKGVsZW0sIGkpewoJCQkJCXJldHVybiBm
bihlbGVtLCBpLCBtLCByKTsKCQkJCX0sIG5vdCApOwoJCQl9CgkJfQoKCQkvLyBSZXR1cm4gYW4g
YXJyYXkgb2YgZmlsdGVyZWQgZWxlbWVudHMgKHIpCgkJLy8gYW5kIHRoZSBtb2RpZmllZCBleHBy
ZXNzaW9uIHN0cmluZyAodCkKCQlyZXR1cm4geyByOiByLCB0OiB0IH07Cgl9LAoKCWRpcjogZnVu
Y3Rpb24oIGVsZW0sIGRpciApewoJCXZhciBtYXRjaGVkID0gW10sCgkJCWN1ciA9IGVsZW1bZGly
XTsKCQl3aGlsZSAoIGN1ciAmJiBjdXIgIT0gZG9jdW1lbnQgKSB7CgkJCWlmICggY3VyLm5vZGVU
eXBlID09IDEgKQoJCQkJbWF0Y2hlZC5wdXNoKCBjdXIgKTsKCQkJY3VyID0gY3VyW2Rpcl07CgkJ
fQoJCXJldHVybiBtYXRjaGVkOwoJfSwKCgludGg6IGZ1bmN0aW9uKGN1cixyZXN1bHQsZGlyLGVs
ZW0pewoJCXJlc3VsdCA9IHJlc3VsdCB8fCAxOwoJCXZhciBudW0gPSAwOwoKCQlmb3IgKCA7IGN1
cjsgY3VyID0gY3VyW2Rpcl0gKQoJCQlpZiAoIGN1ci5ub2RlVHlwZSA9PSAxICYmICsrbnVtID09
IHJlc3VsdCApCgkJCQlicmVhazsKCgkJcmV0dXJuIGN1cjsKCX0sCgoJc2libGluZzogZnVuY3Rp
b24oIG4sIGVsZW0gKSB7CgkJdmFyIHIgPSBbXTsKCgkJZm9yICggOyBuOyBuID0gbi5uZXh0U2li
bGluZyApIHsKCQkJaWYgKCBuLm5vZGVUeXBlID09IDEgJiYgbiAhPSBlbGVtICkKCQkJCXIucHVz
aCggbiApOwoJCX0KCgkJcmV0dXJuIHI7Cgl9Cn0pOwovKgogKiBBIG51bWJlciBvZiBoZWxwZXIg
ZnVuY3Rpb25zIHVzZWQgZm9yIG1hbmFnaW5nIGV2ZW50cy4KICogTWFueSBvZiB0aGUgaWRlYXMg
YmVoaW5kIHRoaXMgY29kZSBvcmlnbmF0ZWQgZnJvbQogKiBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50
IGxpYnJhcnkuCiAqLwpqUXVlcnkuZXZlbnQgPSB7CgoJLy8gQmluZCBhbiBldmVudCB0byBhbiBl
bGVtZW50CgkvLyBPcmlnaW5hbCBieSBEZWFuIEVkd2FyZHMKCWFkZDogZnVuY3Rpb24oZWxlbSwg
dHlwZXMsIGhhbmRsZXIsIGRhdGEpIHsKCQlpZiAoIGVsZW0ubm9kZVR5cGUgPT0gMyB8fCBlbGVt
Lm5vZGVUeXBlID09IDggKQoJCQlyZXR1cm47CgoJCS8vIEZvciB3aGF0ZXZlciByZWFzb24sIElF
IGhhcyB0cm91YmxlIHBhc3NpbmcgdGhlIHdpbmRvdyBvYmplY3QKCQkvLyBhcm91bmQsIGNhdXNp
bmcgaXQgdG8gYmUgY2xvbmVkIGluIHRoZSBwcm9jZXNzCgkJaWYgKCBqUXVlcnkuYnJvd3Nlci5t
c2llICYmIGVsZW0uc2V0SW50ZXJ2YWwgKQoJCQllbGVtID0gd2luZG93OwoKCQkvLyBNYWtlIHN1
cmUgdGhhdCB0aGUgZnVuY3Rpb24gYmVpbmcgZXhlY3V0ZWQgaGFzIGEgdW5pcXVlIElECgkJaWYg
KCAhaGFuZGxlci5ndWlkICkKCQkJaGFuZGxlci5ndWlkID0gdGhpcy5ndWlkKys7CgoJCS8vIGlm
IGRhdGEgaXMgcGFzc2VkLCBiaW5kIHRvIGhhbmRsZXIKCQlpZiggZGF0YSAhPSB1bmRlZmluZWQg
KSB7CgkJCS8vIENyZWF0ZSB0ZW1wb3JhcnkgZnVuY3Rpb24gcG9pbnRlciB0byBvcmlnaW5hbCBo
YW5kbGVyCgkJCXZhciBmbiA9IGhhbmRsZXI7CgoJCQkvLyBDcmVhdGUgdW5pcXVlIGhhbmRsZXIg
ZnVuY3Rpb24sIHdyYXBwZWQgYXJvdW5kIG9yaWdpbmFsIGhhbmRsZXIKCQkJaGFuZGxlciA9IHRo
aXMucHJveHkoIGZuLCBmdW5jdGlvbigpIHsKCQkJCS8vIFBhc3MgYXJndW1lbnRzIGFuZCBjb250
ZXh0IHRvIG9yaWdpbmFsIGhhbmRsZXIKCQkJCXJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVu
dHMpOwoJCQl9KTsKCgkJCS8vIFN0b3JlIGRhdGEgaW4gdW5pcXVlIGhhbmRsZXIKCQkJaGFuZGxl
ci5kYXRhID0gZGF0YTsKCQl9CgoJCS8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1
cmUKCQl2YXIgZXZlbnRzID0galF1ZXJ5LmRhdGEoZWxlbSwgImV2ZW50cyIpIHx8IGpRdWVyeS5k
YXRhKGVsZW0sICJldmVudHMiLCB7fSksCgkJCWhhbmRsZSA9IGpRdWVyeS5kYXRhKGVsZW0sICJo
YW5kbGUiKSB8fCBqUXVlcnkuZGF0YShlbGVtLCAiaGFuZGxlIiwgZnVuY3Rpb24oKXsKCQkJCS8v
IEhhbmRsZSB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgdHJpZ2dlciBhbmQgd2hlbgoJCQkJLy8gYW4g
ZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWQKCQkJCWlmICggdHlwZW9m
IGpRdWVyeSAhPSAidW5kZWZpbmVkIiAmJiAhalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApCgkJCQkJ
cmV0dXJuIGpRdWVyeS5ldmVudC5oYW5kbGUuYXBwbHkoYXJndW1lbnRzLmNhbGxlZS5lbGVtLCBh
cmd1bWVudHMpOwoJCQl9KTsKCQkvLyBBZGQgZWxlbSBhcyBhIHByb3BlcnR5IG9mIHRoZSBoYW5k
bGUgZnVuY3Rpb24KCQkvLyBUaGlzIGlzIHRvIHByZXZlbnQgYSBtZW1vcnkgbGVhayB3aXRoIG5v
bi1uYXRpdmUKCQkvLyBldmVudCBpbiBJRS4KCQloYW5kbGUuZWxlbSA9IGVsZW07CgoJCS8vIEhh
bmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2UKCQkvLyBqUXVlcnkoLi4u
KS5iaW5kKCJtb3VzZW92ZXIgbW91c2VvdXQiLCBmbik7CgkJalF1ZXJ5LmVhY2godHlwZXMuc3Bs
aXQoL1xzKy8pLCBmdW5jdGlvbihpbmRleCwgdHlwZSkgewoJCQkvLyBOYW1lc3BhY2VkIGV2ZW50
IGhhbmRsZXJzCgkJCXZhciBwYXJ0cyA9IHR5cGUuc3BsaXQoIi4iKTsKCQkJdHlwZSA9IHBhcnRz
WzBdOwoJCQloYW5kbGVyLnR5cGUgPSBwYXJ0c1sxXTsKCgkJCS8vIEdldCB0aGUgY3VycmVudCBs
aXN0IG9mIGZ1bmN0aW9ucyBib3VuZCB0byB0aGlzIGV2ZW50CgkJCXZhciBoYW5kbGVycyA9IGV2
ZW50c1t0eXBlXTsKCgkJCS8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUKCQkJaWYgKCFo
YW5kbGVycykgewoJCQkJaGFuZGxlcnMgPSBldmVudHNbdHlwZV0gPSB7fTsKCgkJCQkvLyBDaGVj
ayBmb3IgYSBzcGVjaWFsIGV2ZW50IGhhbmRsZXIKCQkJCS8vIE9ubHkgdXNlIGFkZEV2ZW50TGlz
dGVuZXIvYXR0YWNoRXZlbnQgaWYgdGhlIHNwZWNpYWwKCQkJCS8vIGV2ZW50cyBoYW5kbGVyIHJl
dHVybnMgZmFsc2UKCQkJCWlmICggIWpRdWVyeS5ldmVudC5zcGVjaWFsW3R5cGVdIHx8IGpRdWVy
eS5ldmVudC5zcGVjaWFsW3R5cGVdLnNldHVwLmNhbGwoZWxlbSkgPT09IGZhbHNlICkgewoJCQkJ
CS8vIEJpbmQgdGhlIGdsb2JhbCBldmVudCBoYW5kbGVyIHRvIHRoZSBlbGVtZW50CgkJCQkJaWYg
KGVsZW0uYWRkRXZlbnRMaXN0ZW5lcikKCQkJCQkJZWxlbS5hZGRFdmVudExpc3RlbmVyKHR5cGUs
IGhhbmRsZSwgZmFsc2UpOwoJCQkJCWVsc2UgaWYgKGVsZW0uYXR0YWNoRXZlbnQpCgkJCQkJCWVs
ZW0uYXR0YWNoRXZlbnQoIm9uIiArIHR5cGUsIGhhbmRsZSk7CgkJCQl9CgkJCX0KCgkJCS8vIEFk
ZCB0aGUgZnVuY3Rpb24gdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QKCQkJaGFuZGxlcnNb
aGFuZGxlci5ndWlkXSA9IGhhbmRsZXI7CgoJCQkvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50
cyBoYXZlIGJlZW4gdXNlZCwgZm9yIGdsb2JhbCB0cmlnZ2VyaW5nCgkJCWpRdWVyeS5ldmVudC5n
bG9iYWxbdHlwZV0gPSB0cnVlOwoJCX0pOwoKCQkvLyBOdWxsaWZ5IGVsZW0gdG8gcHJldmVudCBt
ZW1vcnkgbGVha3MgaW4gSUUKCQllbGVtID0gbnVsbDsKCX0sCgoJZ3VpZDogMSwKCWdsb2JhbDog
e30sCgoJLy8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50
CglyZW1vdmU6IGZ1bmN0aW9uKGVsZW0sIHR5cGVzLCBoYW5kbGVyKSB7CgkJLy8gZG9uJ3QgZG8g
ZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXMKCQlpZiAoIGVsZW0ubm9kZVR5cGUgPT0g
MyB8fCBlbGVtLm5vZGVUeXBlID09IDggKQoJCQlyZXR1cm47CgoJCXZhciBldmVudHMgPSBqUXVl
cnkuZGF0YShlbGVtLCAiZXZlbnRzIiksIHJldCwgaW5kZXg7CgoJCWlmICggZXZlbnRzICkgewoJ
CQkvLyBVbmJpbmQgYWxsIGV2ZW50cyBmb3IgdGhlIGVsZW1lbnQKCQkJaWYgKCB0eXBlcyA9PSB1
bmRlZmluZWQgfHwgKHR5cGVvZiB0eXBlcyA9PSAic3RyaW5nIiAmJiB0eXBlcy5jaGFyQXQoMCkg
PT0gIi4iKSApCgkJCQlmb3IgKCB2YXIgdHlwZSBpbiBldmVudHMgKQoJCQkJCXRoaXMucmVtb3Zl
KCBlbGVtLCB0eXBlICsgKHR5cGVzIHx8ICIiKSApOwoJCQllbHNlIHsKCQkJCS8vIHR5cGVzIGlz
IGFjdHVhbGx5IGFuIGV2ZW50IG9iamVjdCBoZXJlCgkJCQlpZiAoIHR5cGVzLnR5cGUgKSB7CgkJ
CQkJaGFuZGxlciA9IHR5cGVzLmhhbmRsZXI7CgkJCQkJdHlwZXMgPSB0eXBlcy50eXBlOwoJCQkJ
fQoKCQkJCS8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwZXJhdGVkIGJ5IGEgc3BhY2UKCQkJ
CS8vIGpRdWVyeSguLi4pLnVuYmluZCgibW91c2VvdmVyIG1vdXNlb3V0IiwgZm4pOwoJCQkJalF1
ZXJ5LmVhY2godHlwZXMuc3BsaXQoL1xzKy8pLCBmdW5jdGlvbihpbmRleCwgdHlwZSl7CgkJCQkJ
Ly8gTmFtZXNwYWNlZCBldmVudCBoYW5kbGVycwoJCQkJCXZhciBwYXJ0cyA9IHR5cGUuc3BsaXQo
Ii4iKTsKCQkJCQl0eXBlID0gcGFydHNbMF07CgoJCQkJCWlmICggZXZlbnRzW3R5cGVdICkgewoJ
CQkJCQkvLyByZW1vdmUgdGhlIGdpdmVuIGhhbmRsZXIgZm9yIHRoZSBnaXZlbiB0eXBlCgkJCQkJ
CWlmICggaGFuZGxlciApCgkJCQkJCQlkZWxldGUgZXZlbnRzW3R5cGVdW2hhbmRsZXIuZ3VpZF07
CgoJCQkJCQkvLyByZW1vdmUgYWxsIGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gdHlwZQoJCQkJCQll
bHNlCgkJCQkJCQlmb3IgKCBoYW5kbGVyIGluIGV2ZW50c1t0eXBlXSApCgkJCQkJCQkJLy8gSGFu
ZGxlIHRoZSByZW1vdmFsIG9mIG5hbWVzcGFjZWQgZXZlbnRzCgkJCQkJCQkJaWYgKCAhcGFydHNb
MV0gfHwgZXZlbnRzW3R5cGVdW2hhbmRsZXJdLnR5cGUgPT0gcGFydHNbMV0gKQoJCQkJCQkJCQlk
ZWxldGUgZXZlbnRzW3R5cGVdW2hhbmRsZXJdOwoKCQkJCQkJLy8gcmVtb3ZlIGdlbmVyaWMgZXZl
bnQgaGFuZGxlciBpZiBubyBtb3JlIGhhbmRsZXJzIGV4aXN0CgkJCQkJCWZvciAoIHJldCBpbiBl
dmVudHNbdHlwZV0gKSBicmVhazsKCQkJCQkJaWYgKCAhcmV0ICkgewoJCQkJCQkJaWYgKCAhalF1
ZXJ5LmV2ZW50LnNwZWNpYWxbdHlwZV0gfHwgalF1ZXJ5LmV2ZW50LnNwZWNpYWxbdHlwZV0udGVh
cmRvd24uY2FsbChlbGVtKSA9PT0gZmFsc2UgKSB7CgkJCQkJCQkJaWYgKGVsZW0ucmVtb3ZlRXZl
bnRMaXN0ZW5lcikKCQkJCQkJCQkJZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGpRdWVy
eS5kYXRhKGVsZW0sICJoYW5kbGUiKSwgZmFsc2UpOwoJCQkJCQkJCWVsc2UgaWYgKGVsZW0uZGV0
YWNoRXZlbnQpCgkJCQkJCQkJCWVsZW0uZGV0YWNoRXZlbnQoIm9uIiArIHR5cGUsIGpRdWVyeS5k
YXRhKGVsZW0sICJoYW5kbGUiKSk7CgkJCQkJCQl9CgkJCQkJCQlyZXQgPSBudWxsOwoJCQkJCQkJ
ZGVsZXRlIGV2ZW50c1t0eXBlXTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0pOwoJCQl9CgoJCQkvLyBS
ZW1vdmUgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZAoJCQlmb3IgKCByZXQgaW4g
ZXZlbnRzICkgYnJlYWs7CgkJCWlmICggIXJldCApIHsKCQkJCXZhciBoYW5kbGUgPSBqUXVlcnku
ZGF0YSggZWxlbSwgImhhbmRsZSIgKTsKCQkJCWlmICggaGFuZGxlICkgaGFuZGxlLmVsZW0gPSBu
dWxsOwoJCQkJalF1ZXJ5LnJlbW92ZURhdGEoIGVsZW0sICJldmVudHMiICk7CgkJCQlqUXVlcnku
cmVtb3ZlRGF0YSggZWxlbSwgImhhbmRsZSIgKTsKCQkJfQoJCX0KCX0sCgoJdHJpZ2dlcjogZnVu
Y3Rpb24odHlwZSwgZGF0YSwgZWxlbSwgZG9uYXRpdmUsIGV4dHJhKSB7CgkJLy8gQ2xvbmUgdGhl
IGluY29taW5nIGRhdGEsIGlmIGFueQoJCWRhdGEgPSBqUXVlcnkubWFrZUFycmF5KGRhdGEpOwoK
CQlpZiAoIHR5cGUuaW5kZXhPZigiISIpID49IDAgKSB7CgkJCXR5cGUgPSB0eXBlLnNsaWNlKDAs
IC0xKTsKCQkJdmFyIGV4Y2x1c2l2ZSA9IHRydWU7CgkJfQoKCQkvLyBIYW5kbGUgYSBnbG9iYWwg
dHJpZ2dlcgoJCWlmICggIWVsZW0gKSB7CgkJCS8vIE9ubHkgdHJpZ2dlciBpZiB3ZSd2ZSBldmVy
IGJvdW5kIGFuIGV2ZW50IGZvciBpdAoJCQlpZiAoIHRoaXMuZ2xvYmFsW3R5cGVdICkKCQkJCWpR
dWVyeSgiKiIpLmFkZChbd2luZG93LCBkb2N1bWVudF0pLnRyaWdnZXIodHlwZSwgZGF0YSk7CgoJ
CS8vIEhhbmRsZSB0cmlnZ2VyaW5nIGEgc2luZ2xlIGVsZW1lbnQKCQl9IGVsc2UgewoJCQkvLyBk
b24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2RlcwoJCQlpZiAoIGVsZW0ubm9k
ZVR5cGUgPT0gMyB8fCBlbGVtLm5vZGVUeXBlID09IDggKQoJCQkJcmV0dXJuIHVuZGVmaW5lZDsK
CgkJCXZhciB2YWwsIHJldCwgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdIHx8
IG51bGwgKSwKCQkJCS8vIENoZWNrIHRvIHNlZSBpZiB3ZSBuZWVkIHRvIHByb3ZpZGUgYSBmYWtl
IGV2ZW50LCBvciBub3QKCQkJCWV2ZW50ID0gIWRhdGFbMF0gfHwgIWRhdGFbMF0ucHJldmVudERl
ZmF1bHQ7CgoJCQkvLyBQYXNzIGFsb25nIGEgZmFrZSBldmVudAoJCQlpZiAoIGV2ZW50ICkgewoJ
CQkJZGF0YS51bnNoaWZ0KHsKCQkJCQl0eXBlOiB0eXBlLAoJCQkJCXRhcmdldDogZWxlbSwKCQkJ
CQlwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKXt9LAoJCQkJCXN0b3BQcm9wYWdhdGlvbjogZnVu
Y3Rpb24oKXt9LAoJCQkJCXRpbWVTdGFtcDogbm93KCkKCQkJCX0pOwoJCQkJZGF0YVswXVtleHBh
bmRvXSA9IHRydWU7IC8vIG5vIG5lZWQgdG8gZml4IGZha2UgZXZlbnQKCQkJfQoKCQkJLy8gRW5m
b3JjZSB0aGUgcmlnaHQgdHJpZ2dlciB0eXBlCgkJCWRhdGFbMF0udHlwZSA9IHR5cGU7CgkJCWlm
ICggZXhjbHVzaXZlICkKCQkJCWRhdGFbMF0uZXhjbHVzaXZlID0gdHJ1ZTsKCgkJCS8vIFRyaWdn
ZXIgdGhlIGV2ZW50LCBpdCBpcyBhc3N1bWVkIHRoYXQgImhhbmRsZSIgaXMgYSBmdW5jdGlvbgoJ
CQl2YXIgaGFuZGxlID0galF1ZXJ5LmRhdGEoZWxlbSwgImhhbmRsZSIpOwoJCQlpZiAoIGhhbmRs
ZSApCgkJCQl2YWwgPSBoYW5kbGUuYXBwbHkoIGVsZW0sIGRhdGEgKTsKCgkJCS8vIEhhbmRsZSB0
cmlnZ2VyaW5nIG5hdGl2ZSAub25mb28gaGFuZGxlcnMgKGFuZCBvbiBsaW5rcyBzaW5jZSB3ZSBk
b24ndCBjYWxsIC5jbGljaygpIGZvciBsaW5rcykKCQkJaWYgKCAoIWZuIHx8IChqUXVlcnkubm9k
ZU5hbWUoZWxlbSwgJ2EnKSAmJiB0eXBlID09ICJjbGljayIpKSAmJiBlbGVtWyJvbiIrdHlwZV0g
JiYgZWxlbVsib24iK3R5cGVdLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkKCQkJCXZh
bCA9IGZhbHNlOwoKCQkJLy8gRXh0cmEgZnVuY3Rpb25zIGRvbid0IGdldCB0aGUgY3VzdG9tIGV2
ZW50IG9iamVjdAoJCQlpZiAoIGV2ZW50ICkKCQkJCWRhdGEuc2hpZnQoKTsKCgkJCS8vIEhhbmRs
ZSB0cmlnZ2VyaW5nIG9mIGV4dHJhIGZ1bmN0aW9uCgkJCWlmICggZXh0cmEgJiYgalF1ZXJ5Lmlz
RnVuY3Rpb24oIGV4dHJhICkgKSB7CgkJCQkvLyBjYWxsIHRoZSBleHRyYSBmdW5jdGlvbiBhbmQg
dGFjayB0aGUgY3VycmVudCByZXR1cm4gdmFsdWUgb24gdGhlIGVuZCBmb3IgcG9zc2libGUgaW5z
cGVjdGlvbgoJCQkJcmV0ID0gZXh0cmEuYXBwbHkoIGVsZW0sIHZhbCA9PSBudWxsID8gZGF0YSA6
IGRhdGEuY29uY2F0KCB2YWwgKSApOwoJCQkJLy8gaWYgYW55dGhpbmcgaXMgcmV0dXJuZWQsIGdp
dmUgaXQgcHJlY2VkZW5jZSBhbmQgaGF2ZSBpdCBvdmVyd3JpdGUgdGhlIHByZXZpb3VzIHZhbHVl
CgkJCQlpZiAocmV0ICE9PSB1bmRlZmluZWQpCgkJCQkJdmFsID0gcmV0OwoJCQl9CgoJCQkvLyBU
cmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnRzIChleGNlcHQgZm9yIGNsaWNrcyBvbiBsaW5rcykKCQkJ
aWYgKCBmbiAmJiBkb25hdGl2ZSAhPT0gZmFsc2UgJiYgdmFsICE9PSBmYWxzZSAmJiAhKGpRdWVy
eS5ub2RlTmFtZShlbGVtLCAnYScpICYmIHR5cGUgPT0gImNsaWNrIikgKSB7CgkJCQl0aGlzLnRy
aWdnZXJlZCA9IHRydWU7CgkJCQl0cnkgewoJCQkJCWVsZW1bIHR5cGUgXSgpOwoJCQkJLy8gcHJl
dmVudCBJRSBmcm9tIHRocm93aW5nIGFuIGVycm9yIGZvciBzb21lIGhpZGRlbiBlbGVtZW50cwoJ
CQkJfSBjYXRjaCAoZSkge30KCQkJfQoKCQkJdGhpcy50cmlnZ2VyZWQgPSBmYWxzZTsKCQl9CgoJ
CXJldHVybiB2YWw7Cgl9LAoKCWhhbmRsZTogZnVuY3Rpb24oZXZlbnQpIHsKCQkvLyByZXR1cm5l
ZCB1bmRlZmluZWQgb3IgZmFsc2UKCQl2YXIgdmFsLCByZXQsIG5hbWVzcGFjZSwgYWxsLCBoYW5k
bGVyczsKCgkJZXZlbnQgPSBhcmd1bWVudHNbMF0gPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCB8
fCB3aW5kb3cuZXZlbnQgKTsKCgkJLy8gTmFtZXNwYWNlZCBldmVudCBoYW5kbGVycwoJCW5hbWVz
cGFjZSA9IGV2ZW50LnR5cGUuc3BsaXQoIi4iKTsKCQlldmVudC50eXBlID0gbmFtZXNwYWNlWzBd
OwoJCW5hbWVzcGFjZSA9IG5hbWVzcGFjZVsxXTsKCQkvLyBDYWNoZSB0aGlzIG5vdywgYWxsID0g
dHJ1ZSBtZWFucywgYW55IGhhbmRsZXIKCQlhbGwgPSAhbmFtZXNwYWNlICYmICFldmVudC5leGNs
dXNpdmU7CgoJCWhhbmRsZXJzID0gKCBqUXVlcnkuZGF0YSh0aGlzLCAiZXZlbnRzIikgfHwge30g
KVtldmVudC50eXBlXTsKCgkJZm9yICggdmFyIGogaW4gaGFuZGxlcnMgKSB7CgkJCXZhciBoYW5k
bGVyID0gaGFuZGxlcnNbal07CgoJCQkvLyBGaWx0ZXIgdGhlIGZ1bmN0aW9ucyBieSBjbGFzcwoJ
CQlpZiAoIGFsbCB8fCBoYW5kbGVyLnR5cGUgPT0gbmFtZXNwYWNlICkgewoJCQkJLy8gUGFzcyBp
biBhIHJlZmVyZW5jZSB0byB0aGUgaGFuZGxlciBmdW5jdGlvbiBpdHNlbGYKCQkJCS8vIFNvIHRo
YXQgd2UgY2FuIGxhdGVyIHJlbW92ZSBpdAoJCQkJZXZlbnQuaGFuZGxlciA9IGhhbmRsZXI7CgkJ
CQlldmVudC5kYXRhID0gaGFuZGxlci5kYXRhOwoKCQkJCXJldCA9IGhhbmRsZXIuYXBwbHkoIHRo
aXMsIGFyZ3VtZW50cyApOwoKCQkJCWlmICggdmFsICE9PSBmYWxzZSApCgkJCQkJdmFsID0gcmV0
OwoKCQkJCWlmICggcmV0ID09PSBmYWxzZSApIHsKCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgp
OwoJCQkJCWV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwoJCQkJfQoJCQl9CgkJfQoKCQlyZXR1cm4g
dmFsOwoJfSwKCglmaXg6IGZ1bmN0aW9uKGV2ZW50KSB7CgkJaWYgKCBldmVudFtleHBhbmRvXSA9
PSB0cnVlICkKCQkJcmV0dXJuIGV2ZW50OwoKCQkvLyBzdG9yZSBhIGNvcHkgb2YgdGhlIG9yaWdp
bmFsIGV2ZW50IG9iamVjdAoJCS8vIGFuZCAiY2xvbmUiIHRvIHNldCByZWFkLW9ubHkgcHJvcGVy
dGllcwoJCXZhciBvcmlnaW5hbEV2ZW50ID0gZXZlbnQ7CgkJZXZlbnQgPSB7IG9yaWdpbmFsRXZl
bnQ6IG9yaWdpbmFsRXZlbnQgfTsKCQl2YXIgcHJvcHMgPSAiYWx0S2V5IGF0dHJDaGFuZ2UgYXR0
ck5hbWUgYnViYmxlcyBidXR0b24gY2FuY2VsYWJsZSBjaGFyQ29kZSBjbGllbnRYIGNsaWVudFkg
Y3RybEtleSBjdXJyZW50VGFyZ2V0IGRhdGEgZGV0YWlsIGV2ZW50UGhhc2UgZnJvbUVsZW1lbnQg
aGFuZGxlciBrZXlDb2RlIG1ldGFLZXkgbmV3VmFsdWUgb3JpZ2luYWxUYXJnZXQgcGFnZVggcGFn
ZVkgcHJldlZhbHVlIHJlbGF0ZWROb2RlIHJlbGF0ZWRUYXJnZXQgc2NyZWVuWCBzY3JlZW5ZIHNo
aWZ0S2V5IHNyY0VsZW1lbnQgdGFyZ2V0IHRpbWVTdGFtcCB0b0VsZW1lbnQgdHlwZSB2aWV3IHdo
ZWVsRGVsdGEgd2hpY2giLnNwbGl0KCIgIik7CgkJZm9yICggdmFyIGk9cHJvcHMubGVuZ3RoOyBp
OyBpLS0gKQoJCQlldmVudFsgcHJvcHNbaV0gXSA9IG9yaWdpbmFsRXZlbnRbIHByb3BzW2ldIF07
CgoJCS8vIE1hcmsgaXQgYXMgZml4ZWQKCQlldmVudFtleHBhbmRvXSA9IHRydWU7CgoJCS8vIGFk
ZCBwcmV2ZW50RGVmYXVsdCBhbmQgc3RvcFByb3BhZ2F0aW9uIHNpbmNlCgkJLy8gdGhleSB3aWxs
IG5vdCB3b3JrIG9uIHRoZSBjbG9uZQoJCWV2ZW50LnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24o
KSB7CgkJCS8vIGlmIHByZXZlbnREZWZhdWx0IGV4aXN0cyBydW4gaXQgb24gdGhlIG9yaWdpbmFs
IGV2ZW50CgkJCWlmIChvcmlnaW5hbEV2ZW50LnByZXZlbnREZWZhdWx0KQoJCQkJb3JpZ2luYWxF
dmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkvLyBvdGhlcndpc2Ugc2V0IHRoZSByZXR1cm5WYWx1
ZSBwcm9wZXJ0eSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQgdG8gZmFsc2UgKElFKQoJCQlvcmlnaW5h
bEV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7CgkJfTsKCQlldmVudC5zdG9wUHJvcGFnYXRpb24g
PSBmdW5jdGlvbigpIHsKCQkJLy8gaWYgc3RvcFByb3BhZ2F0aW9uIGV4aXN0cyBydW4gaXQgb24g
dGhlIG9yaWdpbmFsIGV2ZW50CgkJCWlmIChvcmlnaW5hbEV2ZW50LnN0b3BQcm9wYWdhdGlvbikK
CQkJCW9yaWdpbmFsRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CgkJCS8vIG90aGVyd2lzZSBzZXQg
dGhlIGNhbmNlbEJ1YmJsZSBwcm9wZXJ0eSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQgdG8gdHJ1ZSAo
SUUpCgkJCW9yaWdpbmFsRXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTsKCQl9OwoKCQkvLyBGaXgg
dGltZVN0YW1wCgkJZXZlbnQudGltZVN0YW1wID0gZXZlbnQudGltZVN0YW1wIHx8IG5vdygpOwoK
CQkvLyBGaXggdGFyZ2V0IHByb3BlcnR5LCBpZiBuZWNlc3NhcnkKCQlpZiAoICFldmVudC50YXJn
ZXQgKQoJCQlldmVudC50YXJnZXQgPSBldmVudC5zcmNFbGVtZW50IHx8IGRvY3VtZW50OyAvLyBG
aXhlcyAjMTkyNSB3aGVyZSBzcmNFbGVtZW50IG1pZ2h0IG5vdCBiZSBkZWZpbmVkIGVpdGhlcgoK
CQkvLyBjaGVjayBpZiB0YXJnZXQgaXMgYSB0ZXh0bm9kZSAoc2FmYXJpKQoJCWlmICggZXZlbnQu
dGFyZ2V0Lm5vZGVUeXBlID09IDMgKQoJCQlldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQucGFy
ZW50Tm9kZTsKCgkJLy8gQWRkIHJlbGF0ZWRUYXJnZXQsIGlmIG5lY2Vzc2FyeQoJCWlmICggIWV2
ZW50LnJlbGF0ZWRUYXJnZXQgJiYgZXZlbnQuZnJvbUVsZW1lbnQgKQoJCQlldmVudC5yZWxhdGVk
VGFyZ2V0ID0gZXZlbnQuZnJvbUVsZW1lbnQgPT0gZXZlbnQudGFyZ2V0ID8gZXZlbnQudG9FbGVt
ZW50IDogZXZlbnQuZnJvbUVsZW1lbnQ7CgoJCS8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3Np
bmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGUKCQlpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYg
ZXZlbnQuY2xpZW50WCAhPSBudWxsICkgewoJCQl2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRF
bGVtZW50LCBib2R5ID0gZG9jdW1lbnQuYm9keTsKCQkJZXZlbnQucGFnZVggPSBldmVudC5jbGll
bnRYICsgKGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8
fCAwKSAtIChkb2MuY2xpZW50TGVmdCB8fCAwKTsKCQkJZXZlbnQucGFnZVkgPSBldmVudC5jbGll
bnRZICsgKGRvYyAmJiBkb2Muc2Nyb2xsVG9wIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgfHwg
MCkgLSAoZG9jLmNsaWVudFRvcCB8fCAwKTsKCQl9CgoJCS8vIEFkZCB3aGljaCBmb3Iga2V5IGV2
ZW50cwoJCWlmICggIWV2ZW50LndoaWNoICYmICgoZXZlbnQuY2hhckNvZGUgfHwgZXZlbnQuY2hh
ckNvZGUgPT09IDApID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlKSApCgkJCWV2ZW50
LndoaWNoID0gZXZlbnQuY2hhckNvZGUgfHwgZXZlbnQua2V5Q29kZTsKCgkJLy8gQWRkIG1ldGFL
ZXkgdG8gbm9uLU1hYyBicm93c2VycyAodXNlIGN0cmwgZm9yIFBDJ3MgYW5kIE1ldGEgZm9yIE1h
Y3MpCgkJaWYgKCAhZXZlbnQubWV0YUtleSAmJiBldmVudC5jdHJsS2V5ICkKCQkJZXZlbnQubWV0
YUtleSA9IGV2ZW50LmN0cmxLZXk7CgoJCS8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT0gbGVm
dDsgMiA9PSBtaWRkbGU7IDMgPT0gcmlnaHQKCQkvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1h
bGl6ZWQsIHNvIGRvbid0IHVzZSBpdAoJCWlmICggIWV2ZW50LndoaWNoICYmIGV2ZW50LmJ1dHRv
biApCgkJCWV2ZW50LndoaWNoID0gKGV2ZW50LmJ1dHRvbiAmIDEgPyAxIDogKCBldmVudC5idXR0
b24gJiAyID8gMyA6ICggZXZlbnQuYnV0dG9uICYgNCA/IDIgOiAwICkgKSk7CgoJCXJldHVybiBl
dmVudDsKCX0sCgoJcHJveHk6IGZ1bmN0aW9uKCBmbiwgcHJveHkgKXsKCQkvLyBTZXQgdGhlIGd1
aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28g
aXQgY2FuIGJlIHJlbW92ZWQKCQlwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgcHJv
eHkuZ3VpZCB8fCB0aGlzLmd1aWQrKzsKCQkvLyBTbyBwcm94eSBjYW4gYmUgZGVjbGFyZWQgYXMg
YW4gYXJndW1lbnQKCQlyZXR1cm4gcHJveHk7Cgl9LAoKCXNwZWNpYWw6IHsKCQlyZWFkeTogewoJ
CQlzZXR1cDogZnVuY3Rpb24oKSB7CgkJCQkvLyBNYWtlIHN1cmUgdGhlIHJlYWR5IGV2ZW50IGlz
IHNldHVwCgkJCQliaW5kUmVhZHkoKTsKCQkJCXJldHVybjsKCQkJfSwKCgkJCXRlYXJkb3duOiBm
dW5jdGlvbigpIHsgcmV0dXJuOyB9CgkJfSwKCgkJbW91c2VlbnRlcjogewoJCQlzZXR1cDogZnVu
Y3Rpb24oKSB7CgkJCQlpZiAoIGpRdWVyeS5icm93c2VyLm1zaWUgKSByZXR1cm4gZmFsc2U7CgkJ
CQlqUXVlcnkodGhpcykuYmluZCgibW91c2VvdmVyIiwgalF1ZXJ5LmV2ZW50LnNwZWNpYWwubW91
c2VlbnRlci5oYW5kbGVyKTsKCQkJCXJldHVybiB0cnVlOwoJCQl9LAoKCQkJdGVhcmRvd246IGZ1
bmN0aW9uKCkgewoJCQkJaWYgKCBqUXVlcnkuYnJvd3Nlci5tc2llICkgcmV0dXJuIGZhbHNlOwoJ
CQkJalF1ZXJ5KHRoaXMpLnVuYmluZCgibW91c2VvdmVyIiwgalF1ZXJ5LmV2ZW50LnNwZWNpYWwu
bW91c2VlbnRlci5oYW5kbGVyKTsKCQkJCXJldHVybiB0cnVlOwoJCQl9LAoKCQkJaGFuZGxlcjog
ZnVuY3Rpb24oZXZlbnQpIHsKCQkJCS8vIElmIHdlIGFjdHVhbGx5IGp1c3QgbW91c2VkIG9uIHRv
IGEgc3ViLWVsZW1lbnQsIGlnbm9yZSBpdAoJCQkJaWYgKCB3aXRoaW5FbGVtZW50KGV2ZW50LCB0
aGlzKSApIHJldHVybiB0cnVlOwoJCQkJLy8gRXhlY3V0ZSB0aGUgcmlnaHQgaGFuZGxlcnMgYnkg
c2V0dGluZyB0aGUgZXZlbnQgdHlwZSB0byBtb3VzZWVudGVyCgkJCQlldmVudC50eXBlID0gIm1v
dXNlZW50ZXIiOwoJCQkJcmV0dXJuIGpRdWVyeS5ldmVudC5oYW5kbGUuYXBwbHkodGhpcywgYXJn
dW1lbnRzKTsKCQkJfQoJCX0sCgoJCW1vdXNlbGVhdmU6IHsKCQkJc2V0dXA6IGZ1bmN0aW9uKCkg
ewoJCQkJaWYgKCBqUXVlcnkuYnJvd3Nlci5tc2llICkgcmV0dXJuIGZhbHNlOwoJCQkJalF1ZXJ5
KHRoaXMpLmJpbmQoIm1vdXNlb3V0IiwgalF1ZXJ5LmV2ZW50LnNwZWNpYWwubW91c2VsZWF2ZS5o
YW5kbGVyKTsKCQkJCXJldHVybiB0cnVlOwoJCQl9LAoKCQkJdGVhcmRvd246IGZ1bmN0aW9uKCkg
ewoJCQkJaWYgKCBqUXVlcnkuYnJvd3Nlci5tc2llICkgcmV0dXJuIGZhbHNlOwoJCQkJalF1ZXJ5
KHRoaXMpLnVuYmluZCgibW91c2VvdXQiLCBqUXVlcnkuZXZlbnQuc3BlY2lhbC5tb3VzZWxlYXZl
LmhhbmRsZXIpOwoJCQkJcmV0dXJuIHRydWU7CgkJCX0sCgoJCQloYW5kbGVyOiBmdW5jdGlvbihl
dmVudCkgewoJCQkJLy8gSWYgd2UgYWN0dWFsbHkganVzdCBtb3VzZWQgb24gdG8gYSBzdWItZWxl
bWVudCwgaWdub3JlIGl0CgkJCQlpZiAoIHdpdGhpbkVsZW1lbnQoZXZlbnQsIHRoaXMpICkgcmV0
dXJuIHRydWU7CgkJCQkvLyBFeGVjdXRlIHRoZSByaWdodCBoYW5kbGVycyBieSBzZXR0aW5nIHRo
ZSBldmVudCB0eXBlIHRvIG1vdXNlbGVhdmUKCQkJCWV2ZW50LnR5cGUgPSAibW91c2VsZWF2ZSI7
CgkJCQlyZXR1cm4galF1ZXJ5LmV2ZW50LmhhbmRsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJ
CQl9CgkJfQoJfQp9OwoKalF1ZXJ5LmZuLmV4dGVuZCh7CgliaW5kOiBmdW5jdGlvbiggdHlwZSwg
ZGF0YSwgZm4gKSB7CgkJcmV0dXJuIHR5cGUgPT0gInVubG9hZCIgPyB0aGlzLm9uZSh0eXBlLCBk
YXRhLCBmbikgOiB0aGlzLmVhY2goZnVuY3Rpb24oKXsKCQkJalF1ZXJ5LmV2ZW50LmFkZCggdGhp
cywgdHlwZSwgZm4gfHwgZGF0YSwgZm4gJiYgZGF0YSApOwoJCX0pOwoJfSwKCglvbmU6IGZ1bmN0
aW9uKCB0eXBlLCBkYXRhLCBmbiApIHsKCQl2YXIgb25lID0galF1ZXJ5LmV2ZW50LnByb3h5KCBm
biB8fCBkYXRhLCBmdW5jdGlvbihldmVudCkgewoJCQlqUXVlcnkodGhpcykudW5iaW5kKGV2ZW50
LCBvbmUpOwoJCQlyZXR1cm4gKGZuIHx8IGRhdGEpLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsK
CQl9KTsKCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7CgkJCWpRdWVyeS5ldmVudC5hZGQo
IHRoaXMsIHR5cGUsIG9uZSwgZm4gJiYgZGF0YSk7CgkJfSk7Cgl9LAoKCXVuYmluZDogZnVuY3Rp
b24oIHR5cGUsIGZuICkgewoJCXJldHU=";

Parameter Frag3 = "cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7CgkJCWpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5
cGUsIGZuICk7CgkJfSk7Cgl9LAoKCXRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhLCBmbiAp
IHsKCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7CgkJCWpRdWVyeS5ldmVudC50cmlnZ2Vy
KCB0eXBlLCBkYXRhLCB0aGlzLCB0cnVlLCBmbiApOwoJCX0pOwoJfSwKCgl0cmlnZ2VySGFuZGxl
cjogZnVuY3Rpb24oIHR5cGUsIGRhdGEsIGZuICkgewoJCXJldHVybiB0aGlzWzBdICYmIGpRdWVy
eS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzWzBdLCBmYWxzZSwgZm4gKTsKCX0sCgoJ
dG9nZ2xlOiBmdW5jdGlvbiggZm4gKSB7CgkJLy8gU2F2ZSByZWZlcmVuY2UgdG8gYXJndW1lbnRz
IGZvciBhY2Nlc3MgaW4gY2xvc3VyZQoJCXZhciBhcmdzID0gYXJndW1lbnRzLCBpID0gMTsKCgkJ
Ly8gbGluayBhbGwgdGhlIGZ1bmN0aW9ucywgc28gYW55IG9mIHRoZW0gY2FuIHVuYmluZCB0aGlz
IGNsaWNrIGhhbmRsZXIKCQl3aGlsZSggaSA8IGFyZ3MubGVuZ3RoICkKCQkJalF1ZXJ5LmV2ZW50
LnByb3h5KCBmbiwgYXJnc1tpKytdICk7CgoJCXJldHVybiB0aGlzLmNsaWNrKCBqUXVlcnkuZXZl
bnQucHJveHkoIGZuLCBmdW5jdGlvbihldmVudCkgewoJCQkvLyBGaWd1cmUgb3V0IHdoaWNoIGZ1
bmN0aW9uIHRvIGV4ZWN1dGUKCQkJdGhpcy5sYXN0VG9nZ2xlID0gKCB0aGlzLmxhc3RUb2dnbGUg
fHwgMCApICUgaTsKCgkJCS8vIE1ha2Ugc3VyZSB0aGF0IGNsaWNrcyBzdG9wCgkJCWV2ZW50LnBy
ZXZlbnREZWZhdWx0KCk7CgoJCQkvLyBhbmQgZXhlY3V0ZSB0aGUgZnVuY3Rpb24KCQkJcmV0dXJu
IGFyZ3NbIHRoaXMubGFzdFRvZ2dsZSsrIF0uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIHx8IGZh
bHNlOwoJCX0pKTsKCX0sCgoJaG92ZXI6IGZ1bmN0aW9uKGZuT3ZlciwgZm5PdXQpIHsKCQlyZXR1
cm4gdGhpcy5iaW5kKCdtb3VzZWVudGVyJywgZm5PdmVyKS5iaW5kKCdtb3VzZWxlYXZlJywgZm5P
dXQpOwoJfSwKCglyZWFkeTogZnVuY3Rpb24oZm4pIHsKCQkvLyBBdHRhY2ggdGhlIGxpc3RlbmVy
cwoJCWJpbmRSZWFkeSgpOwoKCQkvLyBJZiB0aGUgRE9NIGlzIGFscmVhZHkgcmVhZHkKCQlpZiAo
IGpRdWVyeS5pc1JlYWR5ICkKCQkJLy8gRXhlY3V0ZSB0aGUgZnVuY3Rpb24gaW1tZWRpYXRlbHkK
CQkJZm4uY2FsbCggZG9jdW1lbnQsIGpRdWVyeSApOwoKCQkvLyBPdGhlcndpc2UsIHJlbWVtYmVy
IHRoZSBmdW5jdGlvbiBmb3IgbGF0ZXIKCQllbHNlCgkJCS8vIEFkZCB0aGUgZnVuY3Rpb24gdG8g
dGhlIHdhaXQgbGlzdAoJCQlqUXVlcnkucmVhZHlMaXN0LnB1c2goIGZ1bmN0aW9uKCkgeyByZXR1
cm4gZm4uY2FsbCh0aGlzLCBqUXVlcnkpOyB9ICk7CgoJCXJldHVybiB0aGlzOwoJfQp9KTsKCmpR
dWVyeS5leHRlbmQoewoJaXNSZWFkeTogZmFsc2UsCglyZWFkeUxpc3Q6IFtdLAoJLy8gSGFuZGxl
IHdoZW4gdGhlIERPTSBpcyByZWFkeQoJcmVhZHk6IGZ1bmN0aW9uKCkgewoJCS8vIE1ha2Ugc3Vy
ZSB0aGF0IHRoZSBET00gaXMgbm90IGFscmVhZHkgbG9hZGVkCgkJaWYgKCAhalF1ZXJ5LmlzUmVh
ZHkgKSB7CgkJCS8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeQoJCQlqUXVlcnkuaXNS
ZWFkeSA9IHRydWU7CgoJCQkvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVj
dXRlCgkJCWlmICggalF1ZXJ5LnJlYWR5TGlzdCApIHsKCQkJCS8vIEV4ZWN1dGUgYWxsIG9mIHRo
ZW0KCQkJCWpRdWVyeS5lYWNoKCBqUXVlcnkucmVhZHlMaXN0LCBmdW5jdGlvbigpewoJCQkJCXRo
aXMuY2FsbCggZG9jdW1lbnQgKTsKCQkJCX0pOwoKCQkJCS8vIFJlc2V0IHRoZSBsaXN0IG9mIGZ1
bmN0aW9ucwoJCQkJalF1ZXJ5LnJlYWR5TGlzdCA9IG51bGw7CgkJCX0KCgkJCS8vIFRyaWdnZXIg
YW55IGJvdW5kIHJlYWR5IGV2ZW50cwoJCQlqUXVlcnkoZG9jdW1lbnQpLnRyaWdnZXJIYW5kbGVy
KCJyZWFkeSIpOwoJCX0KCX0KfSk7Cgp2YXIgcmVhZHlCb3VuZCA9IGZhbHNlOwoKZnVuY3Rpb24g
YmluZFJlYWR5KCl7CglpZiAoIHJlYWR5Qm91bmQgKSByZXR1cm47CglyZWFkeUJvdW5kID0gdHJ1
ZTsKCgkvLyBNb3ppbGxhLCBPcGVyYSAoc2VlIGZ1cnRoZXIgYmVsb3cgZm9yIGl0KSBhbmQgd2Vi
a2l0IG5pZ2h0bGllcyBjdXJyZW50bHkgc3VwcG9ydCB0aGlzIGV2ZW50CglpZiAoIGRvY3VtZW50
LmFkZEV2ZW50TGlzdGVuZXIgJiYgIWpRdWVyeS5icm93c2VyLm9wZXJhKQoJCS8vIFVzZSB0aGUg
aGFuZHkgZXZlbnQgY2FsbGJhY2sKCQlkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAiRE9NQ29u
dGVudExvYWRlZCIsIGpRdWVyeS5yZWFkeSwgZmFsc2UgKTsKCgkvLyBJZiBJRSBpcyB1c2VkIGFu
ZCBpcyBub3QgaW4gYSBmcmFtZQoJLy8gQ29udGludWFsbHkgY2hlY2sgdG8gc2VlIGlmIHRoZSBk
b2N1bWVudCBpcyByZWFkeQoJaWYgKCBqUXVlcnkuYnJvd3Nlci5tc2llICYmIHdpbmRvdyA9PSB0
b3AgKSAoZnVuY3Rpb24oKXsKCQlpZiAoalF1ZXJ5LmlzUmVhZHkpIHJldHVybjsKCQl0cnkgewoJ
CQkvLyBJZiBJRSBpcyB1c2VkLCB1c2UgdGhlIHRyaWNrIGJ5IERpZWdvIFBlcmluaQoJCQkvLyBo
dHRwOi8vamF2YXNjcmlwdC5ud2JveC5jb20vSUVDb250ZW50TG9hZGVkLwoJCQlkb2N1bWVudC5k
b2N1bWVudEVsZW1lbnQuZG9TY3JvbGwoImxlZnQiKTsKCQl9IGNhdGNoKCBlcnJvciApIHsKCQkJ
c2V0VGltZW91dCggYXJndW1lbnRzLmNhbGxlZSwgMCApOwoJCQlyZXR1cm47CgkJfQoJCS8vIGFu
ZCBleGVjdXRlIGFueSB3YWl0aW5nIGZ1bmN0aW9ucwoJCWpRdWVyeS5yZWFkeSgpOwoJfSkoKTsK
CglpZiAoIGpRdWVyeS5icm93c2VyLm9wZXJhICkKCQlkb2N1bWVudC5hZGRFdmVudExpc3RlbmVy
KCAiRE9NQ29udGVudExvYWRlZCIsIGZ1bmN0aW9uICgpIHsKCQkJaWYgKGpRdWVyeS5pc1JlYWR5
KSByZXR1cm47CgkJCWZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVu
Z3RoOyBpKyspCgkJCQlpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0uZGlzYWJsZWQpIHsKCQkJ
CQlzZXRUaW1lb3V0KCBhcmd1bWVudHMuY2FsbGVlLCAwICk7CgkJCQkJcmV0dXJuOwoJCQkJfQoJ
CQkvLyBhbmQgZXhlY3V0ZSBhbnkgd2FpdGluZyBmdW5jdGlvbnMKCQkJalF1ZXJ5LnJlYWR5KCk7
CgkJfSwgZmFsc2UpOwoKCWlmICggalF1ZXJ5LmJyb3dzZXIuc2FmYXJpICkgewoJCXZhciBudW1T
dHlsZXM7CgkJKGZ1bmN0aW9uKCl7CgkJCWlmIChqUXVlcnkuaXNSZWFkeSkgcmV0dXJuOwoJCQlp
ZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT0gImxvYWRlZCIgJiYgZG9jdW1lbnQucmVhZHlTdGF0
ZSAhPSAiY29tcGxldGUiICkgewoJCQkJc2V0VGltZW91dCggYXJndW1lbnRzLmNhbGxlZSwgMCAp
OwoJCQkJcmV0dXJuOwoJCQl9CgkJCWlmICggbnVtU3R5bGVzID09PSB1bmRlZmluZWQgKQoJCQkJ
bnVtU3R5bGVzID0galF1ZXJ5KCJzdHlsZSwgbGlua1tyZWw9c3R5bGVzaGVldF0iKS5sZW5ndGg7
CgkJCWlmICggZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoICE9IG51bVN0eWxlcyApIHsKCQkJ
CXNldFRpbWVvdXQoIGFyZ3VtZW50cy5jYWxsZWUsIDAgKTsKCQkJCXJldHVybjsKCQkJfQoJCQkv
LyBhbmQgZXhlY3V0ZSBhbnkgd2FpdGluZyBmdW5jdGlvbnMKCQkJalF1ZXJ5LnJlYWR5KCk7CgkJ
fSkoKTsKCX0KCgkvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdh
eXMgd29yawoJalF1ZXJ5LmV2ZW50LmFkZCggd2luZG93LCAibG9hZCIsIGpRdWVyeS5yZWFkeSAp
Owp9CgpqUXVlcnkuZWFjaCggKCJibHVyLGZvY3VzLGxvYWQscmVzaXplLHNjcm9sbCx1bmxvYWQs
Y2xpY2ssZGJsY2xpY2ssIiArCgkibW91c2Vkb3duLG1vdXNldXAsbW91c2Vtb3ZlLG1vdXNlb3Zl
cixtb3VzZW91dCxjaGFuZ2Usc2VsZWN0LCIgKwoJInN1Ym1pdCxrZXlkb3duLGtleXByZXNzLGtl
eXVwLGVycm9yIikuc3BsaXQoIiwiKSwgZnVuY3Rpb24oaSwgbmFtZSl7CgoJLy8gSGFuZGxlIGV2
ZW50IGJpbmRpbmcKCWpRdWVyeS5mbltuYW1lXSA9IGZ1bmN0aW9uKGZuKXsKCQlyZXR1cm4gZm4g
PyB0aGlzLmJpbmQobmFtZSwgZm4pIDogdGhpcy50cmlnZ2VyKG5hbWUpOwoJfTsKfSk7CgovLyBD
aGVja3MgaWYgYW4gZXZlbnQgaGFwcGVuZWQgb24gYW4gZWxlbWVudCB3aXRoaW4gYW5vdGhlciBl
bGVtZW50Ci8vIFVzZWQgaW4galF1ZXJ5LmV2ZW50LnNwZWNpYWwubW91c2VlbnRlciBhbmQgbW91
c2VsZWF2ZSBoYW5kbGVycwp2YXIgd2l0aGluRWxlbWVudCA9IGZ1bmN0aW9uKGV2ZW50LCBlbGVt
KSB7CgkvLyBDaGVjayBpZiBtb3VzZShvdmVyfG91dCkgYXJlIHN0aWxsIHdpdGhpbiB0aGUgc2Ft
ZSBwYXJlbnQgZWxlbWVudAoJdmFyIHBhcmVudCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7CgkvLyBU
cmF2ZXJzZSB1cCB0aGUgdHJlZQoJd2hpbGUgKCBwYXJlbnQgJiYgcGFyZW50ICE9IGVsZW0gKSB0
cnkgeyBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTsgfSBjYXRjaChlcnJvcikgeyBwYXJlbnQg
PSBlbGVtOyB9CgkvLyBSZXR1cm4gdHJ1ZSBpZiB3ZSBhY3R1YWxseSBqdXN0IG1vdXNlZCBvbiB0
byBhIHN1Yi1lbGVtZW50CglyZXR1cm4gcGFyZW50ID09IGVsZW07Cn07CgovLyBQcmV2ZW50IG1l
bW9yeSBsZWFrcyBpbiBJRQovLyBBbmQgcHJldmVudCBlcnJvcnMgb24gcmVmcmVzaCB3aXRoIGV2
ZW50cyBsaWtlIG1vdXNlb3ZlciBpbiBvdGhlciBicm93c2VycwovLyBXaW5kb3cgaXNuJ3QgaW5j
bHVkZWQgc28gYXMgbm90IHRvIHVuYmluZCBleGlzdGluZyB1bmxvYWQgZXZlbnRzCmpRdWVyeSh3
aW5kb3cpLmJpbmQoInVubG9hZCIsIGZ1bmN0aW9uKCkgewoJalF1ZXJ5KCIqIikuYWRkKGRvY3Vt
ZW50KS51bmJpbmQoKTsKfSk7CmpRdWVyeS5mbi5leHRlbmQoewoJLy8gS2VlcCBhIGNvcHkgb2Yg
dGhlIG9sZCBsb2FkCglfbG9hZDogalF1ZXJ5LmZuLmxvYWQsCgoJbG9hZDogZnVuY3Rpb24oIHVy
bCwgcGFyYW1zLCBjYWxsYmFjayApIHsKCQlpZiAoIHR5cGVvZiB1cmwgIT0gJ3N0cmluZycgKQoJ
CQlyZXR1cm4gdGhpcy5fbG9hZCggdXJsICk7CgoJCXZhciBvZmYgPSB1cmwuaW5kZXhPZigiICIp
OwoJCWlmICggb2ZmID49IDAgKSB7CgkJCXZhciBzZWxlY3RvciA9IHVybC5zbGljZShvZmYsIHVy
bC5sZW5ndGgpOwoJCQl1cmwgPSB1cmwuc2xpY2UoMCwgb2ZmKTsKCQl9CgoJCWNhbGxiYWNrID0g
Y2FsbGJhY2sgfHwgZnVuY3Rpb24oKXt9OwoKCQkvLyBEZWZhdWx0IHRvIGEgR0VUIHJlcXVlc3QK
CQl2YXIgdHlwZSA9ICJHRVQiOwoKCQkvLyBJZiB0aGUgc2Vjb25kIHBhcmFtZXRlciB3YXMgcHJv
dmlkZWQKCQlpZiAoIHBhcmFtcyApCgkJCS8vIElmIGl0J3MgYSBmdW5jdGlvbgoJCQlpZiAoIGpR
dWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHsKCQkJCS8vIFdlIGFzc3VtZSB0aGF0IGl0J3Mg
dGhlIGNhbGxiYWNrCgkJCQljYWxsYmFjayA9IHBhcmFtczsKCQkJCXBhcmFtcyA9IG51bGw7CgoJ
CQkvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nCgkJCX0gZWxzZSB7CgkJCQlwYXJh
bXMgPSBqUXVlcnkucGFyYW0oIHBhcmFtcyApOwoJCQkJdHlwZSA9ICJQT1NUIjsKCQkJfQoKCQl2
YXIgc2VsZiA9IHRoaXM7CgoJCS8vIFJlcXVlc3QgdGhlIHJlbW90ZSBkb2N1bWVudAoJCWpRdWVy
eS5hamF4KHsKCQkJdXJsOiB1cmwsCgkJCXR5cGU6IHR5cGUsCgkJCWRhdGFUeXBlOiAiaHRtbCIs
CgkJCWRhdGE6IHBhcmFtcywKCQkJY29tcGxldGU6IGZ1bmN0aW9uKHJlcywgc3RhdHVzKXsKCQkJ
CS8vIElmIHN1Y2Nlc3NmdWwsIGluamVjdCB0aGUgSFRNTCBpbnRvIGFsbCB0aGUgbWF0Y2hlZCBl
bGVtZW50cwoJCQkJaWYgKCBzdGF0dXMgPT0gInN1Y2Nlc3MiIHx8IHN0YXR1cyA9PSAibm90bW9k
aWZpZWQiICkKCQkJCQkvLyBTZWUgaWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkCgkJCQkJc2Vs
Zi5odG1sKCBzZWxlY3RvciA/CgkJCQkJCS8vIENyZWF0ZSBhIGR1bW15IGRpdiB0byBob2xkIHRo
ZSByZXN1bHRzCgkJCQkJCWpRdWVyeSgiPGRpdi8+IikKCQkJCQkJCS8vIGluamVjdCB0aGUgY29u
dGVudHMgb2YgdGhlIGRvY3VtZW50IGluLCByZW1vdmluZyB0aGUgc2NyaXB0cwoJCQkJCQkJLy8g
dG8gYXZvaWQgYW55ICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzIGluIElFCgkJCQkJCQkuYXBw
ZW5kKHJlcy5yZXNwb25zZVRleHQucmVwbGFjZSgvPHNjcmlwdCgufFxzKSo/XC9zY3JpcHQ+L2cs
ICIiKSkKCgkJCQkJCQkvLyBMb2NhdGUgdGhlIHNwZWNpZmllZCBlbGVtZW50cwoJCQkJCQkJLmZp
bmQoc2VsZWN0b3IpIDoKCgkJCQkJCS8vIElmIG5vdCwganVzdCBpbmplY3QgdGhlIGZ1bGwgcmVz
dWx0CgkJCQkJCXJlcy5yZXNwb25zZVRleHQgKTsKCgkJCQlzZWxmLmVhY2goIGNhbGxiYWNrLCBb
cmVzLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCByZXNdICk7CgkJCX0KCQl9KTsKCQlyZXR1cm4gdGhp
czsKCX0sCgoJc2VyaWFsaXplOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4galF1ZXJ5LnBhcmFtKHRo
aXMuc2VyaWFsaXplQXJyYXkoKSk7Cgl9LAoJc2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkgewoJ
CXJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpewoJCQlyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKHRo
aXMsICJmb3JtIikgPwoJCQkJalF1ZXJ5Lm1ha2VBcnJheSh0aGlzLmVsZW1lbnRzKSA6IHRoaXM7
CgkJfSkKCQkuZmlsdGVyKGZ1bmN0aW9uKCl7CgkJCXJldHVybiB0aGlzLm5hbWUgJiYgIXRoaXMu
ZGlzYWJsZWQgJiYKCQkJCSh0aGlzLmNoZWNrZWQgfHwgL3NlbGVjdHx0ZXh0YXJlYS9pLnRlc3Qo
dGhpcy5ub2RlTmFtZSkgfHwKCQkJCQkvdGV4dHxoaWRkZW58cGFzc3dvcmQvaS50ZXN0KHRoaXMu
dHlwZSkpOwoJCX0pCgkJLm1hcChmdW5jdGlvbihpLCBlbGVtKXsKCQkJdmFyIHZhbCA9IGpRdWVy
eSh0aGlzKS52YWwoKTsKCQkJcmV0dXJuIHZhbCA9PSBudWxsID8gbnVsbCA6CgkJCQl2YWwuY29u
c3RydWN0b3IgPT0gQXJyYXkgPwoJCQkJCWpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24odmFsLCBp
KXsKCQkJCQkJcmV0dXJuIHtuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWx9OwoJCQkJCX0pIDoK
CQkJCQl7bmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsfTsKCQl9KS5nZXQoKTsKCX0KfSk7Cgov
LyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2
ZW50cwpqUXVlcnkuZWFjaCggImFqYXhTdGFydCxhamF4U3RvcCxhamF4Q29tcGxldGUsYWpheEVy
cm9yLGFqYXhTdWNjZXNzLGFqYXhTZW5kIi5zcGxpdCgiLCIpLCBmdW5jdGlvbihpLG8pewoJalF1
ZXJ5LmZuW29dID0gZnVuY3Rpb24oZil7CgkJcmV0dXJuIHRoaXMuYmluZChvLCBmKTsKCX07Cn0p
OwoKdmFyIGpzYyA9IG5vdygpOwoKalF1ZXJ5LmV4dGVuZCh7CglnZXQ6IGZ1bmN0aW9uKCB1cmws
IGRhdGEsIGNhbGxiYWNrLCB0eXBlICkgewoJCS8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFy
Z3VtZW50IHdhcyBvbW1pdGVkCgkJaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkgewoJ
CQljYWxsYmFjayA9IGRhdGE7CgkJCWRhdGEgPSBudWxsOwoJCX0KCgkJcmV0dXJuIGpRdWVyeS5h
amF4KHsKCQkJdHlwZTogIkdFVCIsCgkJCXVybDogdXJsLAoJCQlkYXRhOiBkYXRhLAoJCQlzdWNj
ZXNzOiBjYWxsYmFjaywKCQkJZGF0YVR5cGU6IHR5cGUKCQl9KTsKCX0sCgoJZ2V0U2NyaXB0OiBm
dW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHsKCQlyZXR1cm4galF1ZXJ5LmdldCh1cmwsIG51bGws
IGNhbGxiYWNrLCAic2NyaXB0Iik7Cgl9LAoKCWdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEs
IGNhbGxiYWNrICkgewoJCXJldHVybiBqUXVlcnkuZ2V0KHVybCwgZGF0YSwgY2FsbGJhY2ssICJq
c29uIik7Cgl9LAoKCXBvc3Q6IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkg
ewoJCWlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHsKCQkJY2FsbGJhY2sgPSBkYXRh
OwoJCQlkYXRhID0ge307CgkJfQoKCQlyZXR1cm4galF1ZXJ5LmFqYXgoewoJCQl0eXBlOiAiUE9T
VCIsCgkJCXVybDogdXJsLAoJCQlkYXRhOiBkYXRhLAoJCQlzdWNjZXNzOiBjYWxsYmFjaywKCQkJ
ZGF0YVR5cGU6IHR5cGUKCQl9KTsKCX0sCgoJYWpheFNldHVwOiBmdW5jdGlvbiggc2V0dGluZ3Mg
KSB7CgkJalF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgc2V0dGluZ3MgKTsKCX0s
CgoJYWpheFNldHRpbmdzOiB7CgkJdXJsOiBsb2NhdGlvbi5ocmVmLAoJCWdsb2JhbDogdHJ1ZSwK
CQl0eXBlOiAiR0VUIiwKCQl0aW1lb3V0OiAwLAoJCWNvbnRlbnRUeXBlOiAiYXBwbGljYXRpb24v
eC13d3ctZm9ybS11cmxlbmNvZGVkIiwKCQlwcm9jZXNzRGF0YTogdHJ1ZSwKCQlhc3luYzogdHJ1
ZSwKCQlkYXRhOiBudWxsLAoJCXVzZXJuYW1lOiBudWxsLAoJCXBhc3N3b3JkOiBudWxsLAoJCWFj
Y2VwdHM6IHsKCQkJeG1sOiAiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbCIsCgkJCWh0bWw6ICJ0
ZXh0L2h0bWwiLAoJCQlzY3JpcHQ6ICJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFz
Y3JpcHQiLAoJCQlqc29uOiAiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0IiwKCQkJ
dGV4dDogInRleHQvcGxhaW4iLAoJCQlfZGVmYXVsdDogIiovKiIKCQl9Cgl9LAoKCS8vIExhc3Qt
TW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3QKCWxhc3RNb2RpZmllZDoge30s
CgoJYWpheDogZnVuY3Rpb24oIHMgKSB7CgkJLy8gRXh0ZW5kIHRoZSBzZXR0aW5ncywgYnV0IHJl
LWV4dGVuZCAncycgc28gdGhhdCBpdCBjYW4gYmUKCQkvLyBjaGVja2VkIGFnYWluIGxhdGVyIChp
biB0aGUgdGVzdCBzdWl0ZSwgc3BlY2lmaWNhbGx5KQoJCXMgPSBqUXVlcnkuZXh0ZW5kKHRydWUs
IHMsIGpRdWVyeS5leHRlbmQodHJ1ZSwge30sIGpRdWVyeS5hamF4U2V0dGluZ3MsIHMpKTsKCgkJ
dmFyIGpzb25wLCBqc3JlID0gLz1cPygmfCQpL2csIHN0YXR1cywgZGF0YSwKCQkJdHlwZSA9IHMu
dHlwZS50b1VwcGVyQ2FzZSgpOwoKCQkvLyBjb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBz
dHJpbmcKCQlpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT0g
InN0cmluZyIgKQoJCQlzLmRhdGEgPSBqUXVlcnkucGFyYW0ocy5kYXRhKTsKCgkJLy8gSGFuZGxl
IEpTT05QIFBhcmFtZXRlciBDYWxsYmFja3MKCQlpZiAoIHMuZGF0YVR5cGUgPT0gImpzb25wIiAp
IHsKCQkJaWYgKCB0eXBlID09ICJHRVQiICkgewoJCQkJaWYgKCAhcy51cmwubWF0Y2goanNyZSkg
KQoJCQkJCXMudXJsICs9IChzLnVybC5tYXRjaCgvXD8vKSA/ICImIiA6ICI/IikgKyAocy5qc29u
cCB8fCAiY2FsbGJhY2siKSArICI9PyI7CgkJCX0gZWxzZSBpZiAoICFzLmRhdGEgfHwgIXMuZGF0
YS5tYXRjaChqc3JlKSApCgkJCQlzLmRhdGEgPSAocy5kYXRhID8gcy5kYXRhICsgIiYiIDogIiIp
ICsgKHMuanNvbnAgfHwgImNhbGxiYWNrIikgKyAiPT8iOwoJCQlzLmRhdGFUeXBlID0gImpzb24i
OwoJCX0KCgkJLy8gQnVpbGQgdGVtcG9yYXJ5IEpTT05QIGZ1bmN0aW9uCgkJaWYgKCBzLmRhdGFU
eXBlID09ICJqc29uIiAmJiAocy5kYXRhICYmIHMuZGF0YS5tYXRjaChqc3JlKSB8fCBzLnVybC5t
YXRjaChqc3JlKSkgKSB7CgkJCWpzb25wID0gImpzb25wIiArIGpzYysrOwoKCQkJLy8gUmVwbGFj
ZSB0aGUgPT8gc2VxdWVuY2UgYm90aCBpbiB0aGUgcXVlcnkgc3RyaW5nIGFuZCB0aGUgZGF0YQoJ
CQlpZiAoIHMuZGF0YSApCgkJCQlzLmRhdGEgPSAocy5kYXRhICsgIiIpLnJlcGxhY2UoanNyZSwg
Ij0iICsganNvbnAgKyAiJDEiKTsKCQkJcy51cmwgPSBzLnVybC5yZXBsYWNlKGpzcmUsICI9IiAr
IGpzb25wICsgIiQxIik7CgoJCQkvLyBXZSBuZWVkIHRvIG1ha2Ugc3VyZQoJCQkvLyB0aGF0IGEg
SlNPTlAgc3R5bGUgcmVzcG9uc2UgaXMgZXhlY3V0ZWQgcHJvcGVybHkKCQkJcy5kYXRhVHlwZSA9
ICJzY3JpcHQiOwoKCQkJLy8gSGFuZGxlIEpTT05QLXN0eWxlIGxvYWRpbmcKCQkJd2luZG93WyBq
c29ucCBdID0gZnVuY3Rpb24odG1wKXsKCQkJCWRhdGEgPSB0bXA7CgkJCQlzdWNjZXNzKCk7CgkJ
CQljb21wbGV0ZSgpOwoJCQkJLy8gR2FyYmFnZSBjb2xsZWN0CgkJCQl3aW5kb3dbIGpzb25wIF0g
PSB1bmRlZmluZWQ7CgkJCQl0cnl7IGRlbGV0ZSB3aW5kb3dbIGpzb25wIF07IH0gY2F0Y2goZSl7
fQoJCQkJaWYgKCBoZWFkICkKCQkJCQloZWFkLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTsKCQkJfTsK
CQl9CgoJCWlmICggcy5kYXRhVHlwZSA9PSAic2NyaXB0IiAmJiBzLmNhY2hlID09IG51bGwgKQoJ
CQlzLmNhY2hlID0gZmFsc2U7CgoJCWlmICggcy5jYWNoZSA9PT0gZmFsc2UgJiYgdHlwZSA9PSAi
R0VUIiApIHsKCQkJdmFyIHRzID0gbm93KCk7CgkJCS8vIHRyeSByZXBsYWNpbmcgXz0gaWYgaXQg
aXMgdGhlcmUKCQkJdmFyIHJldCA9IHMudXJsLnJlcGxhY2UoLyhcP3wmKV89Lio/KCZ8JCkvLCAi
JDFfPSIgKyB0cyArICIkMiIpOwoJCQkvLyBpZiBub3RoaW5nIHdhcyByZXBsYWNlZCwgYWRkIHRp
bWVzdGFtcCB0byB0aGUgZW5kCgkJCXMudXJsID0gcmV0ICsgKChyZXQgPT0gcy51cmwpID8gKHMu
dXJsLm1hdGNoKC9cPy8pID8gIiYiIDogIj8iKSArICJfPSIgKyB0cyA6ICIiKTsKCQl9CgoJCS8v
IElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmwgZm9yIGdldCByZXF1ZXN0
cwoJCWlmICggcy5kYXRhICYmIHR5cGUgPT0gIkdFVCIgKSB7CgkJCXMudXJsICs9IChzLnVybC5t
YXRjaCgvXD8vKSA/ICImIiA6ICI/IikgKyBzLmRhdGE7CgoJCQkvLyBJRSBsaWtlcyB0byBzZW5k
IGJvdGggZ2V0IGFuZCBwb3N0IGRhdGEsIHByZXZlbnQgdGhpcwoJCQlzLmRhdGEgPSBudWxsOwoJ
CX0KCgkJLy8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0cwoJCWlmICggcy5nbG9iYWwg
JiYgISBqUXVlcnkuYWN0aXZlKysgKQoJCQlqUXVlcnkuZXZlbnQudHJpZ2dlciggImFqYXhTdGFy
dCIgKTsKCgkJLy8gTWF0Y2hlcyBhbiBhYnNvbHV0ZSBVUkwsIGFuZCBzYXZlcyB0aGUgZG9tYWlu
CgkJdmFyIHJlbW90ZSA9IC9eKD86XHcrOik/XC9cLyhbXlwvPyNdKykvOwoKCQkvLyBJZiB3ZSdy
ZSByZXF1ZXN0aW5nIGEgcmVtb3RlIGRvY3VtZW50CgkJLy8gYW5kIHRyeWluZyB0byBsb2FkIEpT
T04gb3IgU2NyaXB0IHdpdGggYSBHRVQKCQlpZiAoIHMuZGF0YVR5cGUgPT0gInNjcmlwdCIgJiYg
dHlwZSA9PSAiR0VUIgoJCQkJJiYgcmVtb3RlLnRlc3Qocy51cmwpICYmIHJlbW90ZS5leGVjKHMu
dXJsKVsxXSAhPSBsb2NhdGlvbi5ob3N0ICl7CgkJCXZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxl
bWVudHNCeVRhZ05hbWUoImhlYWQiKVswXTsKCQkJdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0
ZUVsZW1lbnQoInNjcmlwdCIpOwoJCQlzY3JpcHQuc3JjID0gcy51cmw7CgkJCWlmIChzLnNjcmlw
dENoYXJzZXQpCgkJCQlzY3JpcHQuY2hhcnNldCA9IHMuc2NyaXB0Q2hhcnNldDsKCgkJCS8vIEhh
bmRsZSBTY3JpcHQgbG9hZGluZwoJCQlpZiAoICFqc29ucCApIHsKCQkJCXZhciBkb25lID0gZmFs
c2U7CgoJCQkJLy8gQXR0YWNoIGhhbmRsZXJzIGZvciBhbGwgYnJvd3NlcnMKCQkJCXNjcmlwdC5v
bmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKXsKCQkJCQlpZiAo
ICFkb25lICYmICghdGhpcy5yZWFkeVN0YXRlIHx8CgkJCQkJCQl0aGlzLnJlYWR5U3RhdGUgPT0g
ImxvYWRlZCIgfHwgdGhpcy5yZWFkeVN0YXRlID09ICJjb21wbGV0ZSIpICkgewoJCQkJCQlkb25l
ID0gdHJ1ZTsKCQkJCQkJc3VjY2VzcygpOwoJCQkJCQljb21wbGV0ZSgpOwoJCQkJCQloZWFkLnJl
bW92ZUNoaWxkKCBzY3JpcHQgKTsKCQkJCQl9CgkJCQl9OwoJCQl9CgoJCQloZWFkLmFwcGVuZENo
aWxkKHNjcmlwdCk7CgoJCQkvLyBXZSBoYW5kbGUgZXZlcnl0aGluZyB1c2luZyB0aGUgc2NyaXB0
IGVsZW1lbnQgaW5qZWN0aW9uCgkJCXJldHVybiB1bmRlZmluZWQ7CgkJfQoKCQl2YXIgcmVxdWVz
dERvbmUgPSBmYWxzZTsKCgkJLy8gQ3JlYXRlIHRoZSByZXF1ZXN0IG9iamVjdDsgTWljcm9zb2Z0
IGZhaWxlZCB0byBwcm9wZXJseQoJCS8vIGltcGxlbWVudCB0aGUgWE1MSHR0cFJlcXVlc3QgaW4g
SUU3LCBzbyB3ZSB1c2UgdGhlIEFjdGl2ZVhPYmplY3Qgd2hlbiBpdCBpcyBhdmFpbGFibGUKCQl2
YXIgeGhyID0gd2luZG93LkFjdGl2ZVhPYmplY3QgPyBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9z
b2Z0LlhNTEhUVFAiKSA6IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwoKCQkvLyBPcGVuIHRoZSBzb2Nr
ZXQKCQkvLyBQYXNzaW5nIG51bGwgdXNlcm5hbWUsIGdlbmVyYXRlcyBhIGxvZ2luIHBvcHVwIG9u
IE9wZXJhICgjMjg2NSkKCQlpZiggcy51c2VybmFtZSApCgkJCXhoci5vcGVuKHR5cGUsIHMudXJs
LCBzLmFzeW5jLCBzLnVzZXJuYW1lLCBzLnBhc3N3b3JkKTsKCQllbHNlCgkJCXhoci5vcGVuKHR5
cGUsIHMudXJsLCBzLmFzeW5jKTsKCgkJLy8gTmVlZCBhbiBleHRyYSB0cnkvY2F0Y2ggZm9yIGNy
b3NzIGRvbWFpbiByZXF1ZXN0cyBpbiBGaXJlZm94IDMKCQl0cnkgewoJCQkvLyBTZXQgdGhlIGNv
cnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnQKCQkJaWYgKCBzLmRhdGEgKQoJCQkJ
eGhyLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtVHlwZSIsIHMuY29udGVudFR5cGUpOwoKCQkJ
Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBoZWFkZXIsIGlmIGlmTW9kaWZpZWQgbW9kZS4K
CQkJaWYgKCBzLmlmTW9kaWZpZWQgKQoJCQkJeGhyLnNldFJlcXVlc3RIZWFkZXIoIklmLU1vZGlm
aWVkLVNpbmNlIiwKCQkJCQlqUXVlcnkubGFzdE1vZGlmaWVkW3MudXJsXSB8fCAiVGh1LCAwMSBK
YW4gMTk3MCAwMDowMDowMCBHTVQiICk7CgoJCQkvLyBTZXQgaGVhZGVyIHNvIHRoZSBjYWxsZWQg
c2NyaXB0IGtub3dzIHRoYXQgaXQncyBhbiBYTUxIdHRwUmVxdWVzdAoJCQl4aHIuc2V0UmVxdWVz
dEhlYWRlcigiWC1SZXF1ZXN0ZWQtV2l0aCIsICJYTUxIdHRwUmVxdWVzdCIpOwoKCQkJLy8gU2V0
IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRh
VHlwZQoJCQl4aHIuc2V0UmVxdWVzdEhlYWRlcigiQWNjZXB0Iiwgcy5kYXRhVHlwZSAmJiBzLmFj
Y2VwdHNbIHMuZGF0YVR5cGUgXSA/CgkJCQlzLmFjY2VwdHNbIHMuZGF0YVR5cGUgXSArICIsICov
KiIgOgoJCQkJcy5hY2NlcHRzLl9kZWZhdWx0ICk7CgkJfSBjYXRjaChlKXt9CgoJCS8vIEFsbG93
IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcwoJCWlmICggcy5iZWZvcmVTZW5kICYmIHMuYmVmb3Jl
U2VuZCh4aHIsIHMpID09PSBmYWxzZSApIHsKCQkJLy8gY2xlYW51cCBhY3RpdmUgcmVxdWVzdCBj
b3VudGVyCgkJCXMuZ2xvYmFsICYmIGpRdWVyeS5hY3RpdmUtLTsKCQkJLy8gY2xvc2Ugb3BlbmRl
ZCBzb2NrZXQKCQkJeGhyLmFib3J0KCk7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCWlmICggcy5n
bG9iYWwgKQoJCQlqUXVlcnkuZXZlbnQudHJpZ2dlcigiYWpheFNlbmQiLCBbeGhyLCBzXSk7CgoJ
CS8vIFdhaXQgZm9yIGEgcmVzcG9uc2UgdG8gY29tZSBiYWNrCgkJdmFyIG9ucmVhZHlzdGF0ZWNo
YW5nZSA9IGZ1bmN0aW9uKGlzVGltZW91dCl7CgkJCS8vIFRoZSB0cmFuc2ZlciBpcyBjb21wbGV0
ZSBhbmQgdGhlIGRhdGEgaXMgYXZhaWxhYmxlLCBvciB0aGUgcmVxdWVzdCB0aW1lZCBvdXQKCQkJ
aWYgKCAhcmVxdWVzdERvbmUgJiYgeGhyICYmICh4aHIucmVhZHlTdGF0ZSA9PSA0IHx8IGlzVGlt
ZW91dCA9PSAidGltZW91dCIpICkgewoJCQkJcmVxdWVzdERvbmUgPSB0cnVlOwoKCQkJCS8vIGNs
ZWFyIHBvbGwgaW50ZXJ2YWwKCQkJCWlmIChpdmFsKSB7CgkJCQkJY2xlYXJJbnRlcnZhbChpdmFs
KTsKCQkJCQlpdmFsID0gbnVsbDsKCQkJCX0KCgkJCQlzdGF0dXMgPSBpc1RpbWVvdXQgPT0gInRp
bWVvdXQiICYmICJ0aW1lb3V0IiB8fAoJCQkJCSFqUXVlcnkuaHR0cFN1Y2Nlc3MoIHhociApICYm
ICJlcnJvciIgfHwKCQkJCQlzLmlmTW9kaWZpZWQgJiYgalF1ZXJ5Lmh0dHBOb3RNb2RpZmllZCgg
eGhyLCBzLnVybCApICYmICJub3Rtb2RpZmllZCIgfHwKCQkJCQkic3VjY2VzcyI7CgoJCQkJaWYg
KCBzdGF0dXMgPT0gInN1Y2Nlc3MiICkgewoJCQkJCS8vIFdhdGNoIGZvciwgYW5kIGNhdGNoLCBY
TUwgZG9jdW1lbnQgcGFyc2UgZXJyb3JzCgkJCQkJdHJ5IHsKCQkJCQkJLy8gcHJvY2VzcyB0aGUg
ZGF0YSAocnVucyB0aGUgeG1sIHRocm91Z2ggaHR0cERhdGEgcmVnYXJkbGVzcyBvZiBjYWxsYmFj
aykKCQkJCQkJZGF0YSA9IGpRdWVyeS5odHRwRGF0YSggeGhyLCBzLmRhdGFUeXBlLCBzLmRhdGFG
aWx0ZXIgKTsKCQkJCQl9IGNhdGNoKGUpIHsKCQkJCQkJc3RhdHVzID0gInBhcnNlcmVycm9yIjsK
CQkJCQl9CgkJCQl9CgoJCQkJLy8gTWFrZSBzdXJlIHRoYXQgdGhlIHJlcXVlc3Qgd2FzIHN1Y2Nl
c3NmdWwgb3Igbm90bW9kaWZpZWQKCQkJCWlmICggc3RhdHVzID09ICJzdWNjZXNzIiApIHsKCQkJ
CQkvLyBDYWNoZSBMYXN0LU1vZGlmaWVkIGhlYWRlciwgaWYgaWZNb2RpZmllZCBtb2RlLgoJCQkJ
CXZhciBtb2RSZXM7CgkJCQkJdHJ5IHsKCQkJCQkJbW9kUmVzID0geGhyLmdldFJlc3BvbnNlSGVh
ZGVyKCJMYXN0LU1vZGlmaWVkIik7CgkJCQkJfSBjYXRjaChlKSB7fSAvLyBzd2FsbG93IGV4Y2Vw
dGlvbiB0aHJvd24gYnkgRkYgaWYgaGVhZGVyIGlzIG5vdCBhdmFpbGFibGUKCgkJCQkJaWYgKCBz
LmlmTW9kaWZpZWQgJiYgbW9kUmVzICkKCQkJCQkJalF1ZXJ5Lmxhc3RNb2RpZmllZFtzLnVybF0g
PSBtb2RSZXM7CgoJCQkJCS8vIEpTT05QIGhhbmRsZXMgaXRzIG93biBzdWNjZXNzIGNhbGxiYWNr
CgkJCQkJaWYgKCAhanNvbnAgKQoJCQkJCQlzdWNjZXNzKCk7CgkJCQl9IGVsc2UKCQkJCQlqUXVl
cnkuaGFuZGxlRXJyb3IocywgeGhyLCBzdGF0dXMpOwoKCQkJCS8vIEZpcmUgdGhlIGNvbXBsZXRl
IGhhbmRsZXJzCgkJCQljb21wbGV0ZSgpOwoKCQkJCS8vIFN0b3AgbWVtb3J5IGxlYWtzCgkJCQlp
ZiAoIHMuYXN5bmMgKQoJCQkJCXhociA9IG51bGw7CgkJCX0KCQl9OwoKCQlpZiAoIHMuYXN5bmMg
KSB7CgkJCS8vIGRvbid0IGF0dGFjaCB0aGUgaGFuZGxlciB0byB0aGUgcmVxdWVzdCwganVzdCBw
b2xsIGl0IGluc3RlYWQKCQkJdmFyIGl2YWwgPSBzZXRJbnRlcnZhbChvbnJlYWR5c3RhdGVjaGFu
Z2UsIDEzKTsKCgkJCS8vIFRpbWVvdXQgY2hlY2tlcgoJCQlpZiAoIHMudGltZW91dCA+IDAgKQoJ
CQkJc2V0VGltZW91dChmdW5jdGlvbigpewoJCQkJCS8vIENoZWNrIHRvIHNlZSBpZiB0aGUgcmVx
dWVzdCBpcyBzdGlsbCBoYXBwZW5pbmcKCQkJCQlpZiAoIHhociApIHsKCQkJCQkJLy8gQ2FuY2Vs
IHRoZSByZXF1ZXN0CgkJCQkJCXhoci5hYm9ydCgpOwoKCQkJCQkJaWYoICFyZXF1ZXN0RG9uZSAp
CgkJCQkJCQlvbnJlYWR5c3RhdGVjaGFuZ2UoICJ0aW1lb3V0IiApOwoJCQkJCX0KCQkJCX0sIHMu
dGltZW91dCk7CgkJfQoKCQkvLyBTZW5kIHRoZSBkYXRhCgkJdHJ5IHsKCQkJeGhyLnNlbmQocy5k
YXRhKTsKCQl9IGNhdGNoKGUpIHsKCQkJalF1ZXJ5LmhhbmRsZUVycm9yKHMsIHhociwgbnVsbCwg
ZSk7CgkJfQoKCQkvLyBmaXJlZm94IDEuNSBkb2Vzbid0IGZpcmUgc3RhdGVjaGFuZ2UgZm9yIHN5
bmMgcmVxdWVzdHMKCQlpZiAoICFzLmFzeW5jICkKCQkJb25yZWFkeXN0YXRlY2hhbmdlKCk7CgoJ
CWZ1bmN0aW9uIHN1Y2Nlc3MoKXsKCQkJLy8gSWYgYSBsb2NhbCBjYWxsYmFjayB3YXMgc3BlY2lm
aWVkLCBmaXJlIGl0IGFuZCBwYXNzIGl0IHRoZSBkYXRhCgkJCWlmICggcy5zdWNjZXNzICkKCQkJ
CXMuc3VjY2VzcyggZGF0YSwgc3RhdHVzICk7CgoJCQkvLyBGaXJlIHRoZSBnbG9iYWwgY2FsbGJh
Y2sKCQkJaWYgKCBzLmdsb2JhbCApCgkJCQlqUXVlcnkuZXZlbnQudHJpZ2dlciggImFqYXhTdWNj
ZXNzIiwgW3hociwgc10gKTsKCQl9CgoJCWZ1bmN0aW9uIGNvbXBsZXRlKCl7CgkJCS8vIFByb2Nl
c3MgcmVzdWx0CgkJCWlmICggcy5jb21wbGV0ZSApCgkJCQlzLmNvbXBsZXRlKHhociwgc3RhdHVz
KTsKCgkJCS8vIFRoZSByZXF1ZXN0IHdhcyBjb21wbGV0ZWQKCQkJaWYgKCBzLmdsb2JhbCApCgkJ
CQlqUXVlcnkuZXZlbnQudHJpZ2dlciggImFqYXhDb21wbGV0ZSIsIFt4aHIsIHNdICk7CgoJCQkv
LyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXIKCQkJaWYgKCBzLmdsb2JhbCAmJiAhIC0t
alF1ZXJ5LmFjdGl2ZSApCgkJCQlqUXVlcnkuZXZlbnQudHJpZ2dlciggImFqYXhTdG9wIiApOwoJ
CX0KCgkJLy8gcmV0dXJuIFhNTEh0dHBSZXF1ZXN0IHRvIGFsbG93IGFib3J0aW5nIHRoZSByZXF1
ZXN0IGV0Yy4KCQlyZXR1cm4geGhyOwoJfSwKCgloYW5kbGVFcnJvcjogZnVuY3Rpb24oIHMsIHho
ciwgc3RhdHVzLCBlICkgewoJCS8vIElmIGEgbG9jYWwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwg
ZmlyZSBpdAoJCWlmICggcy5lcnJvciApIHMuZXJyb3IoIHhociwgc3RhdHVzLCBlICk7CgoJCS8v
IEZpcmUgdGhlIGdsb2JhbCBjYWxsYmFjawoJCWlmICggcy5nbG9iYWwgKQoJCQlqUXVlcnkuZXZl
bnQudHJpZ2dlciggImFqYXhFcnJvciIsIFt4aHIsIHMsIGVdICk7Cgl9LAoKCS8vIENvdW50ZXIg
Zm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllcwoJYWN0aXZlOiAwLAoKCS8v
IERldGVybWluZXMgaWYgYW4gWE1MSHR0cFJlcXVlc3Qgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90Cglo
dHRwU3VjY2VzczogZnVuY3Rpb24oIHhociApIHsKCQl0cnkgewoJCQkvLyBJRSBlcnJvciBzb21l
dGltZXMgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNCBzbyB0cmVhdCBpdCBhcyBz
dWNjZXNzLCBzZWUgIzE0NTAKCQkJcmV0dXJuICF4aHIuc3RhdHVzICYmIGxvY2F0aW9uLnByb3Rv
Y29sID09ICJmaWxlOiIgfHwKCQkJCSggeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8
IDMwMCApIHx8IHhoci5zdGF0dXMgPT0gMzA0IHx8IHhoci5zdGF0dXMgPT0gMTIyMyB8fAoJCQkJ
alF1ZXJ5LmJyb3dzZXIuc2FmYXJpICYmIHhoci5zdGF0dXMgPT0gdW5kZWZpbmVkOwoJCX0gY2F0
Y2goZSl7fQoJCXJldHVybiBmYWxzZTsKCX0sCgoJLy8gRGV0ZXJtaW5lcyBpZiBhbiBYTUxIdHRw
UmVxdWVzdCByZXR1cm5zIE5vdE1vZGlmaWVkCglodHRwTm90TW9kaWZpZWQ6IGZ1bmN0aW9uKCB4
aHIsIHVybCApIHsKCQl0cnkgewoJCQl2YXIgeGhyUmVzID0geGhyLmdldFJlc3BvbnNlSGVhZGVy
KCJMYXN0LU1vZGlmaWVkIik7CgoJCQkvLyBGaXJlZm94IGFsd2F5cyByZXR1cm5zIDIwMC4gY2hl
Y2sgTGFzdC1Nb2RpZmllZCBkYXRlCgkJCXJldHVybiB4aHIuc3RhdHVzID09IDMwNCB8fCB4aHJS
ZXMgPT0galF1ZXJ5Lmxhc3RNb2RpZmllZFt1cmxdIHx8CgkJCQlqUXVlcnkuYnJvd3Nlci5zYWZh
cmkgJiYgeGhyLnN0YXR1cyA9PSB1bmRlZmluZWQ7CgkJfSBjYXRjaChlKXt9CgkJcmV0dXJuIGZh
bHNlOwoJfSwKCglodHRwRGF0YTogZnVuY3Rpb24oIHhociwgdHlwZSwgZmlsdGVyICkgewoJCXZh
ciBjdCA9IHhoci5nZXRSZXNwb25zZUhlYWRlcigiY29udGVudC10eXBlIiksCgkJCXhtbCA9IHR5
cGUgPT0gInhtbCIgfHwgIXR5cGUgJiYgY3QgJiYgY3QuaW5kZXhPZigieG1sIikgPj0gMCwKCQkJ
ZGF0YSA9IHhtbCA/IHhoci5yZXNwb25zZVhNTCA6IHhoci5yZXNwb25zZVRleHQ7CgoJCWlmICgg
eG1sICYmIGRhdGEuZG9jdW1lbnRFbGVtZW50LnRhZ05hbWUgPT0gInBhcnNlcmVycm9yIiApCgkJ
CXRocm93ICJwYXJzZXJlcnJvciI7CgkJCQoJCS8vIEFsbG93IGEgcHJlLWZpbHRlcmluZyBmdW5j
dGlvbiB0byBzYW5pdGl6ZSB0aGUgcmVzcG9uc2UKCQlpZiggZmlsdGVyICkKCQkJZGF0YSA9IGZp
bHRlciggZGF0YSwgdHlwZSApOwoKCQkvLyBJZiB0aGUgdHlwZSBpcyAic2NyaXB0IiwgZXZhbCBp
dCBpbiBnbG9iYWwgY29udGV4dAoJCWlmICggdHlwZSA9PSAic2NyaXB0IiApCgkJCWpRdWVyeS5n
bG9iYWxFdmFsKCBkYXRhICk7CgoJCS8vIEdldCB0aGUgSmF2YVNjcmlwdCBvYmplY3QsIGlmIEpT
T04gaXMgdXNlZC4KCQlpZiAoIHR5cGUgPT0gImpzb24iICkKCQkJZGF0YSA9IGV2YWwoIigiICsg
ZGF0YSArICIpIik7CgoJCXJldHVybiBkYXRhOwoJfSwKCgkvLyBTZXJpYWxpemUgYW4gYXJyYXkg
b2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZgoJLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkg
c3RyaW5nCglwYXJhbTogZnVuY3Rpb24oIGEgKSB7CgkJdmFyIHMgPSBbXTsKCgkJLy8gSWYgYW4g
YXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkKCQkvLyBvZiBm
b3JtIGVsZW1lbnRzCgkJaWYgKCBhLmNvbnN0cnVjdG9yID09IEFycmF5IHx8IGEuanF1ZXJ5ICkK
CQkJLy8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzCgkJCWpRdWVyeS5lYWNoKCBhLCBmdW5j
dGlvbigpewoJCQkJcy5wdXNoKCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5uYW1lKSArICI9IiAr
IGVuY29kZVVSSUNvbXBvbmVudCggdGhpcy52YWx1ZSApICk7CgkJCX0pOwoKCQkvLyBPdGhlcndp
c2UsIGFzc3VtZSB0aGF0IGl0J3MgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycwoJCWVsc2UK
CQkJLy8gU2VyaWFsaXplIHRoZSBrZXkvdmFsdWVzCgkJCWZvciAoIHZhciBqIGluIGEgKQoJCQkJ
Ly8gSWYgdGhlIHZhbHVlIGlzIGFuIGFycmF5IHRoZW4gdGhlIGtleSBuYW1lcyBuZWVkIHRvIGJl
IHJlcGVhdGVkCgkJCQlpZiAoIGFbal0gJiYgYVtqXS5jb25zdHJ1Y3RvciA9PSBBcnJheSApCgkJ
CQkJalF1ZXJ5LmVhY2goIGFbal0sIGZ1bmN0aW9uKCl7CgkJCQkJCXMucHVzaCggZW5jb2RlVVJJ
Q29tcG9uZW50KGopICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KCB0aGlzICkgKTsKCQkJCQl9
KTsKCQkJCWVsc2UKCQkJCQlzLnB1c2goIGVuY29kZVVSSUNvbXBvbmVudChqKSArICI9IiArIGVu
Y29kZVVSSUNvbXBvbmVudCggalF1ZXJ5LmlzRnVuY3Rpb24oYVtqXSkgPyBhW2pdKCkgOiBhW2pd
ICkgKTsKCgkJLy8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvbgoJCXJldHVybiBz
LmpvaW4oIiYiKS5yZXBsYWNlKC8lMjAvZywgIisiKTsKCX0KCn0pOwpqUXVlcnkuZm4uZXh0ZW5k
KHsKCXNob3c6IGZ1bmN0aW9uKHNwZWVkLGNhbGxiYWNrKXsKCQlyZXR1cm4gc3BlZWQgPwoJCQl0
aGlzLmFuaW1hdGUoewoJCQkJaGVpZ2h0OiAic2hvdyIsIHdpZHRoOiAic2hvdyIsIG9wYWNpdHk6
ICJzaG93IgoJCQl9LCBzcGVlZCwgY2FsbGJhY2spIDoKCgkJCXRoaXMuZmlsdGVyKCI6aGlkZGVu
IikuZWFjaChmdW5jdGlvbigpewoJCQkJdGhpcy5zdHlsZS5kaXNwbGF5ID0gdGhpcy5vbGRibG9j
ayB8fCAiIjsKCQkJCWlmICggalF1ZXJ5LmNzcyh0aGlzLCJkaXNwbGF5IikgPT0gIm5vbmUiICkg
ewoJCQkJCXZhciBlbGVtID0galF1ZXJ5KCI8IiArIHRoaXMudGFnTmFtZSArICIgLz4iKS5hcHBl
bmRUbygiYm9keSIpOwoJCQkJCXRoaXMuc3R5bGUuZGlzcGxheSA9IGVsZW0uY3NzKCJkaXNwbGF5
Iik7CgkJCQkJLy8gaGFuZGxlIGFuIGVkZ2UgY29uZGl0aW9uIHdoZXJlIGNzcyBpcyAtIGRpdiB7
IGRpc3BsYXk6bm9uZTsgfSBvciBzaW1pbGFyCgkJCQkJaWYgKHRoaXMuc3R5bGUuZGlzcGxheSA9
PSAibm9uZSIpCgkJCQkJCXRoaXMuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CgkJCQkJZWxlbS5y
ZW1vdmUoKTsKCQkJCX0KCQkJfSkuZW5kKCk7Cgl9LAoKCWhpZGU6IGZ1bmN0aW9uKHNwZWVkLGNh
bGxiYWNrKXsKCQlyZXR1cm4gc3BlZWQgPwoJCQl0aGlzLmFuaW1hdGUoewoJCQkJaGVpZ2h0OiAi
aGlkZSIsIHdpZHRoOiAiaGlkZSIsIG9wYWNpdHk6ICJoaWRlIgoJCQl9LCBzcGVlZCwgY2FsbGJh
Y2spIDoKCgkJCXRoaXMuZmlsdGVyKCI6dmlzaWJsZSIpLmVhY2goZnVuY3Rpb24oKXsKCQkJCXRo
aXMub2xkYmxvY2sgPSB0aGlzLm9sZGJsb2NrIHx8IGpRdWVyeS5jc3ModGhpcywiZGlzcGxheSIp
OwoJCQkJdGhpcy5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQl9KS5lbmQoKTsKCX0sCgoJLy8g
U2F2ZSB0aGUgb2xkIHRvZ2dsZSBmdW5jdGlvbgoJX3RvZ2dsZTogalF1ZXJ5LmZuLnRvZ2dsZSwK
Cgl0b2dnbGU6IGZ1bmN0aW9uKCBmbiwgZm4yICl7CgkJcmV0dXJuIGpRdWVyeS5pc0Z1bmN0aW9u
KGZuKSAmJiBqUXVlcnkuaXNGdW5jdGlvbihmbjIpID8KCQkJdGhpcy5fdG9nZ2xlLmFwcGx5KCB0
aGlzLCBhcmd1bWVudHMgKSA6CgkJCWZuID8KCQkJCXRoaXMuYW5pbWF0ZSh7CgkJCQkJaGVpZ2h0
OiAidG9nZ2xlIiwgd2lkdGg6ICJ0b2dnbGUiLCBvcGFjaXR5OiAidG9nZ2xlIgoJCQkJfSwgZm4s
IGZuMikgOgoJCQkJdGhpcy5lYWNoKGZ1bmN0aW9uKCl7CgkJCQkJalF1ZXJ5KHRoaXMpWyBqUXVl
cnkodGhpcykuaXMoIjpoaWRkZW4iKSA/ICJzaG93IiA6ICJoaWRlIiBdKCk7CgkJCQl9KTsKCX0s
CgoJc2xpZGVEb3duOiBmdW5jdGlvbihzcGVlZCxjYWxsYmFjayl7CgkJcmV0dXJuIHRoaXMuYW5p
bWF0ZSh7aGVpZ2h0OiAic2hvdyJ9LCBzcGVlZCwgY2FsbGJhY2spOwoJfSwKCglzbGlkZVVwOiBm
dW5jdGlvbihzcGVlZCxjYWxsYmFjayl7CgkJcmV0dXJuIHRoaXMuYW5pbWF0ZSh7aGVpZ2h0OiAi
aGlkZSJ9LCBzcGVlZCwgY2FsbGJhY2spOwoJfSwKCglzbGlkZVRvZ2dsZTogZnVuY3Rpb24oc3Bl
ZWQsIGNhbGxiYWNrKXsKCQlyZXR1cm4gdGhpcy5hbmltYXRlKHtoZWlnaHQ6ICJ0b2dnbGUifSwg
c3BlZWQsIGNhbGxiYWNrKTsKCX0sCgoJZmFkZUluOiBmdW5jdGlvbihzcGVlZCwgY2FsbGJhY2sp
ewoJCXJldHVybiB0aGlzLmFuaW1hdGUoe29wYWNpdHk6ICJzaG93In0sIHNwZWVkLCBjYWxsYmFj
ayk7Cgl9LAoKCWZhZGVPdXQ6IGZ1bmN0aW9uKHNwZWVkLCBjYWxsYmFjayl7CgkJcmV0dXJuIHRo
aXMuYW5pbWF0ZSh7b3BhY2l0eTogImhpZGUifSwgc3BlZWQsIGNhbGxiYWNrKTsKCX0sCgoJZmFk
ZVRvOiBmdW5jdGlvbihzcGVlZCx0byxjYWxsYmFjayl7CgkJcmV0dXJuIHRoaXMuYW5pbWF0ZSh7
b3BhY2l0eTogdG99LCBzcGVlZCwgY2FsbGJhY2spOwoJfSwKCglhbmltYXRlOiBmdW5jdGlvbigg
cHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7CgkJdmFyIG9wdGFsbCA9IGpRdWVyeS5z
cGVlZChzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayk7CgoJCXJldHVybiB0aGlzWyBvcHRhbGwucXVl
dWUgPT09IGZhbHNlID8gImVhY2giIDogInF1ZXVlIiBdKGZ1bmN0aW9uKCl7CgkJCWlmICggdGhp
cy5ub2RlVHlwZSAhPSAxKQoJCQkJcmV0dXJuIGZhbHNlOwoKCQkJdmFyIG9wdCA9IGpRdWVyeS5l
eHRlbmQoe30sIG9wdGFsbCksIHAsCgkJCQloaWRkZW4gPSBqUXVlcnkodGhpcykuaXMoIjpoaWRk
ZW4iKSwgc2VsZiA9IHRoaXM7CgoJCQlmb3IgKCBwIGluIHByb3AgKSB7CgkJCQlpZiAoIHByb3Bb
cF0gPT0gImhpZGUiICYmIGhpZGRlbiB8fCBwcm9wW3BdID09ICJzaG93IiAmJiAhaGlkZGVuICkK
CQkJCQlyZXR1cm4gb3B0LmNvbXBsZXRlLmNhbGwodGhpcyk7CgoJCQkJaWYgKCBwID09ICJoZWln
aHQiIHx8IHAgPT0gIndpZHRoIiApIHsKCQkJCQkvLyBTdG9yZSBkaXNwbGF5IHByb3BlcnR5CgkJ
CQkJb3B0LmRpc3BsYXkgPSBqUXVlcnkuY3NzKHRoaXMsICJkaXNwbGF5Iik7CgoJCQkJCS8vIE1h
a2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dAoJCQkJCW9wdC5vdmVyZmxvdyA9IHRoaXMu
c3R5bGUub3ZlcmZsb3c7CgkJCQl9CgkJCX0KCgkJCWlmICggb3B0Lm92ZXJmbG93ICE9IG51bGwg
KQoJCQkJdGhpcy5zdHlsZS5vdmVyZmxvdyA9ICJoaWRkZW4iOwoKCQkJb3B0LmN1ckFuaW0gPSBq
UXVlcnkuZXh0ZW5kKHt9LCBwcm9wKTsKCgkJCWpRdWVyeS5lYWNoKCBwcm9wLCBmdW5jdGlvbihu
YW1lLCB2YWwpewoJCQkJdmFyIGUgPSBuZXcgalF1ZXJ5LmZ4KCBzZWxmLCBvcHQsIG5hbWUgKTsK
CgkJCQlpZiAoIC90b2dnbGV8c2hvd3xoaWRlLy50ZXN0KHZhbCkgKQoJCQkJCWVbIHZhbCA9PSAi
dG9nZ2xlIiA/IGhpZGRlbiA/ICJzaG93IiA6ICJoaWRlIiA6IHZhbCBdKCBwcm9wICk7CgkJCQll
bHNlIHsKCQkJCQl2YXIgcGFydHMgPSB2YWwudG9TdHJpbmcoKS5tYXRjaCgvXihbKy1dPSk/KFtc
ZCstLl0rKSguKikkLyksCgkJCQkJCXN0YXJ0ID0gZS5jdXIodHJ1ZSkgfHwgMDsKCgkJCQkJaWYg
KCBwYXJ0cyApIHsKCQkJCQkJdmFyIGVuZCA9IHBhcnNlRmxvYXQocGFydHNbMl0pLAoJCQkJCQkJ
dW5pdCA9IHBhcnRzWzNdIHx8ICJweCI7CgoJCQkJCQkvLyBXZSBuZWVkIHRvIGNvbXB1dGUgc3Rh
cnRpbmcgdmFsdWUKCQkJCQkJaWYgKCB1bml0ICE9ICJweCIgKSB7CgkJCQkJCQlzZWxmLnN0eWxl
WyBuYW1lIF0gPSAoZW5kIHx8IDEpICsgdW5pdDsKCQkJCQkJCXN0YXJ0ID0gKChlbmQgfHwgMSkg
LyBlLmN1cih0cnVlKSkgKiBzdGFydDsKCQkJCQkJCXNlbGYuc3R5bGVbIG5hbWUgXSA9IHN0YXJ0
ICsgdW5pdDsKCQkJCQkJfQoKCQkJCQkJLy8gSWYgYSArPS8tPSB0b2tlbiB3YXMgcHJvdmlkZWQs
IHdlJ3JlIGRvaW5nIGEgcmVsYXRpdmUgYW5pbWF0aW9uCgkJCQkJCWlmICggcGFydHNbMV0gKQoJ
CQkJCQkJZW5kID0gKChwYXJ0c1sxXSA9PSAiLT0iID8gLTEgOiAxKSAqIGVuZCkgKyBzdGFydDsK
CgkJCQkJCWUuY3VzdG9tKCBzdGFydCwgZW5kLCB1bml0ICk7CgkJCQkJfSBlbHNlCgkJCQkJCWUu
Y3VzdG9tKCBzdGFydCwgdmFsLCAiIiApOwoJCQkJfQoJCQl9KTsKCgkJCS8vIEZvciBKUyBzdHJp
Y3QgY29tcGxpYW5jZQoJCQlyZXR1cm4gdHJ1ZTsKCQl9KTsKCX0sCgoJcXVldWU6IGZ1bmN0aW9u
KHR5cGUsIGZuKXsKCQlpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKHR5cGUpIHx8ICggdHlwZSAmJiB0
eXBlLmNvbnN0cnVjdG9yID09IEFycmF5ICkpIHsKCQkJZm4gPSB0eXBlOwoJCQl0eXBlID0gImZ4
IjsKCQl9CgoJCWlmICggIXR5cGUgfHwgKHR5cGVvZiB0eXBlID09ICJzdHJpbmciICYmICFmbikg
KQoJCQlyZXR1cm4gcXVldWUoIHRoaXNbMF0sIHR5cGUgKTsKCgkJcmV0dXJuIHRoaXMuZWFjaChm
dW5jdGlvbigpewoJCQlpZiAoIGZuLmNvbnN0cnVjdG9yID09IEFycmF5ICkKCQkJCXF1ZXVlKHRo
aXMsIHR5cGUsIGZuKTsKCQkJZWxzZSB7CgkJCQlxdWV1ZSh0aGlzLCB0eXBlKS5wdXNoKCBmbiAp
OwoKCQkJCWlmICggcXVldWUodGhpcywgdHlwZSkubGVuZ3RoID09IDEgKQoJCQkJCWZuLmNhbGwo
dGhpcyk7CgkJCX0KCQl9KTsKCX0sCgoJc3RvcDogZnVuY3Rpb24oY2xlYXJRdWV1ZSwgZ290b0Vu
ZCl7CgkJdmFyIHRpbWVycyA9IGpRdWVyeS50aW1lcnM7CgoJCWlmIChjbGVhclF1ZXVlKQoJCQl0
aGlzLnF1ZXVlKFtdKTsKCgkJdGhpcy5lYWNoKGZ1bmN0aW9uKCl7CgkJCS8vIGdvIGluIHJldmVy
c2Ugb3JkZXIgc28gYW55dGhpbmcgYWRkZWQgdG8gdGhlIHF1ZXVlIGR1cmluZyB0aGUgbG9vcCBp
cyBpZ25vcmVkCgkJCWZvciAoIHZhciBpID0gdGltZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0t
ICkKCQkJCWlmICggdGltZXJzW2ldLmVsZW0gPT0gdGhpcyApIHsKCQkJCQlpZiAoZ290b0VuZCkK
CQkJCQkJLy8gZm9yY2UgdGhlIG5leHQgc3RlcCB0byBiZSB0aGUgbGFzdAoJCQkJCQl0aW1lcnNb
aV0odHJ1ZSk7CgkJCQkJdGltZXJzLnNwbGljZShpLCAxKTsKCQkJCX0KCQl9KTsKCgkJLy8gc3Rh
cnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZAoJ
CWlmICghZ290b0VuZCkKCQkJdGhpcy5kZXF1ZXVlKCk7CgoJCXJldHVybiB0aGlzOwoJfQoKfSk7
Cgp2YXIgcXVldWUgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgYXJyYXkgKSB7CglpZiAoIGVsZW0g
KXsKCgkJdHlwZSA9IHR5cGUgfHwgImZ4IjsKCgkJdmFyIHEgPSBqUXVlcnkuZGF0YSggZWxlbSwg
dHlwZSArICJxdWV1ZSIgKTsKCgkJaWYgKCAhcSB8fCBhcnJheSApCgkJCXEgPSBqUXVlcnkuZGF0
YSggZWxlbSwgdHlwZSArICJxdWV1ZSIsIGpRdWVyeS5tYWtlQXJyYXkoYXJyYXkpICk7CgoJfQoJ
cmV0dXJuIHE7Cn07CgpqUXVlcnkuZm4uZGVxdWV1ZSA9IGZ1bmN0aW9uKHR5cGUpewoJdHlwZSA9
IHR5cGUgfHwgImZ4IjsKCglyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7CgkJdmFyIHEgPSBx
dWV1ZSh0aGlzLCB0eXBlKTsKCgkJcS5zaGlmdCgpOwoKCQlpZiAoIHEubGVuZ3RoICkKCQkJcVsw
XS5jYWxsKCB0aGlzICk7Cgl9KTsKfTsKCmpRdWVyeS5leHRlbmQoewoKCXNwZWVkOiBmdW5jdGlv
bihzcGVlZCwgZWFzaW5nLCBmbikgewoJCXZhciBvcHQgPSBzcGVlZCAmJiBzcGVlZC5jb25zdHJ1
Y3RvciA9PSBPYmplY3QgPyBzcGVlZCA6IHsKCQkJY29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNp
bmcgfHwKCQkJCWpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLAoJCQlkdXJhdGlv
bjogc3BlZWQsCgkJCWVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiBlYXNpbmcuY29u
c3RydWN0b3IgIT0gRnVuY3Rpb24gJiYgZWFzaW5nCgkJfTsKCgkJb3B0LmR1cmF0aW9uID0gKG9w
dC5kdXJhdGlvbiAmJiBvcHQuZHVyYXRpb24uY29uc3RydWN0b3IgPT0gTnVtYmVyID8KCQkJb3B0
LmR1cmF0aW9uIDoKCQkJalF1ZXJ5LmZ4LnNwZWVkc1tvcHQuZHVyYXRpb25dKSB8fCBqUXVlcnku
Znguc3BlZWRzLmRlZjsKCgkJLy8gUXVldWVpbmcKCQlvcHQub2xkID0gb3B0LmNvbXBsZXRlOwoJ
CW9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCl7CgkJCWlmICggb3B0LnF1ZXVlICE9PSBmYWxzZSAp
CgkJCQlqUXVlcnkodGhpcykuZGVxdWV1ZSgpOwoJCQlpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBv
cHQub2xkICkgKQoJCQkJb3B0Lm9sZC5jYWxsKCB0aGlzICk7CgkJfTsKCgkJcmV0dXJuIG9wdDsK
CX0sCgoJZWFzaW5nOiB7CgkJbGluZWFyOiBmdW5jdGlvbiggcCwgbiwgZmlyc3ROdW0sIGRpZmYg
KSB7CgkJCXJldHVybiBmaXJzdE51bSArIGRpZmYgKiBwOwoJCX0sCgkJc3dpbmc6IGZ1bmN0aW9u
KCBwLCBuLCBmaXJzdE51bSwgZGlmZiApIHsKCQkJcmV0dXJuICgoLU1hdGguY29zKHAqTWF0aC5Q
SSkvMikgKyAwLjUpICogZGlmZiArIGZpcnN0TnVtOwoJCX0KCX0sCgoJdGltZXJzOiBbXSwKCXRp
bWVySWQ6IG51bGwsCgoJZng6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wICl7CgkJdGhp
cy5vcHRpb25zID0gb3B0aW9uczsKCQl0aGlzLmVsZW0gPSBlbGVtOwoJCXRoaXMucHJvcCA9IHBy
b3A7CgoJCWlmICggIW9wdGlvbnMub3JpZyApCgkJCW9wdGlvbnMub3JpZyA9IHt9OwoJfQoKfSk7
CgpqUXVlcnkuZngucHJvdG90eXBlID0gewoKCS8vIFNpbXBsZSBmdW5jdGlvbiBmb3Igc2V0dGlu
ZyBhIHN0eWxlIHZhbHVlCgl1cGRhdGU6IGZ1bmN0aW9uKCl7CgkJaWYgKCB0aGlzLm9wdGlvbnMu
c3RlcCApCgkJCXRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRo
aXMgKTsKCgkJKGpRdWVyeS5meC5zdGVwW3RoaXMucHJvcF0gfHwgalF1ZXJ5LmZ4LnN0ZXAuX2Rl
ZmF1bHQpKCB0aGlzICk7CgoJCS8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGJsb2NrIGZvciBo
ZWlnaHQvd2lkdGggYW5pbWF0aW9ucwoJCWlmICggdGhpcy5wcm9wID09ICJoZWlnaHQiIHx8IHRo
aXMucHJvcCA9PSAid2lkdGgiICkKCQkJdGhpcy5lbGVtLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2si
OwoJfSwKCgkvLyBHZXQgdGhlIGN1cnJlbnQgc2l6ZQoJY3VyOiBmdW5jdGlvbihmb3JjZSl7CgkJ
aWYgKCB0aGlzLmVsZW1bdGhpcy5wcm9wXSAhPSBudWxsICYmIHRoaXMuZWxlbS5zdHlsZVt0aGlz
LnByb3BdID09IG51bGwgKQoJCQlyZXR1cm4gdGhpcy5lbGVtWyB0aGlzLnByb3AgXTsKCgkJdmFy
IHIgPSBwYXJzZUZsb2F0KGpRdWVyeS5jc3ModGhpcy5lbGVtLCB0aGlzLnByb3AsIGZvcmNlKSk7
CgkJcmV0dXJuIHIgJiYgciA+IC0xMDAwMCA/IHIgOiBwYXJzZUZsb2F0KGpRdWVyeS5jdXJDU1Mo
dGhpcy5lbGVtLCB0aGlzLnByb3ApKSB8fCAwOwoJfSwKCgkvLyBTdGFydCBhbiBhbmltYXRpb24g
ZnJvbSBvbmUgbnVtYmVyIHRvIGFub3RoZXIKCWN1c3RvbTogZnVuY3Rpb24oZnJvbSwgdG8sIHVu
aXQpewoJCXRoaXMuc3RhcnRUaW1lID0gbm93KCk7CgkJdGhpcy5zdGFydCA9IGZyb207CgkJdGhp
cy5lbmQgPSB0bzsKCQl0aGlzLnVuaXQgPSB1bml0IHx8IHRoaXMudW5pdCB8fCAicHgiOwoJCXRo
aXMubm93ID0gdGhpcy5zdGFydDsKCQl0aGlzLnBvcyA9IHRoaXMuc3RhdGUgPSAwOwoJCXRoaXMu
dXBkYXRlKCk7CgoJCXZhciBzZWxmID0gdGhpczsKCQlmdW5jdGlvbiB0KGdvdG9FbmQpewoJCQly
ZXR1cm4gc2VsZi5zdGVwKGdvdG9FbmQpOwoJCX0KCgkJdC5lbGVtID0gdGhpcy5lbGVtOwoKCQlq
UXVlcnkudGltZXJzLnB1c2godCk7CgoJCWlmICggalF1ZXJ5LnRpbWVySWQgPT0gbnVsbCApIHsK
CQkJalF1ZXJ5LnRpbWVySWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpewoJCQkJdmFyIHRpbWVy
cyA9IGpRdWVyeS50aW1lcnM7CgoJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgdGltZXJzLmxlbmd0
aDsgaSsrICkKCQkJCQlpZiAoICF0aW1lcnNbaV0oKSApCgkJCQkJCXRpbWVycy5zcGxpY2UoaS0t
LCAxKTsKCgkJCQlpZiAoICF0aW1lcnMubGVuZ3RoICkgewoJCQkJCWNsZWFySW50ZXJ2YWwoIGpR
dWVyeS50aW1lcklkICk7CgkJCQkJalF1ZXJ5LnRpbWVySWQgPSBudWxsOwoJCQkJfQoJCQl9LCAx
Myk7CgkJfQoJfSwKCgkvLyBTaW1wbGUgJ3Nob3cnIGZ1bmN0aW9uCglzaG93OiBmdW5jdGlvbigp
ewoJCS8vIFJlbWVtYmVyIHdoZXJlIHdlIHN0YXJ0ZWQsIHNvIHRoYXQgd2UgY2FuIGdvIGJhY2sg
dG8gaXQgbGF0ZXIKCQl0aGlzLm9wdGlvbnMub3JpZ1t0aGlzLnByb3BdID0galF1ZXJ5LmF0dHIo
IHRoaXMuZWxlbS5zdHlsZSwgdGhpcy5wcm9wICk7CgkJdGhpcy5vcHRpb25zLnNob3cgPSB0cnVl
OwoKCQkvLyBCZWdpbiB0aGUgYW5pbWF0aW9uCgkJdGhpcy5jdXN0b20oMCwgdGhpcy5jdXIoKSk7
CgoJCS8vIE1ha2Ugc3VyZSB0aGF0IHdlIHN0YXJ0IGF0IGEgc21hbGwgd2lkdGgvaGVpZ2h0IHRv
IGF2b2lkIGFueQoJCS8vIGZsYXNoIG9mIGNvbnRlbnQKCQlpZiAoIHRoaXMucHJvcCA9PSAid2lk
dGgiIHx8IHRoaXMucHJvcCA9PSAiaGVpZ2h0IiApCgkJCXRoaXMuZWxlbS5zdHlsZVt0aGlzLnBy
b3BdID0gIjFweCI7CgoJCS8vIFN0YXJ0IGJ5IHNob3dpbmcgdGhlIGVsZW1lbnQKCQlqUXVlcnko
dGhpcy5lbGVtKS5zaG93KCk7Cgl9LAoKCS8vIFNpbXBsZSAnaGlkZScgZnVuY3Rpb24KCWhpZGU6
IGZ1bmN0aW9uKCl7CgkJLy8gUmVtZW1iZXIgd2hlcmUgd2Ugc3RhcnRlZCwgc28gdGhhdCB3ZSBj
YW4gZ28gYmFjayB0byBpdCBsYXRlcgoJCXRoaXMub3B0aW9ucy5vcmlnW3RoaXMucHJvcF0gPSBq
UXVlcnkuYXR0ciggdGhpcy5lbGVtLnN0eWxlLCB0aGlzLnByb3AgKTsKCQl0aGlzLm9wdGlvbnMu
aGlkZSA9IHRydWU7CgoJCS8vIEJlZ2luIHRoZSBhbmltYXRpb24KCQl0aGlzLmN1c3RvbSh0aGlz
LmN1cigpLCAwKTsKCX0sCgoJLy8gRWFjaCBzdGVwIG9mIGFuIGFuaW1hdGlvbgoJc3RlcDogZnVu
Y3Rpb24oZ290b0VuZCl7CgkJdmFyIHQgPSBub3coKTsKCgkJaWYgKCBnb3RvRW5kIHx8IHQgPiB0
aGlzLm9wdGlvbnMuZHVyYXRpb24gKyB0aGlzLnN0YXJ0VGltZSApIHsKCQkJdGhpcy5ub3cgPSB0
aGlzLmVuZDsKCQkJdGhpcy5wb3MgPSB0aGlzLnN0YXRlID0gMTsKCQkJdGhpcy51cGRhdGUoKTsK
CgkJCXRoaXMub3B0aW9ucy5jdXJBbmltWyB0aGlzLnByb3AgXSA9IHRydWU7CgoJCQl2YXIgZG9u
ZSA9IHRydWU7CgkJCWZvciAoIHZhciBpIGluIHRoaXMub3B0aW9ucy5jdXJBbmltICkKCQkJCWlm
ICggdGhpcy5vcHRpb25zLmN1ckFuaW1baV0gIT09IHRydWUgKQoJCQkJCWRvbmUgPSBmYWxzZTsK
CgkJCWlmICggZG9uZSApIHsKCQkJCWlmICggdGhpcy5vcHRpb25zLmRpc3BsYXkgIT0gbnVsbCAp
IHsKCQkJCQkvLyBSZXNldCB0aGUgb3ZlcmZsb3cKCQkJCQl0aGlzLmVsZW0uc3R5bGUub3ZlcmZs
b3cgPSB0aGlzLm9wdGlvbnMub3ZlcmZsb3c7CgoJCQkJCS8vIFJlc2V0IHRoZSBkaXNwbGF5CgkJ
CQkJdGhpcy5lbGVtLnN0eWxlLmRpc3BsYXkgPSB0aGlzLm9wdGlvbnMuZGlzcGxheTsKCQkJCQlp
ZiAoIGpRdWVyeS5jc3ModGhpcy5lbGVtLCAiZGlzcGxheSIpID09ICJub25lIiApCgkJCQkJCXRo
aXMuZWxlbS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKCQkJCX0KCgkJCQkvLyBIaWRlIHRoZSBl
bGVtZW50IGlmIHRoZSAiaGlkZSIgb3BlcmF0aW9uIHdhcyBkb25lCgkJCQlpZiAoIHRoaXMub3B0
aW9ucy5oaWRlICkKCQkJCQl0aGlzLmVsZW0uc3R5bGUuZGlzcGxheSA9ICJub25lIjsKCgkJCQkv
LyBSZXNldCB0aGUgcHJvcGVydGllcywgaWYgdGhlIGl0ZW0gaGFzIGJlZW4gaGlkZGVuIG9yIHNo
b3duCgkJCQlpZiAoIHRoaXMub3B0aW9ucy5oaWRlIHx8IHRoaXMub3B0aW9ucy5zaG93ICkKCQkJ
CQlmb3IgKCB2YXIgcCBpbiB0aGlzLm9wdGlvbnMuY3VyQW5pbSApCgkJCQkJCWpRdWVyeS5hdHRy
KHRoaXMuZWxlbS5zdHlsZSwgcCwgdGhpcy5vcHRpb25zLm9yaWdbcF0pOwoJCQl9CgoJCQlpZiAo
IGRvbmUgKQoJCQkJLy8gRXhlY3V0ZSB0aGUgY29tcGxldGUgZnVuY3Rpb24KCQkJCXRoaXMub3B0
aW9ucy5jb21wbGV0ZS5jYWxsKCB0aGlzLmVsZW0gKTsKCgkJCXJldHVybiBmYWxzZTsKCQl9IGVs
c2UgewoJCQl2YXIgbiA9IHQgLSB0aGlzLnN0YXJ0VGltZTsKCQkJdGhpcy5zdGF0ZSA9IG4gLyB0
aGlzLm9wdGlvbnMuZHVyYXRpb247CgoJCQkvLyBQZXJmb3JtIHRoZSBlYXNpbmcgZnVuY3Rpb24s
IGRlZmF1bHRzIHRvIHN3aW5nCgkJCXRoaXMucG9zID0galF1ZXJ5LmVhc2luZ1t0aGlzLm9wdGlv
bnMuZWFzaW5nIHx8IChqUXVlcnkuZWFzaW5nLnN3aW5nID8gInN3aW5nIiA6ICJsaW5lYXIiKV0o
dGhpcy5zdGF0ZSwgbiwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uKTsKCQkJdGhpcy5ub3cg
PSB0aGlzLnN0YXJ0ICsgKCh0aGlzLmVuZCAtIHRoaXMuc3RhcnQpICogdGhpcy5wb3MpOwoKCQkJ
Ly8gUGVyZm9ybSB0aGUgbmV4dCBzdGVwIG9mIHRoZSBhbmltYXRpb24KCQkJdGhpcy51cGRhdGUo
KTsKCQl9CgoJCXJldHVybiB0cnVlOwoJfQoKfTsKCmpRdWVyeS5leHRlbmQoIGpRdWVyeS5meCwg
ewoJc3BlZWRzOnsKCQlzbG93OiA2MDAsCiAJCWZhc3Q6IDIwMCwKIAkJLy8gRGVmYXVsdCBzcGVl
ZAogCQlkZWY6IDQwMAoJfSwKCXN0ZXA6IHsKCQlzY3JvbGxMZWZ0OiBmdW5jdGlvbihmeCl7CgkJ
CWZ4LmVsZW0uc2Nyb2xsTGVmdCA9IGZ4Lm5vdzsKCQl9LAoKCQlzY3JvbGxUb3A6IGZ1bmN0aW9u
KGZ4KXsKCQkJZnguZWxlbS5zY3JvbGxUb3AgPSBmeC5ub3c7CgkJfSwKCgkJb3BhY2l0eTogZnVu
Y3Rpb24oZngpewoJCQlqUXVlcnkuYXR0cihmeC5lbGVtLnN0eWxlLCAib3BhY2l0eSIsIGZ4Lm5v
dyk7CgkJfSwKCgkJX2RlZmF1bHQ6IGZ1bmN0aW9uKGZ4KXsKCQkJZnguZWxlbS5zdHlsZVsgZngu
cHJvcCBdID0gZngubm93ICsgZngudW5pdDsKCQl9Cgl9Cn0pOwovLyBUaGUgT2Zmc2V0IE1ldGhv
ZAovLyBPcmlnaW5hbGx5IEJ5IEJyYW5kb24gQWFyb24sIHBhcnQgb2YgdGhlIERpbWVuc2lvbiBQ
bHVnaW4KLy8gaHR0cDovL2pxdWVyeS5jb20vcGx1Z2lucy9wcm9qZWN0L2RpbWVuc2lvbnMKalF1
ZXJ5LmZuLm9mZnNldCA9IGZ1bmN0aW9uKCkgewoJdmFyIGxlZnQgPSAwLCB0b3AgPSAwLCBlbGVt
ID0gdGhpc1swXSwgcmVzdWx0czsKCglpZiAoIGVsZW0gKSB3aXRoICggalF1ZXJ5LmJyb3dzZXIg
KSB7CgkJdmFyIHBhcmVudCAgICAgICA9IGVsZW0ucGFyZW50Tm9kZSwKCQkgICAgb2Zmc2V0Q2hp
bGQgID0gZWxlbSwKCQkgICAgb2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQsCgkJICAg
IGRvYyAgICAgICAgICA9IGVsZW0ub3duZXJEb2N1bWVudCwKCQkgICAgc2FmYXJpMiAgICAgID0g
c2FmYXJpICYmIHBhcnNlSW50KHZlcnNpb24pIDwgNTIyICYmICEvYWRvYmVhaXIvaS50ZXN0KHVz
ZXJBZ2VudCksCgkJICAgIGNzcyAgICAgICAgICA9IGpRdWVyeS5jdXJDU1MsCgkJICAgIGZpeGVk
ICAgICAgICA9IGNzcyhlbGVtLCAicG9zaXRpb24iKSA9PSAiZml4ZWQiOwoKCQkvLyBVc2UgZ2V0
Qm91bmRpbmdDbGllbnRSZWN0IGlmIGF2YWlsYWJsZQoJCWlmICggZWxlbS5nZXRCb3VuZGluZ0Ns
aWVudFJlY3QgKSB7CgkJCXZhciBib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwoK
CQkJLy8gQWRkIHRoZSBkb2N1bWVudCBzY3JvbGwgb2Zmc2V0cwoJCQlhZGQoYm94LmxlZnQgKyBN
YXRoLm1heChkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsIGRvYy5ib2R5LnNjcm9sbExl
ZnQpLAoJCQkJYm94LnRvcCAgKyBNYXRoLm1heChkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRv
cCwgIGRvYy5ib2R5LnNjcm9sbFRvcCkpOwoKCQkJLy8gSUUgYWRkcyB0aGUgSFRNTCBlbGVtZW50
J3MgYm9yZGVyLCBieSBkZWZhdWx0IGl0IGlzIG1lZGl1bSB3aGljaCBpcyAycHgKCQkJLy8gSUUg
NiBhbmQgNyBxdWlya3MgbW9kZSB0aGUgYm9yZGVyIHdpZHRoIGlzIG92ZXJ3cml0YWJsZSBieSB0
aGUgZm9sbG93aW5nIGNzcyBodG1sIHsgYm9yZGVyOiAwOyB9CgkJCS8vIElFIDcgc3RhbmRhcmRz
IG1vZGUsIHRoZSBib3JkZXIgaXMgYWx3YXlzIDJweAoJCQkvLyBUaGlzIGJvcmRlci9vZmZzZXQg
aXMgdHlwaWNhbGx5IHJlcHJlc2VudGVkIGJ5IHRoZSBjbGllbnRMZWZ0IGFuZCBjbGllbnRUb3Ag
cHJvcGVydGllcwoJCQkvLyBIb3dldmVyLCBpbiBJRTYgYW5kIDcgcXVpcmtzIG1vZGUgdGhlIGNs
aWVudExlZnQgYW5kIGNsaWVudFRvcCBwcm9wZXJ0aWVzIGFyZSBub3QgdXBkYXRlZCB3aGVuIG92
ZXJ3cml0aW5nIGl0IHZpYSBDU1MKCQkJLy8gVGhlcmVmb3JlIHRoaXMgbWV0aG9kIHdpbGwgYmUg
b2ZmIGJ5IDJweCBpbiBJRSB3aGlsZSBpbiBxdWlya3Ntb2RlCgkJCWFkZCggLWRvYy5kb2N1bWVu
dEVsZW1lbnQuY2xpZW50TGVmdCwgLWRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50VG9wICk7CgoJ
CS8vIE90aGVyd2lzZSBsb29wIHRocm91Z2ggdGhlIG9mZnNldFBhcmVudHMgYW5kIHBhcmVudE5v
ZGVzCgkJfSBlbHNlIHsKCgkJCS8vIEluaXRpYWwgZWxlbWVudCBvZmZzZXRzCgkJCWFkZCggZWxl
bS5vZmZzZXRMZWZ0LCBlbGVtLm9mZnNldFRvcCApOwoKCQkJLy8gR2V0IHBhcmVudCBvZmZzZXRz
CgkJCXdoaWxlICggb2Zmc2V0UGFyZW50ICkgewoJCQkJLy8gQWRkIG9mZnNldFBhcmVudCBvZmZz
ZXRzCgkJCQlhZGQoIG9mZnNldFBhcmVudC5vZmZzZXRMZWZ0LCBvZmZzZXRQYXJlbnQub2Zmc2V0
VG9wICk7CgoJCQkJLy8gTW96aWxsYSBhbmQgU2FmYXJpID4gMiBkb2VzIG5vdCBpbmNsdWRlIHRo
ZSBib3JkZXIgb24gb2Zmc2V0IHBhcmVudHMKCQkJCS8vIEhvd2V2ZXIgTW96aWxsYSBhZGRzIHRo
ZSBib3JkZXIgZm9yIHRhYmxlIG9yIHRhYmxlIGNlbGxzCgkJCQlpZiAoIG1vemlsbGEgJiYgIS9e
dChhYmxlfGR8aCkkL2kudGVzdChvZmZzZXRQYXJlbnQudGFnTmFtZSkgfHwgc2FmYXJpICYmICFz
YWZhcmkyICkKCQkJCQlib3JkZXIoIG9mZnNldFBhcmVudCApOwoKCQkJCS8vIEFkZCB0aGUgZG9j
dW1lbnQgc2Nyb2xsIG9mZnNldHMgaWYgcG9zaXRpb24gaXMgZml4ZWQgb24gYW55IG9mZnNldFBh
cmVudAoJCQkJaWYgKCAhZml4ZWQgJiYgY3NzKG9mZnNldFBhcmVudCwgInBvc2l0aW9uIikgPT0g
ImZpeGVkIiApCgkJCQkJZml4ZWQgPSB0cnVlOwoKCQkJCS8vIFNldCBvZmZzZXRDaGlsZCB0byBw
cmV2aW91cyBvZmZzZXRQYXJlbnQgdW5sZXNzIGl0IGlzIHRoZSBib2R5IGVsZW1lbnQKCQkJCW9m
ZnNldENoaWxkICA9IC9eYm9keSQvaS50ZXN0KG9mZnNldFBhcmVudC50YWdOYW1lKSA/IG9mZnNl
dENoaWxkIDogb2Zmc2V0UGFyZW50OwoJCQkJLy8gR2V0IG5leHQgb2Zmc2V0UGFyZW50CgkJCQlv
ZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXI=";

Parameter Frag4 = "ZW50Lm9mZnNldFBhcmVudDsKCQkJfQoKCQkJLy8gR2V0IHBhcmVudCBzY3JvbGwgb2Zmc2V0cwoJ
CQl3aGlsZSAoIHBhcmVudCAmJiBwYXJlbnQudGFnTmFtZSAmJiAhL15ib2R5fGh0bWwkL2kudGVz
dChwYXJlbnQudGFnTmFtZSkgKSB7CgkJCQkvLyBSZW1vdmUgcGFyZW50IHNjcm9sbCBVTkxFU1Mg
dGhhdCBwYXJlbnQgaXMgaW5saW5lIG9yIGEgdGFibGUgdG8gd29yayBhcm91bmQgT3BlcmEgaW5s
aW5lL3RhYmxlIHNjcm9sbExlZnQvVG9wIGJ1ZwoJCQkJaWYgKCAhL15pbmxpbmV8dGFibGUuKiQv
aS50ZXN0KGNzcyhwYXJlbnQsICJkaXNwbGF5IikpICkKCQkJCQkvLyBTdWJ0cmFjdCBwYXJlbnQg
c2Nyb2xsIG9mZnNldHMKCQkJCQlhZGQoIC1wYXJlbnQuc2Nyb2xsTGVmdCwgLXBhcmVudC5zY3Jv
bGxUb3AgKTsKCgkJCQkvLyBNb3ppbGxhIGRvZXMgbm90IGFkZCB0aGUgYm9yZGVyIGZvciBhIHBh
cmVudCB0aGF0IGhhcyBvdmVyZmxvdyAhPSB2aXNpYmxlCgkJCQlpZiAoIG1vemlsbGEgJiYgY3Nz
KHBhcmVudCwgIm92ZXJmbG93IikgIT0gInZpc2libGUiICkKCQkJCQlib3JkZXIoIHBhcmVudCAp
OwoKCQkJCS8vIEdldCBuZXh0IHBhcmVudAoJCQkJcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7
CgkJCX0KCgkJCS8vIFNhZmFyaSA8PSAyIGRvdWJsZXMgYm9keSBvZmZzZXRzIHdpdGggYSBmaXhl
ZCBwb3NpdGlvbiBlbGVtZW50L29mZnNldFBhcmVudCBvciBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQg
b2Zmc2V0Q2hpbGQKCQkJLy8gTW96aWxsYSBkb3VibGVzIGJvZHkgb2Zmc2V0cyB3aXRoIGEgbm9u
LWFic29sdXRlbHkgcG9zaXRpb25lZCBvZmZzZXRDaGlsZAoJCQlpZiAoIChzYWZhcmkyICYmIChm
aXhlZCB8fCBjc3Mob2Zmc2V0Q2hpbGQsICJwb3NpdGlvbiIpID09ICJhYnNvbHV0ZSIpKSB8fAoJ
CQkJKG1vemlsbGEgJiYgY3NzKG9mZnNldENoaWxkLCAicG9zaXRpb24iKSAhPSAiYWJzb2x1dGUi
KSApCgkJCQkJYWRkKCAtZG9jLmJvZHkub2Zmc2V0TGVmdCwgLWRvYy5ib2R5Lm9mZnNldFRvcCAp
OwoKCQkJLy8gQWRkIHRoZSBkb2N1bWVudCBzY3JvbGwgb2Zmc2V0cyBpZiBwb3NpdGlvbiBpcyBm
aXhlZAoJCQlpZiAoIGZpeGVkICkKCQkJCWFkZChNYXRoLm1heChkb2MuZG9jdW1lbnRFbGVtZW50
LnNjcm9sbExlZnQsIGRvYy5ib2R5LnNjcm9sbExlZnQpLAoJCQkJCU1hdGgubWF4KGRvYy5kb2N1
bWVudEVsZW1lbnQuc2Nyb2xsVG9wLCAgZG9jLmJvZHkuc2Nyb2xsVG9wKSk7CgkJfQoKCQkvLyBS
ZXR1cm4gYW4gb2JqZWN0IHdpdGggdG9wIGFuZCBsZWZ0IHByb3BlcnRpZXMKCQlyZXN1bHRzID0g
eyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9OwoJfQoKCWZ1bmN0aW9uIGJvcmRlcihlbGVtKSB7CgkJ
YWRkKCBqUXVlcnkuY3VyQ1NTKGVsZW0sICJib3JkZXJMZWZ0V2lkdGgiLCB0cnVlKSwgalF1ZXJ5
LmN1ckNTUyhlbGVtLCAiYm9yZGVyVG9wV2lkdGgiLCB0cnVlKSApOwoJfQoKCWZ1bmN0aW9uIGFk
ZChsLCB0KSB7CgkJbGVmdCArPSBwYXJzZUludChsLCAxMCkgfHwgMDsKCQl0b3AgKz0gcGFyc2VJ
bnQodCwgMTApIHx8IDA7Cgl9CgoJcmV0dXJuIHJlc3VsdHM7Cn07CgoKalF1ZXJ5LmZuLmV4dGVu
ZCh7Cglwb3NpdGlvbjogZnVuY3Rpb24oKSB7CgkJdmFyIGxlZnQgPSAwLCB0b3AgPSAwLCByZXN1
bHRzOwoKCQlpZiAoIHRoaXNbMF0gKSB7CgkJCS8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50CgkJ
CXZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpLAoKCQkJLy8gR2V0IGNvcnJl
Y3Qgb2Zmc2V0cwoJCQlvZmZzZXQgICAgICAgPSB0aGlzLm9mZnNldCgpLAoJCQlwYXJlbnRPZmZz
ZXQgPSAvXmJvZHl8aHRtbCQvaS50ZXN0KG9mZnNldFBhcmVudFswXS50YWdOYW1lKSA/IHsgdG9w
OiAwLCBsZWZ0OiAwIH0gOiBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7CgoJCQkvLyBTdWJ0cmFjdCBl
bGVtZW50IG1hcmdpbnMKCQkJLy8gbm90ZTogd2hlbiBhbiBlbGVtZW50IGhhcyBtYXJnaW46IGF1
dG8gdGhlIG9mZnNldExlZnQgYW5kIG1hcmdpbkxlZnQgCgkJCS8vIGFyZSB0aGUgc2FtZSBpbiBT
YWZhcmkgY2F1c2luZyBvZmZzZXQubGVmdCB0byBpbmNvcnJlY3RseSBiZSAwCgkJCW9mZnNldC50
b3AgIC09IG51bSggdGhpcywgJ21hcmdpblRvcCcgKTsKCQkJb2Zmc2V0LmxlZnQgLT0gbnVtKCB0
aGlzLCAnbWFyZ2luTGVmdCcgKTsKCgkJCS8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVycwoJCQlw
YXJlbnRPZmZzZXQudG9wICArPSBudW0oIG9mZnNldFBhcmVudCwgJ2JvcmRlclRvcFdpZHRoJyAp
OwoJCQlwYXJlbnRPZmZzZXQubGVmdCArPSBudW0oIG9mZnNldFBhcmVudCwgJ2JvcmRlckxlZnRX
aWR0aCcgKTsKCgkJCS8vIFN1YnRyYWN0IHRoZSB0d28gb2Zmc2V0cwoJCQlyZXN1bHRzID0gewoJ
CQkJdG9wOiAgb2Zmc2V0LnRvcCAgLSBwYXJlbnRPZmZzZXQudG9wLAoJCQkJbGVmdDogb2Zmc2V0
LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdAoJCQl9OwoJCX0KCgkJcmV0dXJuIHJlc3VsdHM7Cgl9
LAoKCW9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7CgkJdmFyIG9mZnNldFBhcmVudCA9IHRoaXNb
MF0ub2Zmc2V0UGFyZW50OwoJCXdoaWxlICggb2Zmc2V0UGFyZW50ICYmICghL15ib2R5fGh0bWwk
L2kudGVzdChvZmZzZXRQYXJlbnQudGFnTmFtZSkgJiYgalF1ZXJ5LmNzcyhvZmZzZXRQYXJlbnQs
ICdwb3NpdGlvbicpID09ICdzdGF0aWMnKSApCgkJCW9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVu
dC5vZmZzZXRQYXJlbnQ7CgkJcmV0dXJuIGpRdWVyeShvZmZzZXRQYXJlbnQpOwoJfQp9KTsKCgov
LyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHMKalF1ZXJ5LmVhY2goIFsn
TGVmdCcsICdUb3AnXSwgZnVuY3Rpb24oaSwgbmFtZSkgewoJdmFyIG1ldGhvZCA9ICdzY3JvbGwn
ICsgbmFtZTsKCQoJalF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKHZhbCkgewoJCWlmICgh
dGhpc1swXSkgcmV0dXJuOwoKCQlyZXR1cm4gdmFsICE9IHVuZGVmaW5lZCA/CgoJCQkvLyBTZXQg
dGhlIHNjcm9sbCBvZmZzZXQKCQkJdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJdGhpcyA9PSB3
aW5kb3cgfHwgdGhpcyA9PSBkb2N1bWVudCA/CgkJCQkJd2luZG93LnNjcm9sbFRvKAoJCQkJCQkh
aSA/IHZhbCA6IGpRdWVyeSh3aW5kb3cpLnNjcm9sbExlZnQoKSwKCQkJCQkJIGkgPyB2YWwgOiBq
UXVlcnkod2luZG93KS5zY3JvbGxUb3AoKQoJCQkJCSkgOgoJCQkJCXRoaXNbIG1ldGhvZCBdID0g
dmFsOwoJCQl9KSA6CgoJCQkvLyBSZXR1cm4gdGhlIHNjcm9sbCBvZmZzZXQKCQkJdGhpc1swXSA9
PSB3aW5kb3cgfHwgdGhpc1swXSA9PSBkb2N1bWVudCA/CgkJCQlzZWxmWyBpID8gJ3BhZ2VZT2Zm
c2V0JyA6ICdwYWdlWE9mZnNldCcgXSB8fAoJCQkJCWpRdWVyeS5ib3hNb2RlbCAmJiBkb2N1bWVu
dC5kb2N1bWVudEVsZW1lbnRbIG1ldGhvZCBdIHx8CgkJCQkJZG9jdW1lbnQuYm9keVsgbWV0aG9k
IF0gOgoJCQkJdGhpc1swXVsgbWV0aG9kIF07Cgl9Owp9KTsKLy8gQ3JlYXRlIGlubmVySGVpZ2h0
LCBpbm5lcldpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzCmpRdWVyeS5l
YWNoKFsgIkhlaWdodCIsICJXaWR0aCIgXSwgZnVuY3Rpb24oaSwgbmFtZSl7CgoJdmFyIHRsID0g
aSA/ICJMZWZ0IiAgOiAiVG9wIiwgIC8vIHRvcCBvciBsZWZ0CgkJYnIgPSBpID8gIlJpZ2h0IiA6
ICJCb3R0b20iOyAvLyBib3R0b20gb3IgcmlnaHQKCgkvLyBpbm5lckhlaWdodCBhbmQgaW5uZXJX
aWR0aAoJalF1ZXJ5LmZuWyJpbm5lciIgKyBuYW1lXSA9IGZ1bmN0aW9uKCl7CgkJcmV0dXJuIHRo
aXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdKCkgKwoJCQludW0odGhpcywgInBhZGRpbmciICsgdGwp
ICsKCQkJbnVtKHRoaXMsICJwYWRkaW5nIiArIGJyKTsKCX07CgoJLy8gb3V0ZXJIZWlnaHQgYW5k
IG91dGVyV2lkdGgKCWpRdWVyeS5mblsib3V0ZXIiICsgbmFtZV0gPSBmdW5jdGlvbihtYXJnaW4p
IHsKCQlyZXR1cm4gdGhpc1siaW5uZXIiICsgbmFtZV0oKSArCgkJCW51bSh0aGlzLCAiYm9yZGVy
IiArIHRsICsgIldpZHRoIikgKwoJCQludW0odGhpcywgImJvcmRlciIgKyBiciArICJXaWR0aCIp
ICsKCQkJKG1hcmdpbiA/CgkJCQludW0odGhpcywgIm1hcmdpbiIgKyB0bCkgKyBudW0odGhpcywg
Im1hcmdpbiIgKyBicikgOiAwKTsKCX07Cgp9KTt9KSgpOwo=";

Parameter LongPath;

Parameter NameOnly = "jquery.js";

Parameter PathApp = "C:\Users\Luda\Downloads\jquery.layout.all-1.2.0\";

Parameter PathOnly = "C:\Users\Luda\Downloads\jquery.layout.all-1.2.0\";

Parameter Rashirenie = "js";

Parameter SrcName = "jquery.js";

Parameter isBinFile = 1;

}

